Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO] 07:44:33,596 fr.inria.astor.core.setup.ProjectConfiguration:282 - Version of the JVM used: 1.7.0_181
[INFO] 07:44:33,603 main:381 - Java version of the JDK used to run tests: 1.7.0_181
[INFO] 07:44:33,603 main:382 - The compliance of the JVM is:  7
[INFO] 07:44:33,606 main:660 - command line arguments: [-mode  jgenprog  -location  .  -id  Math-32  -failing  org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:purpose  -dependencies  /script/jGenProg_Defects4J_Math_32/target/classes/:/script/jGenProg_Defects4J_Math_32/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO] 07:44:33,611 fr.inria.main.evolution.AstorMain:224 - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:975) - Source folders: [/script/jGenProg_Defects4J_Math_32/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:994) - Source Test folders: [/script/jGenProg_Defects4J_Math_32/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:108) - mode is Purpose
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.resolveTestsToRun(AstorCoreEngine.java:1311) - Test retrieved from classes: 630
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Math_32/./output_astor/AstorMain-Math-32//bin//default from 630 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Math_32/./output_astor/AstorMain-Math-32//bin//default, /script/jGenProg_Defects4J_Math_32/target/classes/, /script/jGenProg_Defects4J_Math_32/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.ArrayRealVectorTest#testDataInOut
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testSimpleWithDecimalsTrunc
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testNegativeX
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testNegativeY
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testNegativeZ
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testDefaultFormatRealVectorImpl
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testNoDependency
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testRedundantEquations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testTrivial
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testTwoSets
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testIllConditioned
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testNonInversible
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testOneSet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.JacobianMatricesTest#testParameterizable
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest#testGetSigma
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.RealVectorFormatTest#testSimpleWithDecimalsTrunc
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.RealVectorFormatTest#testNegativeX
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.RealVectorFormatTest#testNegativeY
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.RealVectorFormatTest#testNegativeZ
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.RealVectorFormatTest#testDefaultFormatRealVectorImpl
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSpecialValues
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.events.EventStateTest#closeEvents
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[21]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[22]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[23]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[24]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[25]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[26]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[47]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[48]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[49]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[50]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[51]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.exception.util.LocalizedFormatsTest#testMessageNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalZero
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testMath221
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.function.SincTest#testDerivativeShortcut
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.function.SincTest#testShortcut
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testWave
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testVectorTwoPairs
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testVectorOnePair
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testRank
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testMath226
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testCross
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBuildBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testTetrahedron
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIsometry
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testSimpleWithDecimalsTrunc
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testDefaultFormatVector3D
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testNegativeX
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testNegativeY
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testNegativeZ
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testElliRotated
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testEllipse
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testUnsupportedBoundaries1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testUnsupportedBoundaries2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTwoAxes
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigar
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaNegative
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaDimensionMismatch
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRastrigin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiagonalRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSsDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testMaximize
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testAckley
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigTab
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSphere
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTablet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testDefault
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInterval
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testMultiple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testSinglePoint
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testAllButExcluded
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testAllButExcluded
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testElliRotated
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testEllipse
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTwoAxes
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testProblemDimensionTooSmall
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigar
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRastrigin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSsDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaximize
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigTab
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSphere
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTablet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaxEvaluations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testSimpleWithDecimalsTrunc
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testDefaultFormatVector3D
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testNegativeX
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testNegativeY
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testNegativeZ
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.DifferentiableMultivariateMultiStartOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.FrenchComplexFormatTest#testZeroImaginary
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.FrenchComplexFormatTest#testFormatNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.FrenchComplexFormatTest#testSimpleWithDecimalsTrunc
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.FrenchComplexFormatTest#testDefaultFormatComplex
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.FrenchComplexFormatTest#testZeroReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.FrenchComplexFormatTest#testNegativeBoth
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.FrenchComplexFormatTest#testNegativeReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.FrenchComplexFormatTest#testNegativeImaginary
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexFormatTest#testZeroImaginary
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexFormatTest#testFormatNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexFormatTest#testSimpleWithDecimalsTrunc
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexFormatTest#testDefaultFormatComplex
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexFormatTest#testZeroReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexFormatTest#testNegativeBoth
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexFormatTest#testNegativeReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexFormatTest#testNegativeImaginary
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.function.LogitTest#testDerivativeLargeArguments
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.dfp.DfpTest#testMultiply
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.correlation.CovarianceTest#testInsufficientData
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:3606, fails: 134, GZoltar suspicious 26479, with positive susp 4649
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 3606
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 335 with susp > 0.1, we consider: 335
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:898) - Setting up the max to 4478550 milliseconds (4478 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:240) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Math_32/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:68) - building model: /script/jGenProg_Defects4J_Math_32/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:82) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Math_32/target/classes/, /script/jGenProg_Defects4J_Math_32/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:779) - Number of CtTypes created: 576
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 335
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=105, susp=0.12958026383720403]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=108, susp=0.12958026383720403]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=111, susp=0.12958026383720403]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=112, susp=0.12958026383720403]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getPlus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=119, susp=0.10165112213575457]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getMinus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=126, susp=0.10165112213575457]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 335,  105
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 105
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 105, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 1.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Math_32/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 4478550
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-32
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= purpose
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Math_32/target/classes/:/script/jGenProg_Defects4J_Math_32/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:continuewhenmodelfail= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
08:39:13.648 [main] INFO  org.nd4j.linalg.factory.Nd4jBackend - Loaded [CpuBackend] backend
08:39:15.128 [main] INFO  org.nd4j.nativeblas.NativeOpsHolder - Number of threads used for NativeOps: 6
08:39:15.900 [main] INFO  org.nd4j.nativeblas.Nd4jBlas - Number of threads used for BLAS: 6
08:39:15.906 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Backend used: [CPU]; OS: [Linux]
08:39:15.906 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Cores: [48]; Memory: [3.5GB];
08:39:15.906 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Blas vendor: [MKL]
08:39:16.474 [main] INFO  o.d.m.e.loader.WordVectorSerializer - Projected memory use for model: [3.96 MB]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

08:39:19.413 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:19.413 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:19.424 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = m.operate(r),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:39:22.188 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:22.189 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:22.190 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: findEigenVectorsFromSchur(t),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SchurTransformer t = transformToSchur(matrix),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:39:24.373 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:24.373 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:24.374 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (isSymmetric(matrix, false)) {
	transformToTridiagonal(matrix);
	findEigenVectors(transformer.getQ().getData());
} else {
	final org.apache.commons.math3.linear.SchurTransformer t = transformToSchur(matrix);
	findEigenVectorsFromSchur(t);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: findEigenVectorsFromSchur(t),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:39:26.458 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:26.459 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:26.460 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] z = new double[size][size],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int size = main.length,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:39:28.988 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:28.989 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:28.990 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z[i][i] = 1.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] z = new double[size][size],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:39:31.721 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:31.721 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:31.723 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < size; i++) {
	z[i][i] = 1.0;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z[i][i] = 1.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:39:33.855 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:33.855 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:33.856 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedD.setEntry(i, i - 1, imagEigenvalues[i]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedD.setEntry(i, i + 1, imagEigenvalues[i]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:39:36.546 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:36.547 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:36.548 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0) {
	cachedD.setEntry(i, i - 1, imagEigenvalues[i]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedD.setEntry(i, i - 1, imagEigenvalues[i]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:39:39.292 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:39.297 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:39.298 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) > 0) {
	cachedD.setEntry(i, i + 1, imagEigenvalues[i]);
} else if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0) {
	cachedD.setEntry(i, i - 1, imagEigenvalues[i]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0) {
	cachedD.setEntry(i, i - 1, imagEigenvalues[i]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:39:41.322 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:41.322 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:41.323 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < imagEigenvalues.length; i++) {
	if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) > 0) {
		cachedD.setEntry(i, i + 1, imagEigenvalues[i]);
	} else if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0) {
		cachedD.setEntry(i, i - 1, imagEigenvalues[i]);
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) > 0) {
	cachedD.setEntry(i, i + 1, imagEigenvalues[i]);
} else if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0) {
	cachedD.setEntry(i, i - 1, imagEigenvalues[i]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:39:43.277 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:43.278 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:43.278 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] matT = schurTransform.getT().getData(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SchurTransformer schurTransform = new org.apache.commons.math3.linear.SchurTransformer(matrix),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:39:45.281 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:45.282 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:45.283 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: realEigenvalues = new double[matT.length],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] matT = schurTransform.getT().getData(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:39:47.312 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:47.312 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:47.313 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: imagEigenvalues = new double[matT.length],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: realEigenvalues = new double[matT.length],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:39:50.015 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:50.016 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:50.019 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: realEigenvalues[i] = matT[i][i],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: imagEigenvalues = new double[matT.length],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:39:52.663 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:52.664 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:52.665 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double x = matT[i + 1][i + 1],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: realEigenvalues[i] = matT[i][i],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:39:55.340 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:55.341 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:55.343 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double p = 0.5 * (matT[i][i] - x),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double x = matT[i + 1][i + 1],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:39:58.027 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:58.027 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:58.028 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1]))),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double p = 0.5 * (matT[i][i] - x),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:00.624 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:00.625 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:00.625 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: realEigenvalues[i] = x + p,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1]))),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:03.377 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:03.378 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:03.379 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: imagEigenvalues[i] = z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: realEigenvalues[i] = x + p,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:06.127 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:06.127 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:06.129 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: realEigenvalues[i + 1] = x + p,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: imagEigenvalues[i] = z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:08.749 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:08.750 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:08.751 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: imagEigenvalues[i + 1] = -z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: realEigenvalues[i + 1] = x + p,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:11.424 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:11.424 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:11.426 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: i++,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: imagEigenvalues[i + 1] = -z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:14.026 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:14.027 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:14.028 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((i == (realEigenvalues.length - 1)) || 
org.apache.commons.math3.util.Precision.equals(matT[i + 1][i], 0.0, epsilon)) {
	realEigenvalues[i] = matT[i][i];
} else {
	final double x = matT[i + 1][i + 1];
	final double p = 0.5 * (matT[i][i] - x);
	final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1])));
	realEigenvalues[i] = x + p;
	imagEigenvalues[i] = z;
	realEigenvalues[i + 1] = x + p;
	imagEigenvalues[i + 1] = -z;
	i++;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: i++,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:16.634 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:16.635 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:16.636 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < realEigenvalues.length; i++) {
	if ((i == (realEigenvalues.length - 1)) || 
	org.apache.commons.math3.util.Precision.equals(matT[i + 1][i], 0.0, epsilon)) {
		realEigenvalues[i] = matT[i][i];
	} else {
		final double x = matT[i + 1][i + 1];
		final double p = 0.5 * (matT[i][i] - x);
		final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1])));
		realEigenvalues[i] = x + p;
		imagEigenvalues[i] = z;
		realEigenvalues[i + 1] = x + p;
		imagEigenvalues[i + 1] = -z;
		i++;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((i == (realEigenvalues.length - 1)) || 
org.apache.commons.math3.util.Precision.equals(matT[i + 1][i], 0.0, epsilon)) {
	realEigenvalues[i] = matT[i][i];
} else {
	final double x = matT[i + 1][i + 1];
	final double p = 0.5 * (matT[i][i] - x);
	final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1])));
	realEigenvalues[i] = x + p;
	imagEigenvalues[i] = z;
	realEigenvalues[i + 1] = x + p;
	imagEigenvalues[i + 1] = -z;
	i++;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:19.162 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:19.163 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:19.165 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return schurTransform,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < realEigenvalues.length; i++) {
	if ((i == (realEigenvalues.length - 1)) || 
	org.apache.commons.math3.util.Precision.equals(matT[i + 1][i], 0.0, epsilon)) {
		realEigenvalues[i] = matT[i][i];
	} else {
		final double x = matT[i + 1][i + 1];
		final double p = 0.5 * (matT[i][i] - x);
		final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1])));
		realEigenvalues[i] = x + p;
		imagEigenvalues[i] = z;
		realEigenvalues[i + 1] = x + p;
		imagEigenvalues[i + 1] = -z;
		i++;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:21.802 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:21.802 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:21.803 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.complex.Complex(xr, xi).divide(new org.apache.commons.math3.complex.Complex(yr, yi)),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return schurTransform,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:24.105 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:24.105 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:24.106 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] matrixT = schur.getT().getData(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.complex.Complex(xr, xi).divide(new org.apache.commons.math3.complex.Complex(yr, yi)),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:26.700 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:26.701 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:26.702 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] matrixP = schur.getP().getData(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] matrixT = schur.getT().getData(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:29.564 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:29.564 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:29.565 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = matrixT.length,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] matrixP = schur.getP().getData(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:31.975 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:31.976 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:31.977 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double norm = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = matrixT.length,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:34.097 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:34.098 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:34.098 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: norm = norm + org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double norm = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:36.728 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:36.731 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:36.733 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < n; j++) {
	norm = norm + org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: norm = norm + org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:39.263 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:39.264 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:39.265 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; i++) {
	for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < n; j++) {
		norm = norm + org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < n; j++) {
	norm = norm + org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:41.895 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:41.896 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:41.897 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; i++) {
	for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < n; j++) {
		norm = norm + org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:44.614 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:44.615 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:44.616 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(norm, 0.0)) {

	return;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:47.157 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:47.158 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:47.159 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double r = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(norm, 0.0)) {

	return;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:49.702 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:49.703 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:49.704 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double r = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:52.066 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:52.066 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:52.067 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double z = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:54.069 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:54.069 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:54.070 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double p = realEigenvalues[idx],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double z = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:56.058 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:56.059 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:56.060 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double q = imagEigenvalues[idx],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double p = realEigenvalues[idx],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:40:58.460 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:58.463 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:58.464 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int l = idx,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double q = imagEigenvalues[idx],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:01.057 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:01.059 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:01.060 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx][idx] = 1.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int l = idx,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:03.731 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:03.731 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:03.733 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double w = matrixT[i][i] - p,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx][idx] = 1.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:06.292 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:06.294 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:06.295 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: r = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double w = matrixT[i][i] - p,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:08.934 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:08.934 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:08.935 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: r = r + (matrixT[i][j] * matrixT[j][idx]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: r = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:11.610 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:11.611 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:11.612 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = l; j <= idx; j++) {
	r = r + (matrixT[i][j] * matrixT[j][idx]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: r = r + (matrixT[i][j] * matrixT[j][idx]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:14.193 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:14.194 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:14.195 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = w,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = l; j <= idx; j++) {
	r = r + (matrixT[i][j] * matrixT[j][idx]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:16.653 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:16.653 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:16.654 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = r,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = w,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:19.142 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:19.142 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:19.143 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: l = i,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = r,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:21.715 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:21.716 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:21.717 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx] = (-r) / w,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: l = i,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:24.065 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:24.066 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:24.067 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][idx] = (-r) / w,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:26.650 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:26.650 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:26.651 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (w != 0.0) {
	matrixT[i][idx] = (-r) / w;
} else {
	matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:28.620 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:28.620 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:28.621 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double x = matrixT[i][i + 1],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (w != 0.0) {
	matrixT[i][idx] = (-r) / w;
} else {
	matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:30.521 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:30.521 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:30.522 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double y = matrixT[i + 1][i],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double x = matrixT[i][i + 1],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:32.422 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:32.423 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:32.425 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
(imagEigenvalues[i] * imagEigenvalues[i]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double y = matrixT[i + 1][i],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:34.648 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:34.649 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:34.650 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double t = ((x * s) - (z * r)) / q,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
(imagEigenvalues[i] * imagEigenvalues[i]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:37.075 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:37.075 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:37.077 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx] = t,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double t = ((x * s) - (z * r)) / q,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:39.426 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:39.426 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:39.427 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i + 1][idx] = ((-r) - (w * t)) / x,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][idx] = t,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:41.708 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:41.709 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:41.710 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i + 1][idx] = ((-s) - (y * t)) / z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i + 1][idx] = ((-r) - (w * t)) / x,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:43.999 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:43.999 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:44.000 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
	matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
} else {
	matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i + 1][idx] = ((-s) - (y * t)) / z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:46.517 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:46.518 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:46.519 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
	if (w != 0.0) {
		matrixT[i][idx] = (-r) / w;
	} else {
		matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
	}
} else {

	double x = matrixT[i][i + 1];
	double y = matrixT[i + 1][i];
	q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
	(imagEigenvalues[i] * imagEigenvalues[i]);
	double t = ((x * s) - (z * r)) / q;
	matrixT[i][idx] = t;
	if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
		matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
	} else {
		matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
	matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
} else {
	matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:49.071 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:49.072 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:49.073 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double t = org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
	if (w != 0.0) {
		matrixT[i][idx] = (-r) / w;
	} else {
		matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
	}
} else {

	double x = matrixT[i][i + 1];
	double y = matrixT[i + 1][i];
	q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
	(imagEigenvalues[i] * imagEigenvalues[i]);
	double t = ((x * s) - (z * r)) / q;
	matrixT[i][idx] = t;
	if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
		matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
	} else {
		matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:51.648 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:51.649 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:51.650 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[j][idx] = matrixT[j][idx] / t,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double t = org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:54.126 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:54.126 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:54.127 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = i; j <= idx; j++) {
	matrixT[j][idx] = matrixT[j][idx] / t;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[j][idx] = matrixT[j][idx] / t,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:56.653 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:56.653 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:56.654 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
	for (int j = i; j <= idx; j++) {
		matrixT[j][idx] = matrixT[j][idx] / t;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = i; j <= idx; j++) {
	matrixT[j][idx] = matrixT[j][idx] / t;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:41:59.093 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:59.093 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:59.094 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
	z = w;
	s = r;
} else {
	l = i;
	if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
		if (w != 0.0) {
			matrixT[i][idx] = (-r) / w;
		} else {
			matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
		}
	} else {

		double x = matrixT[i][i + 1];
		double y = matrixT[i + 1][i];
		q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
		(imagEigenvalues[i] * imagEigenvalues[i]);
		double t = ((x * s) - (z * r)) / q;
		matrixT[i][idx] = t;
		if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
			matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
		} else {
			matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
		}
	}


	double t = org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]);
	if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
		for (int j = i; j <= idx; j++) {
			matrixT[j][idx] = matrixT[j][idx] / t;
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
	for (int j = i; j <= idx; j++) {
		matrixT[j][idx] = matrixT[j][idx] / t;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:01.540 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:01.540 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:01.541 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = idx - 1; i >= 0; i--) {
	double w = matrixT[i][i] - p;
	r = 0.0;
	for (int j = l; j <= idx; j++) {
		r = r + (matrixT[i][j] * matrixT[j][idx]);
	}
	if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
		z = w;
		s = r;
	} else {
		l = i;
		if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
			if (w != 0.0) {
				matrixT[i][idx] = (-r) / w;
			} else {
				matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
			}
		} else {

			double x = matrixT[i][i + 1];
			double y = matrixT[i + 1][i];
			q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
			(imagEigenvalues[i] * imagEigenvalues[i]);
			double t = ((x * s) - (z * r)) / q;
			matrixT[i][idx] = t;
			if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
				matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
			} else {
				matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
			}
		}


		double t = org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]);
		if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
			for (int j = i; j <= idx; j++) {
				matrixT[j][idx] = matrixT[j][idx] / t;
			}
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
	z = w;
	s = r;
} else {
	l = i;
	if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
		if (w != 0.0) {
			matrixT[i][idx] = (-r) / w;
		} else {
			matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
		}
	} else {

		double x = matrixT[i][i + 1];
		double y = matrixT[i + 1][i];
		q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
		(imagEigenvalues[i] * imagEigenvalues[i]);
		double t = ((x * s) - (z * r)) / q;
		matrixT[i][idx] = t;
		if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
			matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
		} else {
			matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
		}
	}


	double t = org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]);
	if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
		for (int j = i; j <= idx; j++) {
			matrixT[j][idx] = matrixT[j][idx] / t;
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:04.004 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:04.004 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:04.005 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int l = idx - 1,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = idx - 1; i >= 0; i--) {
	double w = matrixT[i][i] - p;
	r = 0.0;
	for (int j = l; j <= idx; j++) {
		r = r + (matrixT[i][j] * matrixT[j][idx]);
	}
	if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
		z = w;
		s = r;
	} else {
		l = i;
		if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
			if (w != 0.0) {
				matrixT[i][idx] = (-r) / w;
			} else {
				matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
			}
		} else {

			double x = matrixT[i][i + 1];
			double y = matrixT[i + 1][i];
			q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
			(imagEigenvalues[i] * imagEigenvalues[i]);
			double t = ((x * s) - (z * r)) / q;
			matrixT[i][idx] = t;
			if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
				matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
			} else {
				matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
			}
		}


		double t = org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]);
		if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
			for (int j = i; j <= idx; j++) {
				matrixT[j][idx] = matrixT[j][idx] / t;
			}
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:06.003 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:06.004 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:06.005 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int l = idx - 1,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:08.408 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:08.408 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:08.409 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx] = (-(matrixT[idx][idx] - p)) / matrixT[idx][idx - 1],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:10.508 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:10.508 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:10.509 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.complex.Complex result = cdiv(0.0, -matrixT[idx - 1][idx], 
matrixT[idx - 1][idx - 1] - p, q),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx] = (-(matrixT[idx][idx] - p)) / matrixT[idx][idx - 1],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:12.877 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:12.877 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:12.878 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = result.getReal(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.complex.Complex result = cdiv(0.0, -matrixT[idx - 1][idx], 
matrixT[idx - 1][idx - 1] - p, q),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:14.861 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:14.861 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:14.862 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx] = result.getImaginary(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = result.getReal(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:16.844 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:16.844 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:16.845 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) > org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx])) {
	matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];
	matrixT[idx - 1][idx] = (-(matrixT[idx][idx] - p)) / matrixT[idx][idx - 1];
} else {
	final org.apache.commons.math3.complex.Complex result = cdiv(0.0, -matrixT[idx - 1][idx], 
	matrixT[idx - 1][idx - 1] - p, q);
	matrixT[idx - 1][idx - 1] = result.getReal();
	matrixT[idx - 1][idx] = result.getImaginary();
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx] = result.getImaginary(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:18.750 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:18.750 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:18.751 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx][idx - 1] = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) > org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx])) {
	matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];
	matrixT[idx - 1][idx] = (-(matrixT[idx][idx] - p)) / matrixT[idx][idx - 1];
} else {
	final org.apache.commons.math3.complex.Complex result = cdiv(0.0, -matrixT[idx - 1][idx], 
	matrixT[idx - 1][idx - 1] - p, q);
	matrixT[idx - 1][idx - 1] = result.getReal();
	matrixT[idx - 1][idx] = result.getImaginary();
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:21.070 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:21.071 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:21.072 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double ra = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx][idx - 1] = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:23.541 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:23.542 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:23.542 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double sa = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double ra = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:25.981 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:25.982 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:25.983 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double sa = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:28.347 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:28.347 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:28.349 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: sa = sa + (matrixT[i][j] * matrixT[j][idx]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:30.587 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:30.587 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:30.588 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = l; j <= idx; j++) {
	ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]);
	sa = sa + (matrixT[i][j] * matrixT[j][idx]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: sa = sa + (matrixT[i][j] * matrixT[j][idx]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:32.806 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:32.806 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:32.807 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: r = ra,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = l; j <= idx; j++) {
	ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]);
	sa = sa + (matrixT[i][j] * matrixT[j][idx]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:35.048 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:35.048 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:35.049 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = sa,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: r = ra,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:37.454 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:37.454 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:37.457 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = sa,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:40.011 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:40.012 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:40.013 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx - 1] = c.getReal(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:42.232 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:42.232 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:42.233 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx] = c.getImaginary(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][idx - 1] = c.getReal(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:44.471 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:44.471 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:44.473 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][idx] = c.getImaginary(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:46.890 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:46.891 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:46.892 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double vi = ((realEigenvalues[i] - p) * 2.0) * q,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:49.342 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:49.343 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:49.343 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z)),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double vi = ((realEigenvalues[i] - p) * 2.0) * q,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:51.427 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:51.428 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:51.429 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
	vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
	((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
	org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z)),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:53.737 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:53.738 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:53.739 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
((x * s) - (z * sa)) - (q * ra), vr, vi),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
	vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
	((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
	org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:55.999 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:56.000 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:56.001 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
(q * matrixT[i][idx])) / x,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
((x * s) - (z * sa)) - (q * ra), vr, vi),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:42:58.260 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:58.261 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:58.262 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
(q * matrixT[i][idx - 1])) / x,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
(q * matrixT[i][idx])) / x,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:00.720 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:00.720 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:00.721 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
(-s) - (y * matrixT[i][idx]), z, q),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
(q * matrixT[i][idx - 1])) / x,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:03.208 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:03.208 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:03.209 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i + 1][idx - 1] = c2.getReal(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
(-s) - (y * matrixT[i][idx]), z, q),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:05.659 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:05.659 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:05.660 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i + 1][idx] = c2.getImaginary(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i + 1][idx - 1] = c2.getReal(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:07.738 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:07.738 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:07.739 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
	matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
	(q * matrixT[i][idx])) / x;
	matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
	(q * matrixT[i][idx - 1])) / x;
} else {
	final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
	(-s) - (y * matrixT[i][idx]), z, q);
	matrixT[i + 1][idx - 1] = c2.getReal();
	matrixT[i + 1][idx] = c2.getImaginary();
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i + 1][idx] = c2.getImaginary(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:10.168 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:10.168 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:10.169 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
	final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
	matrixT[i][idx - 1] = c.getReal();
	matrixT[i][idx] = c.getImaginary();
} else {

	double x = matrixT[i][i + 1];
	double y = matrixT[i + 1][i];
	double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
	(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
	final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
	if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
		vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
		((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
		org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
	}
	final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
	((x * s) - (z * sa)) - (q * ra), vr, vi);
	matrixT[i][idx - 1] = c.getReal();
	matrixT[i][idx] = c.getImaginary();

	if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
		matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
		(q * matrixT[i][idx])) / x;
		matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
		(q * matrixT[i][idx - 1])) / x;
	} else {
		final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
		(-s) - (y * matrixT[i][idx]), z, q);
		matrixT[i + 1][idx - 1] = c2.getReal();
		matrixT[i + 1][idx] = c2.getImaginary();
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
	matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
	(q * matrixT[i][idx])) / x;
	matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
	(q * matrixT[i][idx - 1])) / x;
} else {
	final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
	(-s) - (y * matrixT[i][idx]), z, q);
	matrixT[i + 1][idx - 1] = c2.getReal();
	matrixT[i + 1][idx] = c2.getImaginary();
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:12.561 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:12.562 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:12.565 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx])),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
	final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
	matrixT[i][idx - 1] = c.getReal();
	matrixT[i][idx] = c.getImaginary();
} else {

	double x = matrixT[i][i + 1];
	double y = matrixT[i + 1][i];
	double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
	(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
	final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
	if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
		vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
		((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
		org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
	}
	final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
	((x * s) - (z * sa)) - (q * ra), vr, vi);
	matrixT[i][idx - 1] = c.getReal();
	matrixT[i][idx] = c.getImaginary();

	if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
		matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
		(q * matrixT[i][idx])) / x;
		matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
		(q * matrixT[i][idx - 1])) / x;
	} else {
		final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
		(-s) - (y * matrixT[i][idx]), z, q);
		matrixT[i + 1][idx - 1] = c2.getReal();
		matrixT[i + 1][idx] = c2.getImaginary();
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:15.124 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:15.125 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:15.126 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[j][idx - 1] = matrixT[j][idx - 1] / t,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx])),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:17.622 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:17.622 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:17.623 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = i; j <= idx; j++) {
	matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
	matrixT[j][idx] = matrixT[j][idx] / t;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[j][idx - 1] = matrixT[j][idx - 1] / t,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:20.056 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:20.056 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:20.057 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
	for (int j = i; j <= idx; j++) {
		matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
		matrixT[j][idx] = matrixT[j][idx] / t;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = i; j <= idx; j++) {
	matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
	matrixT[j][idx] = matrixT[j][idx] / t;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:22.506 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:22.507 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:22.508 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
	z = w;
	r = ra;
	s = sa;
} else {
	l = i;
	if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
		final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
		matrixT[i][idx - 1] = c.getReal();
		matrixT[i][idx] = c.getImaginary();
	} else {

		double x = matrixT[i][i + 1];
		double y = matrixT[i + 1][i];
		double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
		(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
		final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
		if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
			vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
			((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
			org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
		}
		final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
		((x * s) - (z * sa)) - (q * ra), vr, vi);
		matrixT[i][idx - 1] = c.getReal();
		matrixT[i][idx] = c.getImaginary();

		if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
			matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
			(q * matrixT[i][idx])) / x;
			matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
			(q * matrixT[i][idx - 1])) / x;
		} else {
			final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
			(-s) - (y * matrixT[i][idx]), z, q);
			matrixT[i + 1][idx - 1] = c2.getReal();
			matrixT[i + 1][idx] = c2.getImaginary();
		}
	}


	double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
	org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]));
	if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
		for (int j = i; j <= idx; j++) {
			matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
			matrixT[j][idx] = matrixT[j][idx] / t;
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
	for (int j = i; j <= idx; j++) {
		matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
		matrixT[j][idx] = matrixT[j][idx] / t;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:24.937 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:24.937 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:24.938 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = idx - 2; i >= 0; i--) {
	double ra = 0.0;
	double sa = 0.0;
	for (int j = l; j <= idx; j++) {
		ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]);
		sa = sa + (matrixT[i][j] * matrixT[j][idx]);
	}
	double w = matrixT[i][i] - p;

	if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
		z = w;
		r = ra;
		s = sa;
	} else {
		l = i;
		if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
			final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
			matrixT[i][idx - 1] = c.getReal();
			matrixT[i][idx] = c.getImaginary();
		} else {

			double x = matrixT[i][i + 1];
			double y = matrixT[i + 1][i];
			double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
			(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
			final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
			if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
				vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
				((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
				org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
			}
			final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
			((x * s) - (z * sa)) - (q * ra), vr, vi);
			matrixT[i][idx - 1] = c.getReal();
			matrixT[i][idx] = c.getImaginary();

			if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
				matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
				(q * matrixT[i][idx])) / x;
				matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
				(q * matrixT[i][idx - 1])) / x;
			} else {
				final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
				(-s) - (y * matrixT[i][idx]), z, q);
				matrixT[i + 1][idx - 1] = c2.getReal();
				matrixT[i + 1][idx] = c2.getImaginary();
			}
		}


		double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
		org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]));
		if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
			for (int j = i; j <= idx; j++) {
				matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
				matrixT[j][idx] = matrixT[j][idx] / t;
			}
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
	z = w;
	r = ra;
	s = sa;
} else {
	l = i;
	if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
		final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
		matrixT[i][idx - 1] = c.getReal();
		matrixT[i][idx] = c.getImaginary();
	} else {

		double x = matrixT[i][i + 1];
		double y = matrixT[i + 1][i];
		double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
		(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
		final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
		if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
			vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
			((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
			org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
		}
		final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
		((x * s) - (z * sa)) - (q * ra), vr, vi);
		matrixT[i][idx - 1] = c.getReal();
		matrixT[i][idx] = c.getImaginary();

		if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
			matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
			(q * matrixT[i][idx])) / x;
			matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
			(q * matrixT[i][idx - 1])) / x;
		} else {
			final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
			(-s) - (y * matrixT[i][idx]), z, q);
			matrixT[i + 1][idx - 1] = c2.getReal();
			matrixT[i + 1][idx] = c2.getImaginary();
		}
	}


	double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
	org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]));
	if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
		for (int j = i; j <= idx; j++) {
			matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
			matrixT[j][idx] = matrixT[j][idx] / t;
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:27.376 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:27.377 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:27.378 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (q < 0.0) {

	int l = idx - 1;


	if (org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) > org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx])) {
		matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];
		matrixT[idx - 1][idx] = (-(matrixT[idx][idx] - p)) / matrixT[idx][idx - 1];
	} else {
		final org.apache.commons.math3.complex.Complex result = cdiv(0.0, -matrixT[idx - 1][idx], 
		matrixT[idx - 1][idx - 1] - p, q);
		matrixT[idx - 1][idx - 1] = result.getReal();
		matrixT[idx - 1][idx] = result.getImaginary();
	}

	matrixT[idx][idx - 1] = 0.0;
	matrixT[idx][idx] = 1.0;

	for (int i = idx - 2; i >= 0; i--) {
		double ra = 0.0;
		double sa = 0.0;
		for (int j = l; j <= idx; j++) {
			ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]);
			sa = sa + (matrixT[i][j] * matrixT[j][idx]);
		}
		double w = matrixT[i][i] - p;

		if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
			z = w;
			r = ra;
			s = sa;
		} else {
			l = i;
			if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
				final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
				matrixT[i][idx - 1] = c.getReal();
				matrixT[i][idx] = c.getImaginary();
			} else {

				double x = matrixT[i][i + 1];
				double y = matrixT[i + 1][i];
				double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
				(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
				final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
				if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
					vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
					((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
					org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
				}
				final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
				((x * s) - (z * sa)) - (q * ra), vr, vi);
				matrixT[i][idx - 1] = c.getReal();
				matrixT[i][idx] = c.getImaginary();

				if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
					matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
					(q * matrixT[i][idx])) / x;
					matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
					(q * matrixT[i][idx - 1])) / x;
				} else {
					final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
					(-s) - (y * matrixT[i][idx]), z, q);
					matrixT[i + 1][idx - 1] = c2.getReal();
					matrixT[i + 1][idx] = c2.getImaginary();
				}
			}


			double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
			org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]));
			if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
				for (int j = i; j <= idx; j++) {
					matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
					matrixT[j][idx] = matrixT[j][idx] / t;
				}
			}
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = idx - 2; i >= 0; i--) {
	double ra = 0.0;
	double sa = 0.0;
	for (int j = l; j <= idx; j++) {
		ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]);
		sa = sa + (matrixT[i][j] * matrixT[j][idx]);
	}
	double w = matrixT[i][i] - p;

	if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
		z = w;
		r = ra;
		s = sa;
	} else {
		l = i;
		if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
			final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
			matrixT[i][idx - 1] = c.getReal();
			matrixT[i][idx] = c.getImaginary();
		} else {

			double x = matrixT[i][i + 1];
			double y = matrixT[i + 1][i];
			double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
			(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
			final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
			if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
				vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
				((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
				org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
			}
			final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
			((x * s) - (z * sa)) - (q * ra), vr, vi);
			matrixT[i][idx - 1] = c.getReal();
			matrixT[i][idx] = c.getImaginary();

			if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
				matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
				(q * matrixT[i][idx])) / x;
				matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
				(q * matrixT[i][idx - 1])) / x;
			} else {
				final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
				(-s) - (y * matrixT[i][idx]), z, q);
				matrixT[i + 1][idx - 1] = c2.getReal();
				matrixT[i + 1][idx] = c2.getImaginary();
			}
		}


		double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
		org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]));
		if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
			for (int j = i; j <= idx; j++) {
				matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
				matrixT[j][idx] = matrixT[j][idx] / t;
			}
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:29.963 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:29.964 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:29.965 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(q, 0.0)) {

	int l = idx;
	matrixT[idx][idx] = 1.0;
	for (int i = idx - 1; i >= 0; i--) {
		double w = matrixT[i][i] - p;
		r = 0.0;
		for (int j = l; j <= idx; j++) {
			r = r + (matrixT[i][j] * matrixT[j][idx]);
		}
		if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
			z = w;
			s = r;
		} else {
			l = i;
			if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
				if (w != 0.0) {
					matrixT[i][idx] = (-r) / w;
				} else {
					matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
				}
			} else {

				double x = matrixT[i][i + 1];
				double y = matrixT[i + 1][i];
				q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
				(imagEigenvalues[i] * imagEigenvalues[i]);
				double t = ((x * s) - (z * r)) / q;
				matrixT[i][idx] = t;
				if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
					matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
				} else {
					matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
				}
			}


			double t = org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]);
			if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
				for (int j = i; j <= idx; j++) {
					matrixT[j][idx] = matrixT[j][idx] / t;
				}
			}
		}
	}
} else if (q < 0.0) {

	int l = idx - 1;


	if (org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) > org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx])) {
		matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];
		matrixT[idx - 1][idx] = (-(matrixT[idx][idx] - p)) / matrixT[idx][idx - 1];
	} else {
		final org.apache.commons.math3.complex.Complex result = cdiv(0.0, -matrixT[idx - 1][idx], 
		matrixT[idx - 1][idx - 1] - p, q);
		matrixT[idx - 1][idx - 1] = result.getReal();
		matrixT[idx - 1][idx] = result.getImaginary();
	}

	matrixT[idx][idx - 1] = 0.0;
	matrixT[idx][idx] = 1.0;

	for (int i = idx - 2; i >= 0; i--) {
		double ra = 0.0;
		double sa = 0.0;
		for (int j = l; j <= idx; j++) {
			ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]);
			sa = sa + (matrixT[i][j] * matrixT[j][idx]);
		}
		double w = matrixT[i][i] - p;

		if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
			z = w;
			r = ra;
			s = sa;
		} else {
			l = i;
			if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
				final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
				matrixT[i][idx - 1] = c.getReal();
				matrixT[i][idx] = c.getImaginary();
			} else {

				double x = matrixT[i][i + 1];
				double y = matrixT[i + 1][i];
				double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
				(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
				final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
				if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
					vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
					((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
					org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
				}
				final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
				((x * s) - (z * sa)) - (q * ra), vr, vi);
				matrixT[i][idx - 1] = c.getReal();
				matrixT[i][idx] = c.getImaginary();

				if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
					matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
					(q * matrixT[i][idx])) / x;
					matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
					(q * matrixT[i][idx - 1])) / x;
				} else {
					final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
					(-s) - (y * matrixT[i][idx]), z, q);
					matrixT[i + 1][idx - 1] = c2.getReal();
					matrixT[i + 1][idx] = c2.getImaginary();
				}
			}


			double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
			org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]));
			if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
				for (int j = i; j <= idx; j++) {
					matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
					matrixT[j][idx] = matrixT[j][idx] / t;
				}
			}
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (q < 0.0) {

	int l = idx - 1;


	if (org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) > org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx])) {
		matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];
		matrixT[idx - 1][idx] = (-(matrixT[idx][idx] - p)) / matrixT[idx][idx - 1];
	} else {
		final org.apache.commons.math3.complex.Complex result = cdiv(0.0, -matrixT[idx - 1][idx], 
		matrixT[idx - 1][idx - 1] - p, q);
		matrixT[idx - 1][idx - 1] = result.getReal();
		matrixT[idx - 1][idx] = result.getImaginary();
	}

	matrixT[idx][idx - 1] = 0.0;
	matrixT[idx][idx] = 1.0;

	for (int i = idx - 2; i >= 0; i--) {
		double ra = 0.0;
		double sa = 0.0;
		for (int j = l; j <= idx; j++) {
			ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]);
			sa = sa + (matrixT[i][j] * matrixT[j][idx]);
		}
		double w = matrixT[i][i] - p;

		if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
			z = w;
			r = ra;
			s = sa;
		} else {
			l = i;
			if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
				final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
				matrixT[i][idx - 1] = c.getReal();
				matrixT[i][idx] = c.getImaginary();
			} else {

				double x = matrixT[i][i + 1];
				double y = matrixT[i + 1][i];
				double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
				(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
				final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
				if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
					vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
					((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
					org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
				}
				final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
				((x * s) - (z * sa)) - (q * ra), vr, vi);
				matrixT[i][idx - 1] = c.getReal();
				matrixT[i][idx] = c.getImaginary();

				if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
					matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
					(q * matrixT[i][idx])) / x;
					matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
					(q * matrixT[i][idx - 1])) / x;
				} else {
					final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
					(-s) - (y * matrixT[i][idx]), z, q);
					matrixT[i + 1][idx - 1] = c2.getReal();
					matrixT[i + 1][idx] = c2.getImaginary();
				}
			}


			double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
			org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]));
			if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
				for (int j = i; j <= idx; j++) {
					matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
					matrixT[j][idx] = matrixT[j][idx] / t;
				}
			}
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:32.496 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:32.496 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:32.497 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int idx = n - 1; idx >= 0; idx--) {
	double p = realEigenvalues[idx];
	double q = imagEigenvalues[idx];

	if (org.apache.commons.math3.util.Precision.equals(q, 0.0)) {

		int l = idx;
		matrixT[idx][idx] = 1.0;
		for (int i = idx - 1; i >= 0; i--) {
			double w = matrixT[i][i] - p;
			r = 0.0;
			for (int j = l; j <= idx; j++) {
				r = r + (matrixT[i][j] * matrixT[j][idx]);
			}
			if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
				z = w;
				s = r;
			} else {
				l = i;
				if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
					if (w != 0.0) {
						matrixT[i][idx] = (-r) / w;
					} else {
						matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
					}
				} else {

					double x = matrixT[i][i + 1];
					double y = matrixT[i + 1][i];
					q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
					(imagEigenvalues[i] * imagEigenvalues[i]);
					double t = ((x * s) - (z * r)) / q;
					matrixT[i][idx] = t;
					if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
						matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
					} else {
						matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
					}
				}


				double t = org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]);
				if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
					for (int j = i; j <= idx; j++) {
						matrixT[j][idx] = matrixT[j][idx] / t;
					}
				}
			}
		}
	} else if (q < 0.0) {

		int l = idx - 1;


		if (org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) > org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx])) {
			matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];
			matrixT[idx - 1][idx] = (-(matrixT[idx][idx] - p)) / matrixT[idx][idx - 1];
		} else {
			final org.apache.commons.math3.complex.Complex result = cdiv(0.0, -matrixT[idx - 1][idx], 
			matrixT[idx - 1][idx - 1] - p, q);
			matrixT[idx - 1][idx - 1] = result.getReal();
			matrixT[idx - 1][idx] = result.getImaginary();
		}

		matrixT[idx][idx - 1] = 0.0;
		matrixT[idx][idx] = 1.0;

		for (int i = idx - 2; i >= 0; i--) {
			double ra = 0.0;
			double sa = 0.0;
			for (int j = l; j <= idx; j++) {
				ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]);
				sa = sa + (matrixT[i][j] * matrixT[j][idx]);
			}
			double w = matrixT[i][i] - p;

			if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
				z = w;
				r = ra;
				s = sa;
			} else {
				l = i;
				if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
					final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
					matrixT[i][idx - 1] = c.getReal();
					matrixT[i][idx] = c.getImaginary();
				} else {

					double x = matrixT[i][i + 1];
					double y = matrixT[i + 1][i];
					double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
					(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
					final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
					if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
						vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
						((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
						org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
					}
					final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
					((x * s) - (z * sa)) - (q * ra), vr, vi);
					matrixT[i][idx - 1] = c.getReal();
					matrixT[i][idx] = c.getImaginary();

					if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
						matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
						(q * matrixT[i][idx])) / x;
						matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
						(q * matrixT[i][idx - 1])) / x;
					} else {
						final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
						(-s) - (y * matrixT[i][idx]), z, q);
						matrixT[i + 1][idx - 1] = c2.getReal();
						matrixT[i + 1][idx] = c2.getImaginary();
					}
				}


				double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
				org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]));
				if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
					for (int j = i; j <= idx; j++) {
						matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
						matrixT[j][idx] = matrixT[j][idx] / t;
					}
				}
			}
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(q, 0.0)) {

	int l = idx;
	matrixT[idx][idx] = 1.0;
	for (int i = idx - 1; i >= 0; i--) {
		double w = matrixT[i][i] - p;
		r = 0.0;
		for (int j = l; j <= idx; j++) {
			r = r + (matrixT[i][j] * matrixT[j][idx]);
		}
		if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
			z = w;
			s = r;
		} else {
			l = i;
			if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
				if (w != 0.0) {
					matrixT[i][idx] = (-r) / w;
				} else {
					matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
				}
			} else {

				double x = matrixT[i][i + 1];
				double y = matrixT[i + 1][i];
				q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
				(imagEigenvalues[i] * imagEigenvalues[i]);
				double t = ((x * s) - (z * r)) / q;
				matrixT[i][idx] = t;
				if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
					matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
				} else {
					matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
				}
			}


			double t = org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]);
			if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
				for (int j = i; j <= idx; j++) {
					matrixT[j][idx] = matrixT[j][idx] / t;
				}
			}
		}
	}
} else if (q < 0.0) {

	int l = idx - 1;


	if (org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) > org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx])) {
		matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];
		matrixT[idx - 1][idx] = (-(matrixT[idx][idx] - p)) / matrixT[idx][idx - 1];
	} else {
		final org.apache.commons.math3.complex.Complex result = cdiv(0.0, -matrixT[idx - 1][idx], 
		matrixT[idx - 1][idx - 1] - p, q);
		matrixT[idx - 1][idx - 1] = result.getReal();
		matrixT[idx - 1][idx] = result.getImaginary();
	}

	matrixT[idx][idx - 1] = 0.0;
	matrixT[idx][idx] = 1.0;

	for (int i = idx - 2; i >= 0; i--) {
		double ra = 0.0;
		double sa = 0.0;
		for (int j = l; j <= idx; j++) {
			ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]);
			sa = sa + (matrixT[i][j] * matrixT[j][idx]);
		}
		double w = matrixT[i][i] - p;

		if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
			z = w;
			r = ra;
			s = sa;
		} else {
			l = i;
			if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
				final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
				matrixT[i][idx - 1] = c.getReal();
				matrixT[i][idx] = c.getImaginary();
			} else {

				double x = matrixT[i][i + 1];
				double y = matrixT[i + 1][i];
				double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
				(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
				final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
				if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
					vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
					((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
					org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
				}
				final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
				((x * s) - (z * sa)) - (q * ra), vr, vi);
				matrixT[i][idx - 1] = c.getReal();
				matrixT[i][idx] = c.getImaginary();

				if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
					matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
					(q * matrixT[i][idx])) / x;
					matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
					(q * matrixT[i][idx - 1])) / x;
				} else {
					final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
					(-s) - (y * matrixT[i][idx]), z, q);
					matrixT[i + 1][idx - 1] = c2.getReal();
					matrixT[i + 1][idx] = c2.getImaginary();
				}
			}


			double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
			org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]));
			if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
				for (int j = i; j <= idx; j++) {
					matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
					matrixT[j][idx] = matrixT[j][idx] / t;
				}
			}
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:34.791 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:34.792 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:34.793 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][j] = matrixT[i][j],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int idx = n - 1; idx >= 0; idx--) {
	double p = realEigenvalues[idx];
	double q = imagEigenvalues[idx];

	if (org.apache.commons.math3.util.Precision.equals(q, 0.0)) {

		int l = idx;
		matrixT[idx][idx] = 1.0;
		for (int i = idx - 1; i >= 0; i--) {
			double w = matrixT[i][i] - p;
			r = 0.0;
			for (int j = l; j <= idx; j++) {
				r = r + (matrixT[i][j] * matrixT[j][idx]);
			}
			if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
				z = w;
				s = r;
			} else {
				l = i;
				if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
					if (w != 0.0) {
						matrixT[i][idx] = (-r) / w;
					} else {
						matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
					}
				} else {

					double x = matrixT[i][i + 1];
					double y = matrixT[i + 1][i];
					q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
					(imagEigenvalues[i] * imagEigenvalues[i]);
					double t = ((x * s) - (z * r)) / q;
					matrixT[i][idx] = t;
					if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
						matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
					} else {
						matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
					}
				}


				double t = org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]);
				if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
					for (int j = i; j <= idx; j++) {
						matrixT[j][idx] = matrixT[j][idx] / t;
					}
				}
			}
		}
	} else if (q < 0.0) {

		int l = idx - 1;


		if (org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) > org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx])) {
			matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];
			matrixT[idx - 1][idx] = (-(matrixT[idx][idx] - p)) / matrixT[idx][idx - 1];
		} else {
			final org.apache.commons.math3.complex.Complex result = cdiv(0.0, -matrixT[idx - 1][idx], 
			matrixT[idx - 1][idx - 1] - p, q);
			matrixT[idx - 1][idx - 1] = result.getReal();
			matrixT[idx - 1][idx] = result.getImaginary();
		}

		matrixT[idx][idx - 1] = 0.0;
		matrixT[idx][idx] = 1.0;

		for (int i = idx - 2; i >= 0; i--) {
			double ra = 0.0;
			double sa = 0.0;
			for (int j = l; j <= idx; j++) {
				ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]);
				sa = sa + (matrixT[i][j] * matrixT[j][idx]);
			}
			double w = matrixT[i][i] - p;

			if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
				z = w;
				r = ra;
				s = sa;
			} else {
				l = i;
				if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
					final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
					matrixT[i][idx - 1] = c.getReal();
					matrixT[i][idx] = c.getImaginary();
				} else {

					double x = matrixT[i][i + 1];
					double y = matrixT[i + 1][i];
					double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
					(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
					final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
					if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
						vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
						((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
						org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
					}
					final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
					((x * s) - (z * sa)) - (q * ra), vr, vi);
					matrixT[i][idx - 1] = c.getReal();
					matrixT[i][idx] = c.getImaginary();

					if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
						matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
						(q * matrixT[i][idx])) / x;
						matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
						(q * matrixT[i][idx - 1])) / x;
					} else {
						final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
						(-s) - (y * matrixT[i][idx]), z, q);
						matrixT[i + 1][idx - 1] = c2.getReal();
						matrixT[i + 1][idx] = c2.getImaginary();
					}
				}


				double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
				org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]));
				if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
					for (int j = i; j <= idx; j++) {
						matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
						matrixT[j][idx] = matrixT[j][idx] / t;
					}
				}
			}
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:36.919 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:36.919 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:36.920 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = i; j < n; j++) {
	matrixP[i][j] = matrixT[i][j];
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][j] = matrixT[i][j],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:39.132 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:39.132 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:39.133 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((i < 0) | (i > (n - 1))) {
	for (int j = i; j < n; j++) {
		matrixP[i][j] = matrixT[i][j];
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = i; j < n; j++) {
	matrixP[i][j] = matrixT[i][j];
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:41.362 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:41.362 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:41.363 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; i++) {
	if ((i < 0) | (i > (n - 1))) {
		for (int j = i; j < n; j++) {
			matrixP[i][j] = matrixT[i][j];
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((i < 0) | (i > (n - 1))) {
	for (int j = i; j < n; j++) {
		matrixP[i][j] = matrixT[i][j];
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:43.471 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:43.472 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:43.473 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; i++) {
	if ((i < 0) | (i > (n - 1))) {
		for (int j = i; j < n; j++) {
			matrixP[i][j] = matrixT[i][j];
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:45.899 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:45.899 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:45.900 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = z + (matrixP[i][k] * matrixT[k][j]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:48.460 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:48.461 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:48.462 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int k = 0; k <= org.apache.commons.math3.util.FastMath.min(j, n - 1); k++) {
	z = z + (matrixP[i][k] * matrixT[k][j]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = z + (matrixP[i][k] * matrixT[k][j]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:50.760 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:50.760 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:50.761 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][j] = z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = 0; k <= org.apache.commons.math3.util.FastMath.min(j, n - 1); k++) {
	z = z + (matrixP[i][k] * matrixT[k][j]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:53.299 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:53.300 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:53.301 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= (n - 1); i++) {
	z = 0.0;
	for (int k = 0; k <= org.apache.commons.math3.util.FastMath.min(j, n - 1); k++) {
		z = z + (matrixP[i][k] * matrixT[k][j]);
	}
	matrixP[i][j] = z;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][j] = z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:55.785 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:55.786 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:55.786 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = n - 1; j >= 0; j--) {
	for (int i = 0; i <= (n - 1); i++) {
		z = 0.0;
		for (int k = 0; k <= org.apache.commons.math3.util.FastMath.min(j, n - 1); k++) {
			z = z + (matrixP[i][k] * matrixT[k][j]);
		}
		matrixP[i][j] = z;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= (n - 1); i++) {
	z = 0.0;
	for (int k = 0; k <= org.apache.commons.math3.util.FastMath.min(j, n - 1); k++) {
		z = z + (matrixP[i][k] * matrixT[k][j]);
	}
	matrixP[i][j] = z;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:43:58.196 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:58.197 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:58.198 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: tmp[j] = matrixP[j][i],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = n - 1; j >= 0; j--) {
	for (int i = 0; i <= (n - 1); i++) {
		z = 0.0;
		for (int k = 0; k <= org.apache.commons.math3.util.FastMath.min(j, n - 1); k++) {
			z = z + (matrixP[i][k] * matrixT[k][j]);
		}
		matrixP[i][j] = z;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:44:00.636 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:00.636 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:00.637 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = 0; j < n; j++) {
	tmp[j] = matrixP[j][i];
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: tmp[j] = matrixP[j][i],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

08:44:02.593 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:02.594 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:02.595 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; i++) {
	for (int j = 0; j < n; j++) {
		tmp[j] = matrixP[j][i];
	}
	eigenvectors[i] = new org.apache.commons.math3.linear.ArrayRealVector(tmp);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = 0; j < n; j++) {
	tmp[j] = matrixP[j][i];
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Use getter instead of direct array reference
, ingredientB: Use the proper method to get the array length

08:44:04.805 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:04.805 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:04.806 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m),commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Use getter instead of direct array reference
, ingredientB: Use getter instead of direct array reference

08:44:07.237 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:07.237 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:07.238 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (length != m) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m);
},commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m),commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:09.619 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:09.619 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:09.620 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedPt = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ort = new double[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:12.135 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:12.135 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:12.136 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedH = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedPt = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:14.606 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:14.606 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:14.607 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: transform(),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedH = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:17.083 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:17.083 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:17.084 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = householderVectors.length,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: transform(),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:19.397 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:19.397 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:19.398 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int high = n - 1,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = householderVectors.length,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:21.413 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:21.413 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:21.414 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] pa = new double[n][n],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int high = n - 1,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:23.745 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:23.746 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:23.747 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: pa[i][j] = (i == j) ? 1 : 0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] pa = new double[n][n],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:26.000 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:26.000 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:26.001 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = 0; j < n; j++) {
	pa[i][j] = (i == j) ? 1 : 0;
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: pa[i][j] = (i == j) ? 1 : 0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:28.247 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:28.248 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:28.249 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; i++) {
	for (int j = 0; j < n; j++) {
		pa[i][j] = (i == j) ? 1 : 0;
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = 0; j < n; j++) {
	pa[i][j] = (i == j) ? 1 : 0;
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:30.660 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:30.661 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:30.662 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort[i] = householderVectors[i][m - 1],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; i++) {
	for (int j = 0; j < n; j++) {
		pa[i][j] = (i == j) ? 1 : 0;
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:32.870 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:32.871 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:32.872 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m + 1; i <= high; i++) {
	ort[i] = householderVectors[i][m - 1];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ort[i] = householderVectors[i][m - 1],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:35.040 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:35.040 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:35.041 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double g = 0.0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = m + 1; i <= high; i++) {
	ort[i] = householderVectors[i][m - 1];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:37.223 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:37.223 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:37.224 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: g += ort[i] * pa[i][j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double g = 0.0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:39.385 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:39.385 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:39.386 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m; i <= high; i++) {
	g += ort[i] * pa[i][j];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: g += ort[i] * pa[i][j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:41.486 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:41.486 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:41.487 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: g = (g / ort[m]) / householderVectors[m][m - 1],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = m; i <= high; i++) {
	g += ort[i] * pa[i][j];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:43.377 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:43.378 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:43.379 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: pa[i][j] += g * ort[i],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: g = (g / ort[m]) / householderVectors[m][m - 1],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:45.307 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:45.307 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:45.308 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m; i <= high; i++) {
	pa[i][j] += g * ort[i];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: pa[i][j] += g * ort[i],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:47.507 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:47.507 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:47.508 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = m; j <= high; j++) {
	double g = 0.0;

	for (int i = m; i <= high; i++) {
		g += ort[i] * pa[i][j];
	}


	g = (g / ort[m]) / householderVectors[m][m - 1];

	for (int i = m; i <= high; i++) {
		pa[i][j] += g * ort[i];
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = m; i <= high; i++) {
	pa[i][j] += g * ort[i];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:49.518 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:49.519 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:49.519 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (householderVectors[m][m - 1] != 0.0) {
	for (int i = m + 1; i <= high; i++) {
		ort[i] = householderVectors[i][m - 1];
	}

	for (int j = m; j <= high; j++) {
		double g = 0.0;

		for (int i = m; i <= high; i++) {
			g += ort[i] * pa[i][j];
		}


		g = (g / ort[m]) / householderVectors[m][m - 1];

		for (int i = m; i <= high; i++) {
			pa[i][j] += g * ort[i];
		}
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = m; j <= high; j++) {
	double g = 0.0;

	for (int i = m; i <= high; i++) {
		g += ort[i] * pa[i][j];
	}


	g = (g / ort[m]) / householderVectors[m][m - 1];

	for (int i = m; i <= high; i++) {
		pa[i][j] += g * ort[i];
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:51.422 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:51.422 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:51.423 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int m = high - 1; m >= 1; m--) {
	if (householderVectors[m][m - 1] != 0.0) {
		for (int i = m + 1; i <= high; i++) {
			ort[i] = householderVectors[i][m - 1];
		}

		for (int j = m; j <= high; j++) {
			double g = 0.0;

			for (int i = m; i <= high; i++) {
				g += ort[i] * pa[i][j];
			}


			g = (g / ort[m]) / householderVectors[m][m - 1];

			for (int i = m; i <= high; i++) {
				pa[i][j] += g * ort[i];
			}
		}
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (householderVectors[m][m - 1] != 0.0) {
	for (int i = m + 1; i <= high; i++) {
		ort[i] = householderVectors[i][m - 1];
	}

	for (int j = m; j <= high; j++) {
		double g = 0.0;

		for (int i = m; i <= high; i++) {
			g += ort[i] * pa[i][j];
		}


		g = (g / ort[m]) / householderVectors[m][m - 1];

		for (int i = m; i <= high; i++) {
			pa[i][j] += g * ort[i];
		}
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:53.358 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:53.358 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:53.359 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedP = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(pa),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int m = high - 1; m >= 1; m--) {
	if (householderVectors[m][m - 1] != 0.0) {
		for (int i = m + 1; i <= high; i++) {
			ort[i] = householderVectors[i][m - 1];
		}

		for (int j = m; j <= high; j++) {
			double g = 0.0;

			for (int i = m; i <= high; i++) {
				g += ort[i] * pa[i][j];
			}


			g = (g / ort[m]) / householderVectors[m][m - 1];

			for (int i = m; i <= high; i++) {
				pa[i][j] += g * ort[i];
			}
		}
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:55.596 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:55.596 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:55.597 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (cachedP == null) {
	final int n = householderVectors.length;
	final int high = n - 1;
	final double[][] pa = new double[n][n];

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			pa[i][j] = (i == j) ? 1 : 0;
		}
	}

	for (int m = high - 1; m >= 1; m--) {
		if (householderVectors[m][m - 1] != 0.0) {
			for (int i = m + 1; i <= high; i++) {
				ort[i] = householderVectors[i][m - 1];
			}

			for (int j = m; j <= high; j++) {
				double g = 0.0;

				for (int i = m; i <= high; i++) {
					g += ort[i] * pa[i][j];
				}


				g = (g / ort[m]) / householderVectors[m][m - 1];

				for (int i = m; i <= high; i++) {
					pa[i][j] += g * ort[i];
				}
			}
		}
	}

	cachedP = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(pa);
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedP = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(pa),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:44:57.793 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:57.793 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:57.794 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedPt = getP().transpose(),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (cachedP == null) {
	final int n = householderVectors.length;
	final int high = n - 1;
	final double[][] pa = new double[n][n];

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			pa[i][j] = (i == j) ? 1 : 0;
		}
	}

	for (int m = high - 1; m >= 1; m--) {
		if (householderVectors[m][m - 1] != 0.0) {
			for (int i = m + 1; i <= high; i++) {
				ort[i] = householderVectors[i][m - 1];
			}

			for (int j = m; j <= high; j++) {
				double g = 0.0;

				for (int i = m; i <= high; i++) {
					g += ort[i] * pa[i][j];
				}


				g = (g / ort[m]) / householderVectors[m][m - 1];

				for (int i = m; i <= high; i++) {
					pa[i][j] += g * ort[i];
				}
			}
		}
	}

	cachedP = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(pa);
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:00.216 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:00.217 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:00.217 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (cachedPt == null) {
	cachedPt = getP().transpose();
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedPt = getP().transpose(),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:02.659 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:02.660 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:02.660 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return cachedPt,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (cachedPt == null) {
	cachedPt = getP().transpose();
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:04.569 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:04.570 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:04.570 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] h = new double[m][m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return cachedPt,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:06.816 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:06.816 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:06.817 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: h[i][i - 1] = householderVectors[i][i - 1],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] h = new double[m][m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:08.881 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:08.882 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:08.883 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (i > 0) {

	h[i][i - 1] = householderVectors[i][i - 1];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: h[i][i - 1] = householderVectors[i][i - 1],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:10.851 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:10.851 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:10.852 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: h[i][j] = householderVectors[i][j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (i > 0) {

	h[i][i - 1] = householderVectors[i][i - 1];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:13.324 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:13.324 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:13.325 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = i; j < m; ++j) {
	h[i][j] = householderVectors[i][j];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: h[i][j] = householderVectors[i][j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:15.640 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:15.641 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:15.642 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < m; ++i) {
	if (i > 0) {

		h[i][i - 1] = householderVectors[i][i - 1];
	}


	for (int j = i; j < m; ++j) {
		h[i][j] = householderVectors[i][j];
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = i; j < m; ++j) {
	h[i][j] = householderVectors[i][j];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:17.670 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:17.670 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:17.671 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedH = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(h),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < m; ++i) {
	if (i > 0) {

		h[i][i - 1] = householderVectors[i][i - 1];
	}


	for (int j = i; j < m; ++j) {
		h[i][j] = householderVectors[i][j];
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:19.913 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:19.914 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:19.915 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (cachedH == null) {
	final int m = householderVectors.length;
	final double[][] h = new double[m][m];
	for (int i = 0; i < m; ++i) {
		if (i > 0) {

			h[i][i - 1] = householderVectors[i][i - 1];
		}


		for (int j = i; j < m; ++j) {
			h[i][j] = householderVectors[i][j];
		}
	}
	cachedH = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(h);
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedH = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(h),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:22.031 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:22.031 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:22.032 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return cachedH,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (cachedH == null) {
	final int m = householderVectors.length;
	final double[][] h = new double[m][m];
	for (int i = 0; i < m; ++i) {
		if (i > 0) {

			h[i][i - 1] = householderVectors[i][i - 1];
		}


		for (int j = i; j < m; ++j) {
			h[i][j] = householderVectors[i][j];
		}
	}
	cachedH = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(h);
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:24.308 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:24.309 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:24.310 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double scale = 0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return cachedH,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:26.478 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:26.478 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:26.480 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double scale = 0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:28.894 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:28.894 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:28.895 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m; i <= high; i++) {
	scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]);
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:31.044 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:31.044 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:31.045 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double h = 0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = m; i <= high; i++) {
	scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]);
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:33.142 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:33.142 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:33.143 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort[i] = householderVectors[i][m - 1] / scale,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double h = 0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:35.316 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:35.316 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:35.317 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: h += ort[i] * ort[i],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ort[i] = householderVectors[i][m - 1] / scale,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:37.576 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:37.576 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:37.577 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = high; i >= m; i--) {
	ort[i] = householderVectors[i][m - 1] / scale;
	h += ort[i] * ort[i];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: h += ort[i] * ort[i],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:39.996 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:39.996 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:39.997 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = high; i >= m; i--) {
	ort[i] = householderVectors[i][m - 1] / scale;
	h += ort[i] * ort[i];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:42.533 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:42.533 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:42.534 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: h = h - (ort[m] * g),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:44.723 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:44.723 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:44.724 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort[m] = ort[m] - g,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: h = h - (ort[m] * g),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:47.098 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:47.099 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:47.100 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double f = 0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ort[m] = ort[m] - g,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:49.498 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:49.499 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:49.500 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: f += ort[i] * householderVectors[i][j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double f = 0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:51.846 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:51.847 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:51.848 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = high; i >= m; i--) {
	f += ort[i] * householderVectors[i][j];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: f += ort[i] * householderVectors[i][j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:53.813 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:53.814 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:53.815 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: f = f / h,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = high; i >= m; i--) {
	f += ort[i] * householderVectors[i][j];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:56.257 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:56.257 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:56.258 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: householderVectors[i][j] -= f * ort[i],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: f = f / h,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:45:58.272 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:58.273 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:58.274 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m; i <= high; i++) {
	householderVectors[i][j] -= f * ort[i];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: householderVectors[i][j] -= f * ort[i],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:46:00.195 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:00.195 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:00.195 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = m; j < n; j++) {
	double f = 0;
	for (int i = high; i >= m; i--) {
		f += ort[i] * householderVectors[i][j];
	}
	f = f / h;
	for (int i = m; i <= high; i++) {
		householderVectors[i][j] -= f * ort[i];
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = m; i <= high; i++) {
	householderVectors[i][j] -= f * ort[i];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:46:02.217 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:02.218 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:02.219 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: f += ort[j] * householderVectors[i][j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = m; j < n; j++) {
	double f = 0;
	for (int i = high; i >= m; i--) {
		f += ort[i] * householderVectors[i][j];
	}
	f = f / h;
	for (int i = m; i <= high; i++) {
		householderVectors[i][j] -= f * ort[i];
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:46:04.535 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:04.536 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:04.536 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = high; j >= m; j--) {
	f += ort[j] * householderVectors[i][j];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: f += ort[j] * householderVectors[i][j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:46:06.428 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:06.428 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:06.429 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: householderVectors[i][j] -= f * ort[j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = high; j >= m; j--) {
	f += ort[j] * householderVectors[i][j];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:46:08.312 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:08.312 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:08.314 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = m; j <= high; j++) {
	householderVectors[i][j] -= f * ort[j];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: householderVectors[i][j] -= f * ort[j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:46:10.229 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:10.229 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:10.230 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= high; i++) {
	double f = 0;
	for (int j = high; j >= m; j--) {
		f += ort[j] * householderVectors[i][j];
	}
	f = f / h;
	for (int j = m; j <= high; j++) {
		householderVectors[i][j] -= f * ort[j];
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = m; j <= high; j++) {
	householderVectors[i][j] -= f * ort[j];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:46:12.316 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:12.316 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:12.317 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort[m] = scale * ort[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= high; i++) {
	double f = 0;
	for (int j = high; j >= m; j--) {
		f += ort[j] * householderVectors[i][j];
	}
	f = f / h;
	for (int j = m; j <= high; j++) {
		householderVectors[i][j] -= f * ort[j];
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:46:14.279 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:14.279 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:14.280 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: householderVectors[m][m - 1] = scale * g,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ort[m] = scale * ort[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:46:16.716 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:16.716 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:16.717 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

	double h = 0;
	for (int i = high; i >= m; i--) {
		ort[i] = householderVectors[i][m - 1] / scale;
		h += ort[i] * ort[i];
	}
	final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

	h = h - (ort[m] * g);
	ort[m] = ort[m] - g;




	for (int j = m; j < n; j++) {
		double f = 0;
		for (int i = high; i >= m; i--) {
			f += ort[i] * householderVectors[i][j];
		}
		f = f / h;
		for (int i = m; i <= high; i++) {
			householderVectors[i][j] -= f * ort[i];
		}
	}

	for (int i = 0; i <= high; i++) {
		double f = 0;
		for (int j = high; j >= m; j--) {
			f += ort[j] * householderVectors[i][j];
		}
		f = f / h;
		for (int j = m; j <= high; j++) {
			householderVectors[i][j] -= f * ort[j];
		}
	}

	ort[m] = scale * ort[m];
	householderVectors[m][m - 1] = scale * g;
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: householderVectors[m][m - 1] = scale * g,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

08:46:18.957 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:18.957 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:18.960 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int m = 1; m <= (high - 1); m++) {

	double scale = 0;
	for (int i = m; i <= high; i++) {
		scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]);
	}

	if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

		double h = 0;
		for (int i = high; i >= m; i--) {
			ort[i] = householderVectors[i][m - 1] / scale;
			h += ort[i] * ort[i];
		}
		final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

		h = h - (ort[m] * g);
		ort[m] = ort[m] - g;




		for (int j = m; j < n; j++) {
			double f = 0;
			for (int i = high; i >= m; i--) {
				f += ort[i] * householderVectors[i][j];
			}
			f = f / h;
			for (int i = m; i <= high; i++) {
				householderVectors[i][j] -= f * ort[i];
			}
		}

		for (int i = 0; i <= high; i++) {
			double f = 0;
			for (int j = high; j >= m; j--) {
				f += ort[j] * householderVectors[i][j];
			}
			f = f / h;
			for (int j = m; j <= high; j++) {
				householderVectors[i][j] -= f * ort[j];
			}
		}

		ort[m] = scale * ort[m];
		householderVectors[m][m - 1] = scale * g;
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

	double h = 0;
	for (int i = high; i >= m; i--) {
		ort[i] = householderVectors[i][m - 1] / scale;
		h += ort[i] * ort[i];
	}
	final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

	h = h - (ort[m] * g);
	ort[m] = ort[m] - g;




	for (int j = m; j < n; j++) {
		double f = 0;
		for (int i = high; i >= m; i--) {
			f += ort[i] * householderVectors[i][j];
		}
		f = f / h;
		for (int i = m; i <= high; i++) {
			householderVectors[i][j] -= f * ort[i];
		}
	}

	for (int i = 0; i <= high; i++) {
		double f = 0;
		for (int j = high; j >= m; j--) {
			f += ort[j] * householderVectors[i][j];
		}
		f = f / h;
		for (int j = m; j <= high; j++) {
			householderVectors[i][j] -= f * ort[j];
		}
	}

	ort[m] = scale * ort[m];
	householderVectors[m][m - 1] = scale * g;
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.

08:46:21.111 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:21.111 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:21.112 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return x.ebeDivide(sqrtDiag),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.RealVector sqrtDiag = diag.map(new org.apache.commons.math3.analysis.function.Sqrt()),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.

08:46:23.292 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:23.293 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:23.294 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return sqrtDiag.getDimension(),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return x.ebeDivide(sqrtDiag),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.

08:46:25.464 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:25.464 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:25.465 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return sqrtDiag.getDimension(),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

08:46:27.765 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:27.766 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:27.767 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m.getColumnDimension() != m.getRowDimension()) {
	throw new org.apache.commons.math3.linear.NonSquareOperatorException(m.getColumnDimension(), 
	m.getRowDimension());
},commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.linear.NonSquareOperatorException(m.getColumnDimension(), 
m.getRowDimension()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

08:46:30.020 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:30.020 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:30.021 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
a.getRowDimension()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m.getColumnDimension() != m.getRowDimension()) {
	throw new org.apache.commons.math3.linear.NonSquareOperatorException(m.getColumnDimension(), 
	m.getRowDimension());
},commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

08:46:32.506 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:32.507 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:32.507 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m.getRowDimension() != a.getRowDimension()) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
	a.getRowDimension());
},commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
a.getRowDimension()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

08:46:34.608 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:34.608 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:34.609 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	if (m.getColumnDimension() != m.getRowDimension()) {
		throw new org.apache.commons.math3.linear.NonSquareOperatorException(m.getColumnDimension(), 
		m.getRowDimension());
	}
	if (m.getRowDimension() != a.getRowDimension()) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
		a.getRowDimension());
	}
},commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m.getRowDimension() != a.getRowDimension()) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
	a.getRowDimension());
},commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

08:46:36.593 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:36.593 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:36.594 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m != null) {
	if (m.getColumnDimension() != m.getRowDimension()) {
		throw new org.apache.commons.math3.linear.NonSquareOperatorException(m.getColumnDimension(), 
		m.getRowDimension());
	}
	if (m.getRowDimension() != a.getRowDimension()) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
		a.getRowDimension());
	}
},commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

08:46:38.495 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:38.495 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:38.496 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (thisIt.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry thisE = thisIt.next();
	java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> otherIt = v.sparseIterator();
	while (otherIt.hasNext()) {
		final org.apache.commons.math3.linear.RealVector.Entry otherE = otherIt.next();
		product.setEntry(thisE.getIndex(), otherE.getIndex(), 
		thisE.getValue() * otherE.getValue());
	} 
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (otherIt.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry otherE = otherIt.next();
	product.setEntry(thisE.getIndex(), otherE.getIndex(), 
	thisE.getValue() * otherE.getValue());
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:46:40.485 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:40.485 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:40.487 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT = transformer.getH().getData(),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.HessenbergTransformer transformer = new org.apache.commons.math3.linear.HessenbergTransformer(matrix),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:46:42.962 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:42.962 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:42.963 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP = transformer.getP().getData(),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT = transformer.getH().getData(),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:46:45.345 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:45.346 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:45.347 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedT = null,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP = transformer.getP().getData(),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:46:47.779 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:47.779 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:47.780 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedP = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(matrixP),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedT = null,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:46:50.193 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:50.194 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:50.195 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (cachedP == null) {
	cachedP = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(matrixP);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedP = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(matrixP),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:46:52.270 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:52.270 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:52.271 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedT = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(matrixT),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (cachedP == null) {
	cachedP = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(matrixP);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:46:54.708 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:54.709 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:54.710 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (cachedT == null) {
	cachedT = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(matrixT);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedT = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(matrixT),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:46:57.096 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:57.096 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:57.097 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return cachedT,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (cachedT == null) {
	cachedT = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(matrixT);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:46:59.283 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:59.283 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:59.284 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.SchurTransformer.ShiftInfo shift = new org.apache.commons.math3.linear.SchurTransformer.ShiftInfo(),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return cachedT,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:47:01.614 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:01.614 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:01.615 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int iteration = 0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SchurTransformer.ShiftInfo shift = new org.apache.commons.math3.linear.SchurTransformer.ShiftInfo(),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:47:04.063 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:04.063 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:04.064 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int idx = n - 1,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int iteration = 0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:47:06.507 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:06.507 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:06.508 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int l = findSmallSubDiagonalElement(idx, norm),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int idx = n - 1,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:47:08.847 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:08.847 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:08.848 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int l = findSmallSubDiagonalElement(idx, norm),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:47:10.980 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:10.980 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:10.981 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: idx--,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:47:13.254 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:13.255 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:13.256 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: iteration = 0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: idx--,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:47:15.383 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:15.383 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:15.384 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: iteration = 0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

08:47:17.553 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:17.554 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:17.555 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:47:19.669 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:19.669 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:19.670 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double q = (p * p) + shift.w,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:47:21.836 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:21.836 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:21.840 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double q = (p * p) + shift.w,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:47:23.780 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:23.780 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:23.781 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:47:25.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:25.739 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:25.740 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:47:27.985 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:27.985 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:27.986 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:47:30.425 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:30.425 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:30.426 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:47:32.556 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:32.556 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:32.557 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = p + z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = matrixT[idx][idx],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:47:34.880 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:34.881 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:34.883 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = p + z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:47:36.931 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:36.932 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:36.933 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = p - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = matrixT[idx][idx],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:47:39.237 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:39.237 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:39.238 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = p - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:47:41.219 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:41.219 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:41.220 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = p - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = p + z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:47:43.109 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:43.110 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:43.111 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (p >= 0) {
	z = p + z;
} else {
	z = p - z;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = p + z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:47:45.005 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:45.005 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:45.006 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (p >= 0) {
	z = p + z;
} else {
	z = p - z;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:47:47.339 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:47.339 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:47.340 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (p >= 0) {
	z = p + z;
} else {
	z = p - z;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = p - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:47:49.437 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:49.438 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:49.439 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = p + z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:47:51.559 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:51.560 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:51.561 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (p >= 0) {
	z = p + z;
} else {
	z = p - z;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

08:47:53.854 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:53.855 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:53.856 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:47:56.263 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:56.263 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:56.264 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = p - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:47:58.258 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:58.258 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:58.259 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:48:00.505 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:00.506 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:00.507 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (p >= 0) {
	z = p + z;
} else {
	z = p - z;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:48:02.448 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:02.448 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:02.449 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = shift.x / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = p - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:48:04.572 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:04.572 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:04.573 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = shift.x / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:48:06.692 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:06.692 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:06.693 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = shift.x / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:48:08.666 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:08.666 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:08.667 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = z / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (p >= 0) {
	z = p + z;
} else {
	z = p - z;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:48:10.880 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:10.880 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:10.881 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = z / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:48:13.097 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:13.098 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:13.099 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = z / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = shift.x / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:48:15.347 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:15.347 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:15.348 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (p >= 0) {
	z = p + z;
} else {
	z = p - z;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:48:17.692 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:17.693 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:17.693 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = z / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:48:19.830 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:19.830 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:19.831 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:48:21.720 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:21.720 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:21.722 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:48:23.734 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:23.735 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:23.735 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = p / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:48:25.725 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:25.725 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:25.726 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = p / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:48:28.037 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:28.037 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:28.038 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = p / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:48:30.377 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:30.377 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:30.378 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = p / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:48:32.382 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:32.382 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:32.383 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = q / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:48:34.280 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:34.280 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:34.281 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = q / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = p / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:48:36.688 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:36.688 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:36.689 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = q / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:48:38.627 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:38.628 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:38.628 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = q / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:48:40.547 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:40.548 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:40.549 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = shift.x / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:48:42.506 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:42.507 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:42.507 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = q / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

08:48:44.751 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:44.752 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:44.752 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:48:46.717 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:46.717 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:46.718 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = shift.x / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:48:48.619 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:48.619 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:48.620 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = q / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

08:48:50.574 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:50.575 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:50.576 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

08:48:52.500 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:52.500 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:52.500 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:48:54.446 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:54.446 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:54.447 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = z / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:48:56.458 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:56.458 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:56.459 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:48:58.540 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:58.540 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:58.541 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = p / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:49:00.546 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:00.546 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:00.547 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = q / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:49:02.438 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:02.438 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:02.439 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = idx - 1; j < n; j++) {
	z = matrixT[idx - 1][j];
	matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
	matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
},commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = z / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

08:49:04.327 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:04.327 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:04.328 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = idx - 1; j < n; j++) {
	z = matrixT[idx - 1][j];
	matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
	matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
},commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

08:49:06.250 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:06.250 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:06.251 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = idx - 1; j < n; j++) {
	z = matrixT[idx - 1][j];
	matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
	matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
},commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

08:49:08.128 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:08.128 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:08.129 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = idx - 1; j < n; j++) {
	z = matrixT[idx - 1][j];
	matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
	matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
},commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:49:10.005 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:10.005 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:10.006 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

08:49:11.930 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:11.931 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:11.932 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

08:49:13.903 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:13.903 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:13.904 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

08:49:15.863 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:15.863 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:15.864 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = idx - 1; j < n; j++) {
	z = matrixT[idx - 1][j];
	matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
	matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
},commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:49:17.840 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:17.841 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:17.841 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

08:49:19.881 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:19.881 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:19.882 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

08:49:21.836 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:21.836 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:21.837 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = idx - 1; j < n; j++) {
	z = matrixT[idx - 1][j];
	matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
	matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
},commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

08:49:23.919 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:23.919 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:23.920 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:49:25.877 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:25.877 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:25.878 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = p / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:49:28.281 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:28.281 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:28.282 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:49:30.580 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:30.580 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:30.581 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:49:32.759 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:32.759 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:32.760 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:49:35.297 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:35.297 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:35.298 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= idx; i++) {
	z = matrixT[i][idx - 1];
	matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
	matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = p / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:49:37.428 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:37.428 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:37.429 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= idx; i++) {
	z = matrixT[i][idx - 1];
	matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
	matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:49:39.712 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:39.712 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:39.713 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= idx; i++) {
	z = matrixT[i][idx - 1];
	matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
	matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:49:42.034 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:42.034 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:42.035 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= idx; i++) {
	z = matrixT[i][idx - 1];
	matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
	matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:49:44.183 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:44.183 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:44.184 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= idx; i++) {
	z = matrixT[i][idx - 1];
	matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
	matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:49:46.723 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:46.723 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:46.724 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = matrixP[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = q / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

08:49:49.027 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:49.027 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:49.028 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = matrixP[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

08:49:51.228 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:51.229 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:51.230 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = matrixP[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

08:49:53.485 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:53.485 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:53.486 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = matrixP[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:49:55.735 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:55.735 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:55.736 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = q / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

08:49:57.730 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:57.731 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:57.732 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

08:49:59.851 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:59.851 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:59.853 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

08:50:02.220 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:02.221 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:02.222 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixP[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:50:04.506 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:04.506 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:04.507 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:50:06.711 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:06.711 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:06.712 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:50:08.807 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:08.808 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:08.808 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:50:10.723 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:10.723 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:10.724 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= idx; i++) {
	z = matrixT[i][idx - 1];
	matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
	matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:50:12.978 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:12.978 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:12.979 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= (n - 1); i++) {
	z = matrixP[i][idx - 1];
	matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
	matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:50:15.034 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:15.034 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:15.035 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= (n - 1); i++) {
	z = matrixP[i][idx - 1];
	matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
	matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:50:16.994 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:16.995 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:16.996 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= (n - 1); i++) {
	z = matrixP[i][idx - 1];
	matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
	matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:50:19.392 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:19.394 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:19.395 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= (n - 1); i++) {
	z = matrixP[i][idx - 1];
	matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
	matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= idx; i++) {
	z = matrixT[i][idx - 1];
	matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
	matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:50:21.746 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:21.746 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:21.747 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= (n - 1); i++) {
	z = matrixP[i][idx - 1];
	matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
	matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:50:23.723 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:23.724 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:23.725 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (q >= 0) {
	if (p >= 0) {
		z = p + z;
	} else {
		z = p - z;
	}
	shift.x = matrixT[idx][idx - 1];
	double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
	p = shift.x / s;
	q = z / s;
	double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
	p = p / r;
	q = q / r;


	for (int j = idx - 1; j < n; j++) {
		z = matrixT[idx - 1][j];
		matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
		matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
	}


	for (int i = 0; i <= idx; i++) {
		z = matrixT[i][idx - 1];
		matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
		matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
	}


	for (int i = 0; i <= (n - 1); i++) {
		z = matrixP[i][idx - 1];
		matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
		matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:50:26.135 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:26.135 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:26.136 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (q >= 0) {
	if (p >= 0) {
		z = p + z;
	} else {
		z = p - z;
	}
	shift.x = matrixT[idx][idx - 1];
	double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
	p = shift.x / s;
	q = z / s;
	double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
	p = p / r;
	q = q / r;


	for (int j = idx - 1; j < n; j++) {
		z = matrixT[idx - 1][j];
		matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
		matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
	}


	for (int i = 0; i <= idx; i++) {
		z = matrixT[i][idx - 1];
		matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
		matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
	}


	for (int i = 0; i <= (n - 1); i++) {
		z = matrixP[i][idx - 1];
		matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
		matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:50:28.541 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:28.541 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:28.542 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (q >= 0) {
	if (p >= 0) {
		z = p + z;
	} else {
		z = p - z;
	}
	shift.x = matrixT[idx][idx - 1];
	double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
	p = shift.x / s;
	q = z / s;
	double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
	p = p / r;
	q = q / r;


	for (int j = idx - 1; j < n; j++) {
		z = matrixT[idx - 1][j];
		matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
		matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
	}


	for (int i = 0; i <= idx; i++) {
		z = matrixT[i][idx - 1];
		matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
		matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
	}


	for (int i = 0; i <= (n - 1); i++) {
		z = matrixP[i][idx - 1];
		matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
		matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:50:30.505 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:30.506 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:30.506 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (q >= 0) {
	if (p >= 0) {
		z = p + z;
	} else {
		z = p - z;
	}
	shift.x = matrixT[idx][idx - 1];
	double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
	p = shift.x / s;
	q = z / s;
	double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
	p = p / r;
	q = q / r;


	for (int j = idx - 1; j < n; j++) {
		z = matrixT[idx - 1][j];
		matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
		matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
	}


	for (int i = 0; i <= idx; i++) {
		z = matrixT[i][idx - 1];
		matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
		matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
	}


	for (int i = 0; i <= (n - 1); i++) {
		z = matrixP[i][idx - 1];
		matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
		matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:50:32.865 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:32.865 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:32.866 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (q >= 0) {
	if (p >= 0) {
		z = p + z;
	} else {
		z = p - z;
	}
	shift.x = matrixT[idx][idx - 1];
	double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
	p = shift.x / s;
	q = z / s;
	double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
	p = p / r;
	q = q / r;


	for (int j = idx - 1; j < n; j++) {
		z = matrixT[idx - 1][j];
		matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
		matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
	}


	for (int i = 0; i <= idx; i++) {
		z = matrixT[i][idx - 1];
		matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
		matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
	}


	for (int i = 0; i <= (n - 1); i++) {
		z = matrixP[i][idx - 1];
		matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
		matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= (n - 1); i++) {
	z = matrixP[i][idx - 1];
	matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
	matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:50:34.832 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:34.832 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:34.833 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: idx -= 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:50:37.189 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:37.189 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:37.190 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: idx -= 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:50:39.678 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:39.678 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:39.679 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: idx -= 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (q >= 0) {
	if (p >= 0) {
		z = p + z;
	} else {
		z = p - z;
	}
	shift.x = matrixT[idx][idx - 1];
	double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
	p = shift.x / s;
	q = z / s;
	double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
	p = p / r;
	q = q / r;


	for (int j = idx - 1; j < n; j++) {
		z = matrixT[idx - 1][j];
		matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
		matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
	}


	for (int i = 0; i <= idx; i++) {
		z = matrixT[i][idx - 1];
		matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
		matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
	}


	for (int i = 0; i <= (n - 1); i++) {
		z = matrixP[i][idx - 1];
		matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
		matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:50:41.779 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:41.779 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:41.780 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: idx -= 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:50:44.099 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:44.099 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:44.100 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: idx -= 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:50:46.354 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:46.354 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:46.355 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: computeShift(l, idx, iteration, shift),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= idx; i++) {
	z = matrixT[i][idx - 1];
	matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
	matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:50:48.563 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:48.563 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:48.564 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: computeShift(l, idx, iteration, shift),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:50:50.766 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:50.766 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:50.767 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: computeShift(l, idx, iteration, shift),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: idx -= 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:50:52.630 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:52.630 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:52.631 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: computeShift(l, idx, iteration, shift),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:50:54.733 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:54.734 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:54.734 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: computeShift(l, idx, iteration, shift),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:50:56.889 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:56.889 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:56.890 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((++iteration) > maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
	maxIterations);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:50:58.785 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:58.785 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:58.786 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int m = idx - 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((++iteration) > maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
	maxIterations);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:51:00.732 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:00.733 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:00.734 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int m = idx - 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:51:03.120 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:03.120 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:03.121 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int m = idx - 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((++iteration) > maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
	maxIterations);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:51:05.398 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:05.398 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:05.399 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] hVec = new double[3],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int m = idx - 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:51:07.474 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:07.474 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:07.475 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] hVec = new double[3],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:51:09.823 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:09.823 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:09.824 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double z = matrixT[m][m],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] hVec = new double[3],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:51:12.041 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:12.041 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:12.042 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double z = matrixT[m][m],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:51:14.458 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:14.459 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:14.459 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[2] = shift.x - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] hVec = new double[3],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:51:16.890 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:16.890 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:16.891 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[2] = shift.x - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:51:19.308 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:19.309 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:19.310 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[2] = shift.x - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double z = matrixT[m][m],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:51:21.400 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:21.400 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:21.401 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = shift.y - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double z = matrixT[m][m],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:51:23.848 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:23.848 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:23.849 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = shift.y - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:51:26.264 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:26.264 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:26.265 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = shift.y - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[2] = shift.x - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:51:28.250 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:28.250 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:28.251 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double z = matrixT[m][m],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:51:30.621 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:30.621 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:30.622 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = shift.y - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:51:33.053 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:33.053 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:33.054 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:51:35.113 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:35.114 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:35.115 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[2] = shift.x - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:51:37.301 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:37.301 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:37.304 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:51:39.674 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:39.674 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:39.675 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:51:41.688 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:41.689 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:41.690 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[2] = matrixT[m + 2][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[2] = shift.x - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:51:43.980 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:43.980 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:43.982 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[2] = matrixT[m + 2][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:51:46.122 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:46.122 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:46.123 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[2] = matrixT[m + 2][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:51:48.488 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:48.488 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:48.489 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = shift.y - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:51:50.682 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:50.683 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:50.684 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[2] = matrixT[m + 2][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:51:52.993 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:52.994 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:52.995 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:51:55.252 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:55.252 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:55.253 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = shift.y - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:51:57.397 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:57.397 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:57.398 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[2] = matrixT[m + 2][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:51:59.682 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:59.682 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:59.683 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:52:01.955 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:01.955 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:01.956 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:52:04.212 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:04.212 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:04.213 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[i] /= s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:52:06.563 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:06.563 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:06.564 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[i] /= s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:52:08.677 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:08.677 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:08.678 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[i] /= s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:52:11.033 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:11.033 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:11.034 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[i] /= s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:52:13.038 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:13.038 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:13.039 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < hVec.length; i++) {
	hVec[i] /= s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:52:15.469 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:15.469 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:15.470 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < hVec.length; i++) {
	hVec[i] /= s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:52:17.847 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:17.847 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:17.848 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < hVec.length; i++) {
	hVec[i] /= s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:52:19.856 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:19.859 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:19.860 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < hVec.length; i++) {
	hVec[i] /= s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[i] /= s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:52:22.253 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:22.253 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:22.254 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2])),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:52:24.654 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:24.654 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:24.655 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2])),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[i] /= s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:52:26.555 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:26.556 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:26.557 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2])),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:52:29.002 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:29.002 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:29.003 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2])),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < hVec.length; i++) {
	hVec[i] /= s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:52:30.957 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:30.957 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:30.958 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1])),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:52:33.268 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:33.268 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:33.269 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1])),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[i] /= s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:52:35.207 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:35.208 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:35.209 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1])),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2])),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:52:37.618 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:37.618 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:37.619 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1])),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:52:39.478 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:39.478 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:39.479 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (lhs < (epsilon * rhs)) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[2] = matrixT[m + 2][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:52:41.566 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:41.567 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:41.568 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (lhs < (epsilon * rhs)) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < hVec.length; i++) {
	hVec[i] /= s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:52:43.966 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:43.966 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:43.967 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (lhs < (epsilon * rhs)) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1])),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:52:46.141 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:46.141 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:46.142 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (lhs < (epsilon * rhs)) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:52:48.296 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:48.296 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:48.297 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: m--,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[2] = matrixT[m + 2][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:52:50.424 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:50.424 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:50.425 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: m--,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2])),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:52:52.305 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:52.305 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:52.306 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: m--,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (lhs < (epsilon * rhs)) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:52:54.578 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:54.578 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:54.579 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: m--,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:52:56.908 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:56.909 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:56.909 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (m >= l) {
	double z = matrixT[m][m];
	hVec[2] = shift.x - z;
	double s = shift.y - z;
	hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
	hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
	hVec[2] = matrixT[m + 2][m + 1];
	s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

	if (m == l) {
		break;
	}

	for (int i = 0; i < hVec.length; i++) {
		hVec[i] /= s;
	}

	final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
	(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

	final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
	((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
	org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

	if (lhs < (epsilon * rhs)) {
		break;
	}
	m--;
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:52:59.042 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:59.042 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:59.043 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (m >= l) {
	double z = matrixT[m][m];
	hVec[2] = shift.x - z;
	double s = shift.y - z;
	hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
	hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
	hVec[2] = matrixT[m + 2][m + 1];
	s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

	if (m == l) {
		break;
	}

	for (int i = 0; i < hVec.length; i++) {
		hVec[i] /= s;
	}

	final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
	(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

	final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
	((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
	org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

	if (lhs < (epsilon * rhs)) {
		break;
	}
	m--;
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1])),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:53:01.400 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:01.400 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:01.401 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (m >= l) {
	double z = matrixT[m][m];
	hVec[2] = shift.x - z;
	double s = shift.y - z;
	hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
	hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
	hVec[2] = matrixT[m + 2][m + 1];
	s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

	if (m == l) {
		break;
	}

	for (int i = 0; i < hVec.length; i++) {
		hVec[i] /= s;
	}

	final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
	(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

	final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
	((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
	org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

	if (lhs < (epsilon * rhs)) {
		break;
	}
	m--;
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: m--,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:53:03.423 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:03.423 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:03.424 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (m >= l) {
	double z = matrixT[m][m];
	hVec[2] = shift.x - z;
	double s = shift.y - z;
	hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
	hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
	hVec[2] = matrixT[m + 2][m + 1];
	s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

	if (m == l) {
		break;
	}

	for (int i = 0; i < hVec.length; i++) {
		hVec[i] /= s;
	}

	final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
	(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

	final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
	((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
	org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

	if (lhs < (epsilon * rhs)) {
		break;
	}
	m--;
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:53:05.779 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:05.779 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:05.780 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: performDoubleQRStep(l, m, idx, shift, hVec),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:53:08.204 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:08.204 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:08.205 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: performDoubleQRStep(l, m, idx, shift, hVec),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1])),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:53:10.257 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:10.257 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:10.258 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: performDoubleQRStep(l, m, idx, shift, hVec),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (m >= l) {
	double z = matrixT[m][m];
	hVec[2] = shift.x - z;
	double s = shift.y - z;
	hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
	hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
	hVec[2] = matrixT[m + 2][m + 1];
	s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

	if (m == l) {
		break;
	}

	for (int i = 0; i < hVec.length; i++) {
		hVec[i] /= s;
	}

	final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
	(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

	final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
	((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
	org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

	if (lhs < (epsilon * rhs)) {
		break;
	}
	m--;
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:53:12.618 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:12.619 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:12.619 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: performDoubleQRStep(l, m, idx, shift, hVec),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:53:15.063 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:15.063 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:15.064 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (l == (idx - 1)) {

	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
	double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
	double q = (p * p) + shift.w;
	double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
	shift.x = matrixT[idx][idx];

	if (q >= 0) {
		if (p >= 0) {
			z = p + z;
		} else {
			z = p - z;
		}
		shift.x = matrixT[idx][idx - 1];
		double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
		p = shift.x / s;
		q = z / s;
		double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
		p = p / r;
		q = q / r;


		for (int j = idx - 1; j < n; j++) {
			z = matrixT[idx - 1][j];
			matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
			matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
		}


		for (int i = 0; i <= idx; i++) {
			z = matrixT[i][idx - 1];
			matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
			matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
		}


		for (int i = 0; i <= (n - 1); i++) {
			z = matrixP[i][idx - 1];
			matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
			matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
		}
	}
	idx -= 2;
	iteration = 0;
} else {


	computeShift(l, idx, iteration, shift);


	if ((++iteration) > maxIterations) {
		throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
		maxIterations);
	}


	int m = idx - 2;


	final double[] hVec = new double[3];

	while (m >= l) {
		double z = matrixT[m][m];
		hVec[2] = shift.x - z;
		double s = shift.y - z;
		hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
		hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
		hVec[2] = matrixT[m + 2][m + 1];
		s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

		if (m == l) {
			break;
		}

		for (int i = 0; i < hVec.length; i++) {
			hVec[i] /= s;
		}

		final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
		(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

		final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
		((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
		org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

		if (lhs < (epsilon * rhs)) {
			break;
		}
		m--;
	} 

	performDoubleQRStep(l, m, idx, shift, hVec);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:53:16.991 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:16.992 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:16.992 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (l == (idx - 1)) {

	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
	double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
	double q = (p * p) + shift.w;
	double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
	shift.x = matrixT[idx][idx];

	if (q >= 0) {
		if (p >= 0) {
			z = p + z;
		} else {
			z = p - z;
		}
		shift.x = matrixT[idx][idx - 1];
		double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
		p = shift.x / s;
		q = z / s;
		double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
		p = p / r;
		q = q / r;


		for (int j = idx - 1; j < n; j++) {
			z = matrixT[idx - 1][j];
			matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
			matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
		}


		for (int i = 0; i <= idx; i++) {
			z = matrixT[i][idx - 1];
			matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
			matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
		}


		for (int i = 0; i <= (n - 1); i++) {
			z = matrixP[i][idx - 1];
			matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
			matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
		}
	}
	idx -= 2;
	iteration = 0;
} else {


	computeShift(l, idx, iteration, shift);


	if ((++iteration) > maxIterations) {
		throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
		maxIterations);
	}


	int m = idx - 2;


	final double[] hVec = new double[3];

	while (m >= l) {
		double z = matrixT[m][m];
		hVec[2] = shift.x - z;
		double s = shift.y - z;
		hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
		hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
		hVec[2] = matrixT[m + 2][m + 1];
		s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

		if (m == l) {
			break;
		}

		for (int i = 0; i < hVec.length; i++) {
			hVec[i] /= s;
		}

		final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
		(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

		final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
		((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
		org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

		if (lhs < (epsilon * rhs)) {
			break;
		}
		m--;
	} 

	performDoubleQRStep(l, m, idx, shift, hVec);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (lhs < (epsilon * rhs)) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:53:19.378 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:19.379 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:19.380 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (l == (idx - 1)) {

	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
	double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
	double q = (p * p) + shift.w;
	double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
	shift.x = matrixT[idx][idx];

	if (q >= 0) {
		if (p >= 0) {
			z = p + z;
		} else {
			z = p - z;
		}
		shift.x = matrixT[idx][idx - 1];
		double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
		p = shift.x / s;
		q = z / s;
		double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
		p = p / r;
		q = q / r;


		for (int j = idx - 1; j < n; j++) {
			z = matrixT[idx - 1][j];
			matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
			matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
		}


		for (int i = 0; i <= idx; i++) {
			z = matrixT[i][idx - 1];
			matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
			matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
		}


		for (int i = 0; i <= (n - 1); i++) {
			z = matrixP[i][idx - 1];
			matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
			matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
		}
	}
	idx -= 2;
	iteration = 0;
} else {


	computeShift(l, idx, iteration, shift);


	if ((++iteration) > maxIterations) {
		throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
		maxIterations);
	}


	int m = idx - 2;


	final double[] hVec = new double[3];

	while (m >= l) {
		double z = matrixT[m][m];
		hVec[2] = shift.x - z;
		double s = shift.y - z;
		hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
		hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
		hVec[2] = matrixT[m + 2][m + 1];
		s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

		if (m == l) {
			break;
		}

		for (int i = 0; i < hVec.length; i++) {
			hVec[i] /= s;
		}

		final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
		(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

		final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
		((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
		org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

		if (lhs < (epsilon * rhs)) {
			break;
		}
		m--;
	} 

	performDoubleQRStep(l, m, idx, shift, hVec);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: performDoubleQRStep(l, m, idx, shift, hVec),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:53:21.785 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:21.785 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:21.786 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (l == (idx - 1)) {

	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
	double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
	double q = (p * p) + shift.w;
	double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
	shift.x = matrixT[idx][idx];

	if (q >= 0) {
		if (p >= 0) {
			z = p + z;
		} else {
			z = p - z;
		}
		shift.x = matrixT[idx][idx - 1];
		double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
		p = shift.x / s;
		q = z / s;
		double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
		p = p / r;
		q = q / r;


		for (int j = idx - 1; j < n; j++) {
			z = matrixT[idx - 1][j];
			matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
			matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
		}


		for (int i = 0; i <= idx; i++) {
			z = matrixT[i][idx - 1];
			matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
			matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
		}


		for (int i = 0; i <= (n - 1); i++) {
			z = matrixP[i][idx - 1];
			matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
			matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
		}
	}
	idx -= 2;
	iteration = 0;
} else {


	computeShift(l, idx, iteration, shift);


	if ((++iteration) > maxIterations) {
		throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
		maxIterations);
	}


	int m = idx - 2;


	final double[] hVec = new double[3];

	while (m >= l) {
		double z = matrixT[m][m];
		hVec[2] = shift.x - z;
		double s = shift.y - z;
		hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
		hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
		hVec[2] = matrixT[m + 2][m + 1];
		s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

		if (m == l) {
			break;
		}

		for (int i = 0; i < hVec.length; i++) {
			hVec[i] /= s;
		}

		final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
		(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

		final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
		((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
		org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

		if (lhs < (epsilon * rhs)) {
			break;
		}
		m--;
	} 

	performDoubleQRStep(l, m, idx, shift, hVec);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:53:23.801 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:23.801 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:23.802 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (l == idx) {

	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	idx--;
	iteration = 0;
} else if (l == (idx - 1)) {

	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
	double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
	double q = (p * p) + shift.w;
	double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
	shift.x = matrixT[idx][idx];

	if (q >= 0) {
		if (p >= 0) {
			z = p + z;
		} else {
			z = p - z;
		}
		shift.x = matrixT[idx][idx - 1];
		double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
		p = shift.x / s;
		q = z / s;
		double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
		p = p / r;
		q = q / r;


		for (int j = idx - 1; j < n; j++) {
			z = matrixT[idx - 1][j];
			matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
			matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
		}


		for (int i = 0; i <= idx; i++) {
			z = matrixT[i][idx - 1];
			matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
			matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
		}


		for (int i = 0; i <= (n - 1); i++) {
			z = matrixP[i][idx - 1];
			matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
			matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
		}
	}
	idx -= 2;
	iteration = 0;
} else {


	computeShift(l, idx, iteration, shift);


	if ((++iteration) > maxIterations) {
		throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
		maxIterations);
	}


	int m = idx - 2;


	final double[] hVec = new double[3];

	while (m >= l) {
		double z = matrixT[m][m];
		hVec[2] = shift.x - z;
		double s = shift.y - z;
		hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
		hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
		hVec[2] = matrixT[m + 2][m + 1];
		s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

		if (m == l) {
			break;
		}

		for (int i = 0; i < hVec.length; i++) {
			hVec[i] /= s;
		}

		final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
		(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

		final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
		((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
		org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

		if (lhs < (epsilon * rhs)) {
			break;
		}
		m--;
	} 

	performDoubleQRStep(l, m, idx, shift, hVec);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:53:26.177 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:26.177 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:26.178 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (l == idx) {

	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	idx--;
	iteration = 0;
} else if (l == (idx - 1)) {

	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
	double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
	double q = (p * p) + shift.w;
	double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
	shift.x = matrixT[idx][idx];

	if (q >= 0) {
		if (p >= 0) {
			z = p + z;
		} else {
			z = p - z;
		}
		shift.x = matrixT[idx][idx - 1];
		double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
		p = shift.x / s;
		q = z / s;
		double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
		p = p / r;
		q = q / r;


		for (int j = idx - 1; j < n; j++) {
			z = matrixT[idx - 1][j];
			matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
			matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
		}


		for (int i = 0; i <= idx; i++) {
			z = matrixT[i][idx - 1];
			matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
			matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
		}


		for (int i = 0; i <= (n - 1); i++) {
			z = matrixP[i][idx - 1];
			matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
			matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
		}
	}
	idx -= 2;
	iteration = 0;
} else {


	computeShift(l, idx, iteration, shift);


	if ((++iteration) > maxIterations) {
		throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
		maxIterations);
	}


	int m = idx - 2;


	final double[] hVec = new double[3];

	while (m >= l) {
		double z = matrixT[m][m];
		hVec[2] = shift.x - z;
		double s = shift.y - z;
		hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
		hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
		hVec[2] = matrixT[m + 2][m + 1];
		s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

		if (m == l) {
			break;
		}

		for (int i = 0; i < hVec.length; i++) {
			hVec[i] /= s;
		}

		final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
		(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

		final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
		((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
		org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

		if (lhs < (epsilon * rhs)) {
			break;
		}
		m--;
	} 

	performDoubleQRStep(l, m, idx, shift, hVec);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: m--,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:53:28.671 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:28.671 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:28.672 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (l == idx) {

	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	idx--;
	iteration = 0;
} else if (l == (idx - 1)) {

	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
	double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
	double q = (p * p) + shift.w;
	double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
	shift.x = matrixT[idx][idx];

	if (q >= 0) {
		if (p >= 0) {
			z = p + z;
		} else {
			z = p - z;
		}
		shift.x = matrixT[idx][idx - 1];
		double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
		p = shift.x / s;
		q = z / s;
		double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
		p = p / r;
		q = q / r;


		for (int j = idx - 1; j < n; j++) {
			z = matrixT[idx - 1][j];
			matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
			matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
		}


		for (int i = 0; i <= idx; i++) {
			z = matrixT[i][idx - 1];
			matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
			matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
		}


		for (int i = 0; i <= (n - 1); i++) {
			z = matrixP[i][idx - 1];
			matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
			matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
		}
	}
	idx -= 2;
	iteration = 0;
} else {


	computeShift(l, idx, iteration, shift);


	if ((++iteration) > maxIterations) {
		throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
		maxIterations);
	}


	int m = idx - 2;


	final double[] hVec = new double[3];

	while (m >= l) {
		double z = matrixT[m][m];
		hVec[2] = shift.x - z;
		double s = shift.y - z;
		hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
		hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
		hVec[2] = matrixT[m + 2][m + 1];
		s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

		if (m == l) {
			break;
		}

		for (int i = 0; i < hVec.length; i++) {
			hVec[i] /= s;
		}

		final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
		(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

		final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
		((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
		org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

		if (lhs < (epsilon * rhs)) {
			break;
		}
		m--;
	} 

	performDoubleQRStep(l, m, idx, shift, hVec);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (l == (idx - 1)) {

	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
	double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
	double q = (p * p) + shift.w;
	double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
	shift.x = matrixT[idx][idx];

	if (q >= 0) {
		if (p >= 0) {
			z = p + z;
		} else {
			z = p - z;
		}
		shift.x = matrixT[idx][idx - 1];
		double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
		p = shift.x / s;
		q = z / s;
		double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
		p = p / r;
		q = q / r;


		for (int j = idx - 1; j < n; j++) {
			z = matrixT[idx - 1][j];
			matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
			matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
		}


		for (int i = 0; i <= idx; i++) {
			z = matrixT[i][idx - 1];
			matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
			matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
		}


		for (int i = 0; i <= (n - 1); i++) {
			z = matrixP[i][idx - 1];
			matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
			matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
		}
	}
	idx -= 2;
	iteration = 0;
} else {


	computeShift(l, idx, iteration, shift);


	if ((++iteration) > maxIterations) {
		throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
		maxIterations);
	}


	int m = idx - 2;


	final double[] hVec = new double[3];

	while (m >= l) {
		double z = matrixT[m][m];
		hVec[2] = shift.x - z;
		double s = shift.y - z;
		hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
		hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
		hVec[2] = matrixT[m + 2][m + 1];
		s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

		if (m == l) {
			break;
		}

		for (int i = 0; i < hVec.length; i++) {
			hVec[i] /= s;
		}

		final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
		(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

		final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
		((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
		org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

		if (lhs < (epsilon * rhs)) {
			break;
		}
		m--;
	} 

	performDoubleQRStep(l, m, idx, shift, hVec);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:53:30.688 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:30.688 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:30.689 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (l == idx) {

	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	idx--;
	iteration = 0;
} else if (l == (idx - 1)) {

	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
	double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
	double q = (p * p) + shift.w;
	double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
	shift.x = matrixT[idx][idx];

	if (q >= 0) {
		if (p >= 0) {
			z = p + z;
		} else {
			z = p - z;
		}
		shift.x = matrixT[idx][idx - 1];
		double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
		p = shift.x / s;
		q = z / s;
		double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
		p = p / r;
		q = q / r;


		for (int j = idx - 1; j < n; j++) {
			z = matrixT[idx - 1][j];
			matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
			matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
		}


		for (int i = 0; i <= idx; i++) {
			z = matrixT[i][idx - 1];
			matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
			matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
		}


		for (int i = 0; i <= (n - 1); i++) {
			z = matrixP[i][idx - 1];
			matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
			matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
		}
	}
	idx -= 2;
	iteration = 0;
} else {


	computeShift(l, idx, iteration, shift);


	if ((++iteration) > maxIterations) {
		throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
		maxIterations);
	}


	int m = idx - 2;


	final double[] hVec = new double[3];

	while (m >= l) {
		double z = matrixT[m][m];
		hVec[2] = shift.x - z;
		double s = shift.y - z;
		hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
		hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
		hVec[2] = matrixT[m + 2][m + 1];
		s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

		if (m == l) {
			break;
		}

		for (int i = 0; i < hVec.length; i++) {
			hVec[i] /= s;
		}

		final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
		(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

		final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
		((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
		org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

		if (lhs < (epsilon * rhs)) {
			break;
		}
		m--;
	} 

	performDoubleQRStep(l, m, idx, shift, hVec);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:53:32.950 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:32.950 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:32.951 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (idx >= 0) {


	final int l = findSmallSubDiagonalElement(idx, norm);


	if (l == idx) {

		matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
		idx--;
		iteration = 0;
	} else if (l == (idx - 1)) {

		shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
		double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
		double q = (p * p) + shift.w;
		double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
		matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
		matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
		shift.x = matrixT[idx][idx];

		if (q >= 0) {
			if (p >= 0) {
				z = p + z;
			} else {
				z = p - z;
			}
			shift.x = matrixT[idx][idx - 1];
			double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
			p = shift.x / s;
			q = z / s;
			double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
			p = p / r;
			q = q / r;


			for (int j = idx - 1; j < n; j++) {
				z = matrixT[idx - 1][j];
				matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
				matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
			}


			for (int i = 0; i <= idx; i++) {
				z = matrixT[i][idx - 1];
				matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
				matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
			}


			for (int i = 0; i <= (n - 1); i++) {
				z = matrixP[i][idx - 1];
				matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
				matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
			}
		}
		idx -= 2;
		iteration = 0;
	} else {


		computeShift(l, idx, iteration, shift);


		if ((++iteration) > maxIterations) {
			throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
			maxIterations);
		}


		int m = idx - 2;


		final double[] hVec = new double[3];

		while (m >= l) {
			double z = matrixT[m][m];
			hVec[2] = shift.x - z;
			double s = shift.y - z;
			hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
			hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
			hVec[2] = matrixT[m + 2][m + 1];
			s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

			if (m == l) {
				break;
			}

			for (int i = 0; i < hVec.length; i++) {
				hVec[i] /= s;
			}

			final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
			(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

			final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
			((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
			org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

			if (lhs < (epsilon * rhs)) {
				break;
			}
			m--;
		} 

		performDoubleQRStep(l, m, idx, shift, hVec);
	}
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[i] /= s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:53:34.929 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:34.929 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:34.930 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (idx >= 0) {


	final int l = findSmallSubDiagonalElement(idx, norm);


	if (l == idx) {

		matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
		idx--;
		iteration = 0;
	} else if (l == (idx - 1)) {

		shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
		double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
		double q = (p * p) + shift.w;
		double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
		matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
		matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
		shift.x = matrixT[idx][idx];

		if (q >= 0) {
			if (p >= 0) {
				z = p + z;
			} else {
				z = p - z;
			}
			shift.x = matrixT[idx][idx - 1];
			double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
			p = shift.x / s;
			q = z / s;
			double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
			p = p / r;
			q = q / r;


			for (int j = idx - 1; j < n; j++) {
				z = matrixT[idx - 1][j];
				matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
				matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
			}


			for (int i = 0; i <= idx; i++) {
				z = matrixT[i][idx - 1];
				matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
				matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
			}


			for (int i = 0; i <= (n - 1); i++) {
				z = matrixP[i][idx - 1];
				matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
				matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
			}
		}
		idx -= 2;
		iteration = 0;
	} else {


		computeShift(l, idx, iteration, shift);


		if ((++iteration) > maxIterations) {
			throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
			maxIterations);
		}


		int m = idx - 2;


		final double[] hVec = new double[3];

		while (m >= l) {
			double z = matrixT[m][m];
			hVec[2] = shift.x - z;
			double s = shift.y - z;
			hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
			hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
			hVec[2] = matrixT[m + 2][m + 1];
			s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

			if (m == l) {
				break;
			}

			for (int i = 0; i < hVec.length; i++) {
				hVec[i] /= s;
			}

			final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
			(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

			final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
			((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
			org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

			if (lhs < (epsilon * rhs)) {
				break;
			}
			m--;
		} 

		performDoubleQRStep(l, m, idx, shift, hVec);
	}
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (m >= l) {
	double z = matrixT[m][m];
	hVec[2] = shift.x - z;
	double s = shift.y - z;
	hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
	hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
	hVec[2] = matrixT[m + 2][m + 1];
	s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

	if (m == l) {
		break;
	}

	for (int i = 0; i < hVec.length; i++) {
		hVec[i] /= s;
	}

	final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
	(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

	final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
	((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
	org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

	if (lhs < (epsilon * rhs)) {
		break;
	}
	m--;
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:53:37.259 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:37.259 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:37.260 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (idx >= 0) {


	final int l = findSmallSubDiagonalElement(idx, norm);


	if (l == idx) {

		matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
		idx--;
		iteration = 0;
	} else if (l == (idx - 1)) {

		shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
		double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
		double q = (p * p) + shift.w;
		double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
		matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
		matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
		shift.x = matrixT[idx][idx];

		if (q >= 0) {
			if (p >= 0) {
				z = p + z;
			} else {
				z = p - z;
			}
			shift.x = matrixT[idx][idx - 1];
			double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
			p = shift.x / s;
			q = z / s;
			double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
			p = p / r;
			q = q / r;


			for (int j = idx - 1; j < n; j++) {
				z = matrixT[idx - 1][j];
				matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
				matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
			}


			for (int i = 0; i <= idx; i++) {
				z = matrixT[i][idx - 1];
				matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
				matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
			}


			for (int i = 0; i <= (n - 1); i++) {
				z = matrixP[i][idx - 1];
				matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
				matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
			}
		}
		idx -= 2;
		iteration = 0;
	} else {


		computeShift(l, idx, iteration, shift);


		if ((++iteration) > maxIterations) {
			throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
			maxIterations);
		}


		int m = idx - 2;


		final double[] hVec = new double[3];

		while (m >= l) {
			double z = matrixT[m][m];
			hVec[2] = shift.x - z;
			double s = shift.y - z;
			hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
			hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
			hVec[2] = matrixT[m + 2][m + 1];
			s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

			if (m == l) {
				break;
			}

			for (int i = 0; i < hVec.length; i++) {
				hVec[i] /= s;
			}

			final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
			(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

			final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
			((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
			org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

			if (lhs < (epsilon * rhs)) {
				break;
			}
			m--;
		} 

		performDoubleQRStep(l, m, idx, shift, hVec);
	}
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (l == idx) {

	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	idx--;
	iteration = 0;
} else if (l == (idx - 1)) {

	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
	double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
	double q = (p * p) + shift.w;
	double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
	shift.x = matrixT[idx][idx];

	if (q >= 0) {
		if (p >= 0) {
			z = p + z;
		} else {
			z = p - z;
		}
		shift.x = matrixT[idx][idx - 1];
		double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
		p = shift.x / s;
		q = z / s;
		double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
		p = p / r;
		q = q / r;


		for (int j = idx - 1; j < n; j++) {
			z = matrixT[idx - 1][j];
			matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
			matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
		}


		for (int i = 0; i <= idx; i++) {
			z = matrixT[i][idx - 1];
			matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
			matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
		}


		for (int i = 0; i <= (n - 1); i++) {
			z = matrixP[i][idx - 1];
			matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
			matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
		}
	}
	idx -= 2;
	iteration = 0;
} else {


	computeShift(l, idx, iteration, shift);


	if ((++iteration) > maxIterations) {
		throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
		maxIterations);
	}


	int m = idx - 2;


	final double[] hVec = new double[3];

	while (m >= l) {
		double z = matrixT[m][m];
		hVec[2] = shift.x - z;
		double s = shift.y - z;
		hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
		hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
		hVec[2] = matrixT[m + 2][m + 1];
		s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

		if (m == l) {
			break;
		}

		for (int i = 0; i < hVec.length; i++) {
			hVec[i] /= s;
		}

		final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
		(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

		final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
		((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
		org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

		if (lhs < (epsilon * rhs)) {
			break;
		}
		m--;
	} 

	performDoubleQRStep(l, m, idx, shift, hVec);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:53:39.171 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:39.171 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:39.172 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (idx >= 0) {


	final int l = findSmallSubDiagonalElement(idx, norm);


	if (l == idx) {

		matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
		idx--;
		iteration = 0;
	} else if (l == (idx - 1)) {

		shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
		double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
		double q = (p * p) + shift.w;
		double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
		matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
		matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
		shift.x = matrixT[idx][idx];

		if (q >= 0) {
			if (p >= 0) {
				z = p + z;
			} else {
				z = p - z;
			}
			shift.x = matrixT[idx][idx - 1];
			double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
			p = shift.x / s;
			q = z / s;
			double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
			p = p / r;
			q = q / r;


			for (int j = idx - 1; j < n; j++) {
				z = matrixT[idx - 1][j];
				matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
				matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
			}


			for (int i = 0; i <= idx; i++) {
				z = matrixT[i][idx - 1];
				matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
				matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
			}


			for (int i = 0; i <= (n - 1); i++) {
				z = matrixP[i][idx - 1];
				matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
				matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
			}
		}
		idx -= 2;
		iteration = 0;
	} else {


		computeShift(l, idx, iteration, shift);


		if ((++iteration) > maxIterations) {
			throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
			maxIterations);
		}


		int m = idx - 2;


		final double[] hVec = new double[3];

		while (m >= l) {
			double z = matrixT[m][m];
			hVec[2] = shift.x - z;
			double s = shift.y - z;
			hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
			hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
			hVec[2] = matrixT[m + 2][m + 1];
			s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

			if (m == l) {
				break;
			}

			for (int i = 0; i < hVec.length; i++) {
				hVec[i] /= s;
			}

			final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
			(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

			final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
			((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
			org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

			if (lhs < (epsilon * rhs)) {
				break;
			}
			m--;
		} 

		performDoubleQRStep(l, m, idx, shift, hVec);
	}
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:53:41.370 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:41.371 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:41.372 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[i] /= s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:53:43.721 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:43.721 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:43.722 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (m >= l) {
	double z = matrixT[m][m];
	hVec[2] = shift.x - z;
	double s = shift.y - z;
	hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
	hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
	hVec[2] = matrixT[m + 2][m + 1];
	s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

	if (m == l) {
		break;
	}

	for (int i = 0; i < hVec.length; i++) {
		hVec[i] /= s;
	}

	final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
	(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

	final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
	((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
	org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

	if (lhs < (epsilon * rhs)) {
		break;
	}
	m--;
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:53:45.837 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:45.837 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:45.838 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (l == idx) {

	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	idx--;
	iteration = 0;
} else if (l == (idx - 1)) {

	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
	double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
	double q = (p * p) + shift.w;
	double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
	shift.x = matrixT[idx][idx];

	if (q >= 0) {
		if (p >= 0) {
			z = p + z;
		} else {
			z = p - z;
		}
		shift.x = matrixT[idx][idx - 1];
		double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
		p = shift.x / s;
		q = z / s;
		double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
		p = p / r;
		q = q / r;


		for (int j = idx - 1; j < n; j++) {
			z = matrixT[idx - 1][j];
			matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
			matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
		}


		for (int i = 0; i <= idx; i++) {
			z = matrixT[i][idx - 1];
			matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
			matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
		}


		for (int i = 0; i <= (n - 1); i++) {
			z = matrixP[i][idx - 1];
			matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
			matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
		}
	}
	idx -= 2;
	iteration = 0;
} else {


	computeShift(l, idx, iteration, shift);


	if ((++iteration) > maxIterations) {
		throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
		maxIterations);
	}


	int m = idx - 2;


	final double[] hVec = new double[3];

	while (m >= l) {
		double z = matrixT[m][m];
		hVec[2] = shift.x - z;
		double s = shift.y - z;
		hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
		hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
		hVec[2] = matrixT[m + 2][m + 1];
		s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

		if (m == l) {
			break;
		}

		for (int i = 0; i < hVec.length; i++) {
			hVec[i] /= s;
		}

		final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
		(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

		final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
		((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
		org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

		if (lhs < (epsilon * rhs)) {
			break;
		}
		m--;
	} 

	performDoubleQRStep(l, m, idx, shift, hVec);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:53:48.012 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:48.012 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:48.013 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:53:50.198 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:50.199 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:50.199 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (idx >= 0) {


	final int l = findSmallSubDiagonalElement(idx, norm);


	if (l == idx) {

		matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
		idx--;
		iteration = 0;
	} else if (l == (idx - 1)) {

		shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
		double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
		double q = (p * p) + shift.w;
		double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
		matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
		matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
		shift.x = matrixT[idx][idx];

		if (q >= 0) {
			if (p >= 0) {
				z = p + z;
			} else {
				z = p - z;
			}
			shift.x = matrixT[idx][idx - 1];
			double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
			p = shift.x / s;
			q = z / s;
			double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
			p = p / r;
			q = q / r;


			for (int j = idx - 1; j < n; j++) {
				z = matrixT[idx - 1][j];
				matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
				matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
			}


			for (int i = 0; i <= idx; i++) {
				z = matrixT[i][idx - 1];
				matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
				matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
			}


			for (int i = 0; i <= (n - 1); i++) {
				z = matrixP[i][idx - 1];
				matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
				matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
			}
		}
		idx -= 2;
		iteration = 0;
	} else {


		computeShift(l, idx, iteration, shift);


		if ((++iteration) > maxIterations) {
			throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
			maxIterations);
		}


		int m = idx - 2;


		final double[] hVec = new double[3];

		while (m >= l) {
			double z = matrixT[m][m];
			hVec[2] = shift.x - z;
			double s = shift.y - z;
			hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
			hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
			hVec[2] = matrixT[m + 2][m + 1];
			s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

			if (m == l) {
				break;
			}

			for (int i = 0; i < hVec.length; i++) {
				hVec[i] /= s;
			}

			final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
			(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

			final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
			((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
			org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

			if (lhs < (epsilon * rhs)) {
				break;
			}
			m--;
		} 

		performDoubleQRStep(l, m, idx, shift, hVec);
	}
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:53:52.459 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:52.459 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:52.460 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < matrixT.length; j++) {
	norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < hVec.length; i++) {
	hVec[i] /= s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:53:54.480 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:54.481 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:54.482 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < matrixT.length; j++) {
	norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: performDoubleQRStep(l, m, idx, shift, hVec),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:53:56.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:56.739 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:56.740 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < matrixT.length; j++) {
	norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (idx >= 0) {


	final int l = findSmallSubDiagonalElement(idx, norm);


	if (l == idx) {

		matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
		idx--;
		iteration = 0;
	} else if (l == (idx - 1)) {

		shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
		double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
		double q = (p * p) + shift.w;
		double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
		matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
		matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
		shift.x = matrixT[idx][idx];

		if (q >= 0) {
			if (p >= 0) {
				z = p + z;
			} else {
				z = p - z;
			}
			shift.x = matrixT[idx][idx - 1];
			double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
			p = shift.x / s;
			q = z / s;
			double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
			p = p / r;
			q = q / r;


			for (int j = idx - 1; j < n; j++) {
				z = matrixT[idx - 1][j];
				matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
				matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
			}


			for (int i = 0; i <= idx; i++) {
				z = matrixT[i][idx - 1];
				matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
				matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
			}


			for (int i = 0; i <= (n - 1); i++) {
				z = matrixP[i][idx - 1];
				matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
				matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
			}
		}
		idx -= 2;
		iteration = 0;
	} else {


		computeShift(l, idx, iteration, shift);


		if ((++iteration) > maxIterations) {
			throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
			maxIterations);
		}


		int m = idx - 2;


		final double[] hVec = new double[3];

		while (m >= l) {
			double z = matrixT[m][m];
			hVec[2] = shift.x - z;
			double s = shift.y - z;
			hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
			hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
			hVec[2] = matrixT[m + 2][m + 1];
			s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

			if (m == l) {
				break;
			}

			for (int i = 0; i < hVec.length; i++) {
				hVec[i] /= s;
			}

			final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
			(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

			final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
			((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
			org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

			if (lhs < (epsilon * rhs)) {
				break;
			}
			m--;
		} 

		performDoubleQRStep(l, m, idx, shift, hVec);
	}
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:53:58.776 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:58.776 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:58.777 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < matrixT.length; j++) {
	norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:00.782 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:00.783 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:00.784 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < matrixT.length; j++) {
	norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:03.143 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:03.143 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:03.144 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < matrixT.length; i++) {

	for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < matrixT.length; j++) {
		norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < hVec.length; i++) {
	hVec[i] /= s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:05.554 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:05.555 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:05.555 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < matrixT.length; i++) {

	for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < matrixT.length; j++) {
		norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (l == (idx - 1)) {

	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
	double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
	double q = (p * p) + shift.w;
	double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
	shift.x = matrixT[idx][idx];

	if (q >= 0) {
		if (p >= 0) {
			z = p + z;
		} else {
			z = p - z;
		}
		shift.x = matrixT[idx][idx - 1];
		double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
		p = shift.x / s;
		q = z / s;
		double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
		p = p / r;
		q = q / r;


		for (int j = idx - 1; j < n; j++) {
			z = matrixT[idx - 1][j];
			matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
			matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
		}


		for (int i = 0; i <= idx; i++) {
			z = matrixT[i][idx - 1];
			matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
			matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
		}


		for (int i = 0; i <= (n - 1); i++) {
			z = matrixP[i][idx - 1];
			matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
			matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
		}
	}
	idx -= 2;
	iteration = 0;
} else {


	computeShift(l, idx, iteration, shift);


	if ((++iteration) > maxIterations) {
		throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
		maxIterations);
	}


	int m = idx - 2;


	final double[] hVec = new double[3];

	while (m >= l) {
		double z = matrixT[m][m];
		hVec[2] = shift.x - z;
		double s = shift.y - z;
		hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
		hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
		hVec[2] = matrixT[m + 2][m + 1];
		s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

		if (m == l) {
			break;
		}

		for (int i = 0; i < hVec.length; i++) {
			hVec[i] /= s;
		}

		final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
		(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

		final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
		((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
		org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

		if (lhs < (epsilon * rhs)) {
			break;
		}
		m--;
	} 

	performDoubleQRStep(l, m, idx, shift, hVec);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:07.505 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:07.505 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:07.506 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < matrixT.length; i++) {

	for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < matrixT.length; j++) {
		norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:54:09.966 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:09.966 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:09.967 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < matrixT.length; i++) {

	for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < matrixT.length; j++) {
		norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:12.433 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:12.433 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:12.434 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < matrixT.length; i++) {

	for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < matrixT.length; j++) {
		norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < matrixT.length; j++) {
	norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:14.438 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:14.439 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:14.439 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int l = startIdx,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2])),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:16.805 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:16.806 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:16.807 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int l = startIdx,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (l == idx) {

	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	idx--;
	iteration = 0;
} else if (l == (idx - 1)) {

	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
	double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
	double q = (p * p) + shift.w;
	double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
	shift.x = matrixT[idx][idx];

	if (q >= 0) {
		if (p >= 0) {
			z = p + z;
		} else {
			z = p - z;
		}
		shift.x = matrixT[idx][idx - 1];
		double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
		p = shift.x / s;
		q = z / s;
		double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
		p = p / r;
		q = q / r;


		for (int j = idx - 1; j < n; j++) {
			z = matrixT[idx - 1][j];
			matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
			matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
		}


		for (int i = 0; i <= idx; i++) {
			z = matrixT[i][idx - 1];
			matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
			matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
		}


		for (int i = 0; i <= (n - 1); i++) {
			z = matrixP[i][idx - 1];
			matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
			matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
		}
	}
	idx -= 2;
	iteration = 0;
} else {


	computeShift(l, idx, iteration, shift);


	if ((++iteration) > maxIterations) {
		throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
		maxIterations);
	}


	int m = idx - 2;


	final double[] hVec = new double[3];

	while (m >= l) {
		double z = matrixT[m][m];
		hVec[2] = shift.x - z;
		double s = shift.y - z;
		hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
		hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
		hVec[2] = matrixT[m + 2][m + 1];
		s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

		if (m == l) {
			break;
		}

		for (int i = 0; i < hVec.length; i++) {
			hVec[i] /= s;
		}

		final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
		(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

		final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
		((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
		org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

		if (lhs < (epsilon * rhs)) {
			break;
		}
		m--;
	} 

	performDoubleQRStep(l, m, idx, shift, hVec);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:19.218 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:19.218 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:19.219 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int l = startIdx,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < matrixT.length; j++) {
	norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:54:21.165 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:21.165 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:21.166 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int l = startIdx,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:23.604 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:23.605 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:23.606 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int l = startIdx,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < matrixT.length; i++) {

	for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < matrixT.length; j++) {
		norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:25.531 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:25.531 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:25.532 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = org.apache.commons.math3.util.FastMath.abs(matrixT[l - 1][l - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[l][l]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2])),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:27.802 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:27.802 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:27.803 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = org.apache.commons.math3.util.FastMath.abs(matrixT[l - 1][l - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[l][l]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (l == idx) {

	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	idx--;
	iteration = 0;
} else if (l == (idx - 1)) {

	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
	double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
	double q = (p * p) + shift.w;
	double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
	shift.x = matrixT[idx][idx];

	if (q >= 0) {
		if (p >= 0) {
			z = p + z;
		} else {
			z = p - z;
		}
		shift.x = matrixT[idx][idx - 1];
		double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
		p = shift.x / s;
		q = z / s;
		double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
		p = p / r;
		q = q / r;


		for (int j = idx - 1; j < n; j++) {
			z = matrixT[idx - 1][j];
			matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
			matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
		}


		for (int i = 0; i <= idx; i++) {
			z = matrixT[i][idx - 1];
			matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
			matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
		}


		for (int i = 0; i <= (n - 1); i++) {
			z = matrixP[i][idx - 1];
			matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
			matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
		}
	}
	idx -= 2;
	iteration = 0;
} else {


	computeShift(l, idx, iteration, shift);


	if ((++iteration) > maxIterations) {
		throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
		maxIterations);
	}


	int m = idx - 2;


	final double[] hVec = new double[3];

	while (m >= l) {
		double z = matrixT[m][m];
		hVec[2] = shift.x - z;
		double s = shift.y - z;
		hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
		hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
		hVec[2] = matrixT[m + 2][m + 1];
		s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

		if (m == l) {
			break;
		}

		for (int i = 0; i < hVec.length; i++) {
			hVec[i] /= s;
		}

		final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
		(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

		final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
		((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
		org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

		if (lhs < (epsilon * rhs)) {
			break;
		}
		m--;
	} 

	performDoubleQRStep(l, m, idx, shift, hVec);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:29.788 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:29.788 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:29.789 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = org.apache.commons.math3.util.FastMath.abs(matrixT[l - 1][l - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[l][l]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < matrixT.length; i++) {

	for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < matrixT.length; j++) {
		norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:54:31.921 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:31.921 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:31.922 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = org.apache.commons.math3.util.FastMath.abs(matrixT[l - 1][l - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[l][l]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:34.043 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:34.043 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:34.044 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = org.apache.commons.math3.util.FastMath.abs(matrixT[l - 1][l - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[l][l]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int l = startIdx,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:35.963 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:35.964 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:35.964 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = norm,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1])),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:38.048 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:38.048 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:38.049 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = norm,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (idx >= 0) {


	final int l = findSmallSubDiagonalElement(idx, norm);


	if (l == idx) {

		matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
		idx--;
		iteration = 0;
	} else if (l == (idx - 1)) {

		shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
		double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
		double q = (p * p) + shift.w;
		double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
		matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
		matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
		shift.x = matrixT[idx][idx];

		if (q >= 0) {
			if (p >= 0) {
				z = p + z;
			} else {
				z = p - z;
			}
			shift.x = matrixT[idx][idx - 1];
			double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
			p = shift.x / s;
			q = z / s;
			double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
			p = p / r;
			q = q / r;


			for (int j = idx - 1; j < n; j++) {
				z = matrixT[idx - 1][j];
				matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
				matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
			}


			for (int i = 0; i <= idx; i++) {
				z = matrixT[i][idx - 1];
				matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
				matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
			}


			for (int i = 0; i <= (n - 1); i++) {
				z = matrixP[i][idx - 1];
				matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
				matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
			}
		}
		idx -= 2;
		iteration = 0;
	} else {


		computeShift(l, idx, iteration, shift);


		if ((++iteration) > maxIterations) {
			throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
			maxIterations);
		}


		int m = idx - 2;


		final double[] hVec = new double[3];

		while (m >= l) {
			double z = matrixT[m][m];
			hVec[2] = shift.x - z;
			double s = shift.y - z;
			hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
			hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
			hVec[2] = matrixT[m + 2][m + 1];
			s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

			if (m == l) {
				break;
			}

			for (int i = 0; i < hVec.length; i++) {
				hVec[i] /= s;
			}

			final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
			(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

			final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
			((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
			org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

			if (lhs < (epsilon * rhs)) {
				break;
			}
			m--;
		} 

		performDoubleQRStep(l, m, idx, shift, hVec);
	}
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:40.224 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:40.225 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:40.225 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = norm,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int l = startIdx,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:54:42.226 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:42.226 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:42.228 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = norm,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:44.589 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:44.589 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:44.590 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = norm,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = org.apache.commons.math3.util.FastMath.abs(matrixT[l - 1][l - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[l][l]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:46.983 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:46.983 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:46.984 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((++iteration) > maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
	maxIterations);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double q = (p * p) + shift.w,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:49.073 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:49.073 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:49.074 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((++iteration) > maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
	maxIterations);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:51.561 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:51.561 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:51.562 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((++iteration) > maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
	maxIterations);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = p + z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:53.940 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:53.940 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:53.941 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((++iteration) > maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
	maxIterations);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = shift.x / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:54:55.978 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:55.978 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:55.979 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((++iteration) > maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
	maxIterations);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:54:58.329 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:58.329 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:58.330 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((++iteration) > maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
	maxIterations);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:55:00.377 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:00.377 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:00.378 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((++iteration) > maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
	maxIterations);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: computeShift(l, idx, iteration, shift),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:55:02.818 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:02.818 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:02.819 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((++iteration) > maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
	maxIterations);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:55:04.719 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:04.720 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:04.720 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((++iteration) > maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
	maxIterations);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

08:55:07.131 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:07.131 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:07.132 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:55:09.081 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:09.081 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:09.082 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = norm,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:55:11.417 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:11.417 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:11.418 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int m = idx - 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:55:13.289 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:13.290 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:13.290 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] hVec = new double[3],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:55:15.298 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:15.298 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:15.299 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double z = matrixT[m][m],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:55:17.526 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:17.526 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:17.527 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[2] = shift.x - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:55:19.399 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:19.400 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:19.401 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = shift.y - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:55:21.260 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:21.261 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:21.261 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:55:23.393 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:23.393 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:23.395 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:55:25.849 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:25.849 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:25.850 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[2] = matrixT[m + 2][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:55:28.090 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:28.090 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:28.091 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:55:30.247 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:30.247 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:30.249 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:55:32.664 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:32.664 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:32.665 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < hVec.length; i++) {
	hVec[i] /= s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:55:34.840 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:34.841 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:34.842 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: m--,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:55:37.072 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:37.072 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:37.073 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < matrixT.length; i++) {

	for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < matrixT.length; j++) {
		norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:55:39.164 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:39.165 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:39.166 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = org.apache.commons.math3.util.FastMath.abs(matrixT[l - 1][l - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[l][l]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:55:41.635 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:41.635 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:41.636 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = norm,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:55:44.028 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:44.028 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:44.029 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.FastMath.abs(matrixT[l][l - 1]) < (epsilon * s)) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
	s = norm;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:55:46.155 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:46.155 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:46.156 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: l--,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(matrixT[l][l - 1]) < (epsilon * s)) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:55:48.442 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:48.442 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:48.443 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (l > 0) {
	double s = org.apache.commons.math3.util.FastMath.abs(matrixT[l - 1][l - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[l][l]);
	if (org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
		s = norm;
	}
	if (org.apache.commons.math3.util.FastMath.abs(matrixT[l][l - 1]) < (epsilon * s)) {
		break;
	}
	l--;
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: l--,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:55:50.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:50.344 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:50.345 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return l,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (l > 0) {
	double s = org.apache.commons.math3.util.FastMath.abs(matrixT[l - 1][l - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[l][l]);
	if (org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
		s = norm;
	}
	if (org.apache.commons.math3.util.FastMath.abs(matrixT[l][l - 1]) < (epsilon * s)) {
		break;
	}
	l--;
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:55:52.662 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:52.662 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:52.663 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.y = shift.w = 0.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return l,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:55:54.619 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:54.619 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:54.620 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.y = matrixT[idx - 1][idx - 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.y = shift.w = 0.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:55:56.522 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:56.523 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:56.524 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (l < idx) {
	shift.y = matrixT[idx - 1][idx - 1];
	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.y = matrixT[idx - 1][idx - 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:55:58.890 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:58.890 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:58.891 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.exShift += shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (l < idx) {
	shift.y = matrixT[idx - 1][idx - 1];
	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:00.850 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:00.850 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:00.851 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][i] -= shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.exShift += shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:03.236 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:03.237 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:03.238 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= idx; i++) {
	matrixT[i][i] -= shift.x;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][i] -= shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:05.260 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:05.260 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:05.261 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx - 2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= idx; i++) {
	matrixT[i][i] -= shift.x;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:07.600 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:07.600 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:07.602 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = shift.y = 0.75 * s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx - 2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:09.591 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:09.591 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:09.592 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.w = ((-0.4375) * s) * s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = shift.y = 0.75 * s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:11.871 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:11.872 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:11.873 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (iteration == 10) {
	shift.exShift += shift.x;
	for (int i = 0; i <= idx; i++) {
		matrixT[i][i] -= shift.x;
	}
	double s = org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx - 2]);
	shift.x = shift.y = 0.75 * s;
	shift.w = ((-0.4375) * s) * s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = ((-0.4375) * s) * s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:13.927 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:13.927 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:13.929 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = (shift.y - shift.x) / 2.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (iteration == 10) {
	shift.exShift += shift.x;
	for (int i = 0; i <= idx; i++) {
		matrixT[i][i] -= shift.x;
	}
	double s = org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx - 2]);
	shift.x = shift.y = 0.75 * s;
	shift.w = ((-0.4375) * s) * s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:16.124 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:16.125 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:16.125 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (s * s) + shift.w,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = (shift.y - shift.x) / 2.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:18.217 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:18.218 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:18.219 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = org.apache.commons.math3.util.FastMath.sqrt(s),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (s * s) + shift.w,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:20.423 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:20.424 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:20.425 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = -s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = org.apache.commons.math3.util.FastMath.sqrt(s),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:22.304 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:22.304 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:22.305 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (shift.y < shift.x) {
	s = -s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = -s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:24.485 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:24.485 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:24.487 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = shift.x - (shift.w / (((shift.y - shift.x) / 2.0) + s)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (shift.y < shift.x) {
	s = -s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:26.707 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:26.707 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:26.708 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][i] -= s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = shift.x - (shift.w / (((shift.y - shift.x) / 2.0) + s)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:29.103 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:29.103 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:29.104 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= idx; i++) {
	matrixT[i][i] -= s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][i] -= s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:31.422 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:31.423 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:31.424 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.exShift += s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= idx; i++) {
	matrixT[i][i] -= s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:33.584 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:33.584 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:33.585 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = shift.y = shift.w = 0.964,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.exShift += s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:35.957 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:35.958 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:35.959 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.compareTo(s, 0.0, epsilon) > 0) {
	s = org.apache.commons.math3.util.FastMath.sqrt(s);
	if (shift.y < shift.x) {
		s = -s;
	}
	s = shift.x - (shift.w / (((shift.y - shift.x) / 2.0) + s));
	for (int i = 0; i <= idx; i++) {
		matrixT[i][i] -= s;
	}
	shift.exShift += s;
	shift.x = shift.y = shift.w = 0.964;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = shift.y = shift.w = 0.964,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:38.297 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:38.297 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:38.299 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (iteration == 30) {
	double s = (shift.y - shift.x) / 2.0;
	s = (s * s) + shift.w;
	if (org.apache.commons.math3.util.Precision.compareTo(s, 0.0, epsilon) > 0) {
		s = org.apache.commons.math3.util.FastMath.sqrt(s);
		if (shift.y < shift.x) {
			s = -s;
		}
		s = shift.x - (shift.w / (((shift.y - shift.x) / 2.0) + s));
		for (int i = 0; i <= idx; i++) {
			matrixT[i][i] -= s;
		}
		shift.exShift += s;
		shift.x = shift.y = shift.w = 0.964;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.compareTo(s, 0.0, epsilon) > 0) {
	s = org.apache.commons.math3.util.FastMath.sqrt(s);
	if (shift.y < shift.x) {
		s = -s;
	}
	s = shift.x - (shift.w / (((shift.y - shift.x) / 2.0) + s));
	for (int i = 0; i <= idx; i++) {
		matrixT[i][i] -= s;
	}
	shift.exShift += s;
	shift.x = shift.y = shift.w = 0.964;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:40.509 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:40.509 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:40.510 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double p = hVec[0],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (iteration == 30) {
	double s = (shift.y - shift.x) / 2.0;
	s = (s * s) + shift.w;
	if (org.apache.commons.math3.util.Precision.compareTo(s, 0.0, epsilon) > 0) {
		s = org.apache.commons.math3.util.FastMath.sqrt(s);
		if (shift.y < shift.x) {
			s = -s;
		}
		s = shift.x - (shift.w / (((shift.y - shift.x) / 2.0) + s));
		for (int i = 0; i <= idx; i++) {
			matrixT[i][i] -= s;
		}
		shift.exShift += s;
		shift.x = shift.y = shift.w = 0.964;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:42.898 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:42.898 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:42.899 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double q = hVec[1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double p = hVec[0],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:44.948 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:44.948 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:44.949 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double r = hVec[2],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double q = hVec[1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:47.334 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:47.334 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:47.335 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: boolean notlast = k != (idx - 1),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double r = hVec[2],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:49.789 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:49.790 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:49.791 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = matrixT[k][k - 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: boolean notlast = k != (idx - 1),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:51.712 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:51.713 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:51.714 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = matrixT[k + 1][k - 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = matrixT[k][k - 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:54.219 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:54.220 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:54.220 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: r = (notlast) ? matrixT[k + 2][k - 1] : 0.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = matrixT[k + 1][k - 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:56.191 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:56.191 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:56.192 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = (org.apache.commons.math3.util.FastMath.abs(p) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(r),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: r = (notlast) ? matrixT[k + 2][k - 1] : 0.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:56:58.237 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:58.237 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:58.238 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = p / shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = (org.apache.commons.math3.util.FastMath.abs(p) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(r),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:00.593 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:00.594 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:00.594 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = q / shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = p / shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:02.660 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:02.660 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:02.661 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: r = r / shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = q / shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:05.121 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:05.121 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:05.122 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
	p = p / shift.x;
	q = q / shift.x;
	r = r / shift.x;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: r = r / shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:07.138 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:07.138 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:07.139 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (k != m) {
	p = matrixT[k][k - 1];
	q = matrixT[k + 1][k - 1];
	r = (notlast) ? matrixT[k + 2][k - 1] : 0.0;
	shift.x = (org.apache.commons.math3.util.FastMath.abs(p) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(r);
	if (!org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
		p = p / shift.x;
		q = q / shift.x;
		r = r / shift.x;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
	p = p / shift.x;
	q = q / shift.x;
	r = r / shift.x;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:09.411 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:09.412 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:09.412 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (k != m) {
	p = matrixT[k][k - 1];
	q = matrixT[k + 1][k - 1];
	r = (notlast) ? matrixT[k + 2][k - 1] : 0.0;
	shift.x = (org.apache.commons.math3.util.FastMath.abs(p) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(r);
	if (!org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
		p = p / shift.x;
		q = q / shift.x;
		r = r / shift.x;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:11.475 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:11.475 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:11.476 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = org.apache.commons.math3.util.FastMath.sqrt(((p * p) + (q * q)) + (r * r)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:13.735 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:13.735 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:13.736 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.compareTo(p, 0.0, epsilon) < 0) {
	s = -s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = org.apache.commons.math3.util.FastMath.sqrt(((p * p) + (q * q)) + (r * r)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:15.919 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:15.919 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:15.921 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[k][k - 1] = (-s) * shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.compareTo(p, 0.0, epsilon) < 0) {
	s = -s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:18.179 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:18.180 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:18.181 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[k][k - 1] = -matrixT[k][k - 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[k][k - 1] = (-s) * shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:20.412 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:20.413 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:20.414 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (l != m) {
	matrixT[k][k - 1] = -matrixT[k][k - 1];
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[k][k - 1] = -matrixT[k][k - 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:22.769 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:22.769 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:22.770 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (k != m) {
	matrixT[k][k - 1] = (-s) * shift.x;
} else if (l != m) {
	matrixT[k][k - 1] = -matrixT[k][k - 1];
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (l != m) {
	matrixT[k][k - 1] = -matrixT[k][k - 1];
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:24.957 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:24.957 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:24.958 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = p + s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (k != m) {
	matrixT[k][k - 1] = (-s) * shift.x;
} else if (l != m) {
	matrixT[k][k - 1] = -matrixT[k][k - 1];
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:27.172 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:27.173 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:27.173 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = p / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = p + s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:29.268 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:29.268 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:29.269 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.y = q / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = p / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:31.522 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:31.522 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:31.523 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double z = r / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.y = q / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:33.514 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:33.514 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:33.515 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = q / p,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double z = r / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:35.816 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:35.816 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:35.817 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: r = r / p,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = q / p,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:37.822 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:37.822 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:37.823 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = matrixT[k][j] + (q * matrixT[k + 1][j]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: r = r / p,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:39.717 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:39.717 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:39.718 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = p + (r * matrixT[k + 2][j]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = matrixT[k][j] + (q * matrixT[k + 1][j]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:42.075 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:42.075 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:42.076 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = p + (r * matrixT[k + 2][j]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:44.028 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:44.028 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:44.029 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (notlast) {
	p = p + (r * matrixT[k + 2][j]);
	matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:46.424 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:46.424 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:46.425 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[k][j] = matrixT[k][j] - (p * shift.x),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (notlast) {
	p = p + (r * matrixT[k + 2][j]);
	matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:48.475 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:48.475 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:48.476 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[k + 1][j] = matrixT[k + 1][j] - (p * shift.y),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[k][j] = matrixT[k][j] - (p * shift.x),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:50.908 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:50.908 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:50.909 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = k; j < n; j++) {
	p = matrixT[k][j] + (q * matrixT[k + 1][j]);
	if (notlast) {
		p = p + (r * matrixT[k + 2][j]);
		matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z);
	}
	matrixT[k][j] = matrixT[k][j] - (p * shift.x);
	matrixT[k + 1][j] = matrixT[k + 1][j] - (p * shift.y);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[k + 1][j] = matrixT[k + 1][j] - (p * shift.y),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:52.889 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:52.889 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:52.890 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = (shift.x * matrixT[i][k]) + (shift.y * matrixT[i][k + 1]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = k; j < n; j++) {
	p = matrixT[k][j] + (q * matrixT[k + 1][j]);
	if (notlast) {
		p = p + (r * matrixT[k + 2][j]);
		matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z);
	}
	matrixT[k][j] = matrixT[k][j] - (p * shift.x);
	matrixT[k + 1][j] = matrixT[k + 1][j] - (p * shift.y);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:55.177 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:55.178 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:55.178 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = p + (z * matrixT[i][k + 2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = (shift.x * matrixT[i][k]) + (shift.y * matrixT[i][k + 1]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:57.111 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:57.112 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:57.113 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = p + (z * matrixT[i][k + 2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:57:59.504 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:59.504 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:59.505 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (notlast) {
	p = p + (z * matrixT[i][k + 2]);
	matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:01.510 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:01.510 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:01.511 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][k] = matrixT[i][k] - p,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (notlast) {
	p = p + (z * matrixT[i][k + 2]);
	matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:03.778 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:03.778 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:03.779 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][k + 1] = matrixT[i][k + 1] - (p * q),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][k] = matrixT[i][k] - p,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:05.853 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:05.853 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:05.854 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= org.apache.commons.math3.util.FastMath.min(idx, k + 3); i++) {
	p = (shift.x * matrixT[i][k]) + (shift.y * matrixT[i][k + 1]);
	if (notlast) {
		p = p + (z * matrixT[i][k + 2]);
		matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r);
	}
	matrixT[i][k] = matrixT[i][k] - p;
	matrixT[i][k + 1] = matrixT[i][k + 1] - (p * q);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][k + 1] = matrixT[i][k + 1] - (p * q),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:08.056 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:08.057 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:08.058 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int high = matrixT.length - 1,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= org.apache.commons.math3.util.FastMath.min(idx, k + 3); i++) {
	p = (shift.x * matrixT[i][k]) + (shift.y * matrixT[i][k + 1]);
	if (notlast) {
		p = p + (z * matrixT[i][k + 2]);
		matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r);
	}
	matrixT[i][k] = matrixT[i][k] - p;
	matrixT[i][k + 1] = matrixT[i][k + 1] - (p * q);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:10.182 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:10.182 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:10.183 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = (shift.x * matrixP[i][k]) + (shift.y * matrixP[i][k + 1]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int high = matrixT.length - 1,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:12.436 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:12.436 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:12.437 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = p + (z * matrixP[i][k + 2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = (shift.x * matrixP[i][k]) + (shift.y * matrixP[i][k + 1]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:14.762 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:14.762 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:14.763 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = p + (z * matrixP[i][k + 2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:16.734 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:16.734 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:16.735 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (notlast) {
	p = p + (z * matrixP[i][k + 2]);
	matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:18.903 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:18.903 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:18.904 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][k] = matrixP[i][k] - p,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (notlast) {
	p = p + (z * matrixP[i][k + 2]);
	matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:20.961 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:20.962 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:20.963 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][k + 1] = matrixP[i][k + 1] - (p * q),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][k] = matrixP[i][k] - p,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:22.880 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:22.881 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:22.881 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= high; i++) {
	p = (shift.x * matrixP[i][k]) + (shift.y * matrixP[i][k + 1]);
	if (notlast) {
		p = p + (z * matrixP[i][k + 2]);
		matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r);
	}
	matrixP[i][k] = matrixP[i][k] - p;
	matrixP[i][k + 1] = matrixP[i][k + 1] - (p * q);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][k + 1] = matrixP[i][k + 1] - (p * q),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:25.116 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:25.117 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:25.118 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
	if (k != m) {
		matrixT[k][k - 1] = (-s) * shift.x;
	} else if (l != m) {
		matrixT[k][k - 1] = -matrixT[k][k - 1];
	}
	p = p + s;
	shift.x = p / s;
	shift.y = q / s;
	double z = r / s;
	q = q / p;
	r = r / p;


	for (int j = k; j < n; j++) {
		p = matrixT[k][j] + (q * matrixT[k + 1][j]);
		if (notlast) {
			p = p + (r * matrixT[k + 2][j]);
			matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z);
		}
		matrixT[k][j] = matrixT[k][j] - (p * shift.x);
		matrixT[k + 1][j] = matrixT[k + 1][j] - (p * shift.y);
	}


	for (int i = 0; i <= org.apache.commons.math3.util.FastMath.min(idx, k + 3); i++) {
		p = (shift.x * matrixT[i][k]) + (shift.y * matrixT[i][k + 1]);
		if (notlast) {
			p = p + (z * matrixT[i][k + 2]);
			matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r);
		}
		matrixT[i][k] = matrixT[i][k] - p;
		matrixT[i][k + 1] = matrixT[i][k + 1] - (p * q);
	}


	final int high = matrixT.length - 1;
	for (int i = 0; i <= high; i++) {
		p = (shift.x * matrixP[i][k]) + (shift.y * matrixP[i][k + 1]);
		if (notlast) {
			p = p + (z * matrixP[i][k + 2]);
			matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r);
		}
		matrixP[i][k] = matrixP[i][k] - p;
		matrixP[i][k + 1] = matrixP[i][k + 1] - (p * q);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= high; i++) {
	p = (shift.x * matrixP[i][k]) + (shift.y * matrixP[i][k + 1]);
	if (notlast) {
		p = p + (z * matrixP[i][k + 2]);
		matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r);
	}
	matrixP[i][k] = matrixP[i][k] - p;
	matrixP[i][k + 1] = matrixP[i][k + 1] - (p * q);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:27.174 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:27.174 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:27.175 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int k = m; k <= (idx - 1); k++) {
	boolean notlast = k != (idx - 1);
	if (k != m) {
		p = matrixT[k][k - 1];
		q = matrixT[k + 1][k - 1];
		r = (notlast) ? matrixT[k + 2][k - 1] : 0.0;
		shift.x = (org.apache.commons.math3.util.FastMath.abs(p) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(r);
		if (!org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
			p = p / shift.x;
			q = q / shift.x;
			r = r / shift.x;
		}
	}
	if (org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
		break;
	}
	double s = org.apache.commons.math3.util.FastMath.sqrt(((p * p) + (q * q)) + (r * r));
	if (org.apache.commons.math3.util.Precision.compareTo(p, 0.0, epsilon) < 0) {
		s = -s;
	}
	if (!org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
		if (k != m) {
			matrixT[k][k - 1] = (-s) * shift.x;
		} else if (l != m) {
			matrixT[k][k - 1] = -matrixT[k][k - 1];
		}
		p = p + s;
		shift.x = p / s;
		shift.y = q / s;
		double z = r / s;
		q = q / p;
		r = r / p;


		for (int j = k; j < n; j++) {
			p = matrixT[k][j] + (q * matrixT[k + 1][j]);
			if (notlast) {
				p = p + (r * matrixT[k + 2][j]);
				matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z);
			}
			matrixT[k][j] = matrixT[k][j] - (p * shift.x);
			matrixT[k + 1][j] = matrixT[k + 1][j] - (p * shift.y);
		}


		for (int i = 0; i <= org.apache.commons.math3.util.FastMath.min(idx, k + 3); i++) {
			p = (shift.x * matrixT[i][k]) + (shift.y * matrixT[i][k + 1]);
			if (notlast) {
				p = p + (z * matrixT[i][k + 2]);
				matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r);
			}
			matrixT[i][k] = matrixT[i][k] - p;
			matrixT[i][k + 1] = matrixT[i][k + 1] - (p * q);
		}


		final int high = matrixT.length - 1;
		for (int i = 0; i <= high; i++) {
			p = (shift.x * matrixP[i][k]) + (shift.y * matrixP[i][k + 1]);
			if (notlast) {
				p = p + (z * matrixP[i][k + 2]);
				matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r);
			}
			matrixP[i][k] = matrixP[i][k] - p;
			matrixP[i][k + 1] = matrixP[i][k + 1] - (p * q);
		}
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
	if (k != m) {
		matrixT[k][k - 1] = (-s) * shift.x;
	} else if (l != m) {
		matrixT[k][k - 1] = -matrixT[k][k - 1];
	}
	p = p + s;
	shift.x = p / s;
	shift.y = q / s;
	double z = r / s;
	q = q / p;
	r = r / p;


	for (int j = k; j < n; j++) {
		p = matrixT[k][j] + (q * matrixT[k + 1][j]);
		if (notlast) {
			p = p + (r * matrixT[k + 2][j]);
			matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z);
		}
		matrixT[k][j] = matrixT[k][j] - (p * shift.x);
		matrixT[k + 1][j] = matrixT[k + 1][j] - (p * shift.y);
	}


	for (int i = 0; i <= org.apache.commons.math3.util.FastMath.min(idx, k + 3); i++) {
		p = (shift.x * matrixT[i][k]) + (shift.y * matrixT[i][k + 1]);
		if (notlast) {
			p = p + (z * matrixT[i][k + 2]);
			matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r);
		}
		matrixT[i][k] = matrixT[i][k] - p;
		matrixT[i][k + 1] = matrixT[i][k + 1] - (p * q);
	}


	final int high = matrixT.length - 1;
	for (int i = 0; i <= high; i++) {
		p = (shift.x * matrixP[i][k]) + (shift.y * matrixP[i][k + 1]);
		if (notlast) {
			p = p + (z * matrixP[i][k + 2]);
			matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r);
		}
		matrixP[i][k] = matrixP[i][k] - p;
		matrixP[i][k + 1] = matrixP[i][k + 1] - (p * q);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:29.131 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:29.132 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:29.133 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][i - 2] = 0.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = m; k <= (idx - 1); k++) {
	boolean notlast = k != (idx - 1);
	if (k != m) {
		p = matrixT[k][k - 1];
		q = matrixT[k + 1][k - 1];
		r = (notlast) ? matrixT[k + 2][k - 1] : 0.0;
		shift.x = (org.apache.commons.math3.util.FastMath.abs(p) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(r);
		if (!org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
			p = p / shift.x;
			q = q / shift.x;
			r = r / shift.x;
		}
	}
	if (org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
		break;
	}
	double s = org.apache.commons.math3.util.FastMath.sqrt(((p * p) + (q * q)) + (r * r));
	if (org.apache.commons.math3.util.Precision.compareTo(p, 0.0, epsilon) < 0) {
		s = -s;
	}
	if (!org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
		if (k != m) {
			matrixT[k][k - 1] = (-s) * shift.x;
		} else if (l != m) {
			matrixT[k][k - 1] = -matrixT[k][k - 1];
		}
		p = p + s;
		shift.x = p / s;
		shift.y = q / s;
		double z = r / s;
		q = q / p;
		r = r / p;


		for (int j = k; j < n; j++) {
			p = matrixT[k][j] + (q * matrixT[k + 1][j]);
			if (notlast) {
				p = p + (r * matrixT[k + 2][j]);
				matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z);
			}
			matrixT[k][j] = matrixT[k][j] - (p * shift.x);
			matrixT[k + 1][j] = matrixT[k + 1][j] - (p * shift.y);
		}


		for (int i = 0; i <= org.apache.commons.math3.util.FastMath.min(idx, k + 3); i++) {
			p = (shift.x * matrixT[i][k]) + (shift.y * matrixT[i][k + 1]);
			if (notlast) {
				p = p + (z * matrixT[i][k + 2]);
				matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r);
			}
			matrixT[i][k] = matrixT[i][k] - p;
			matrixT[i][k + 1] = matrixT[i][k + 1] - (p * q);
		}


		final int high = matrixT.length - 1;
		for (int i = 0; i <= high; i++) {
			p = (shift.x * matrixP[i][k]) + (shift.y * matrixP[i][k + 1]);
			if (notlast) {
				p = p + (z * matrixP[i][k + 2]);
				matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r);
			}
			matrixP[i][k] = matrixP[i][k] - p;
			matrixP[i][k + 1] = matrixP[i][k + 1] - (p * q);
		}
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:31.379 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:31.379 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:31.380 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][i - 3] = 0.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][i - 2] = 0.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:33.482 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:33.482 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:33.483 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (i > (m + 2)) {
	matrixT[i][i - 3] = 0.0;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][i - 3] = 0.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:35.961 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:35.961 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:35.962 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m + 2; i <= idx; i++) {
	matrixT[i][i - 2] = 0.0;
	if (i > (m + 2)) {
		matrixT[i][i - 3] = 0.0;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (i > (m + 2)) {
	matrixT[i][i - 3] = 0.0;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Replaced Math with FastMath.
, ingredientB: Replaced Math with FastMath.

08:58:37.936 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:37.936 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:37.937 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: CBRT_MACH_PREC = org.apache.commons.math3.util.FastMath.cbrt(MACH_PREC),commit: Replaced Math with FastMath.
}, sim: 0.105500
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: MACH_PREC = org.apache.commons.math3.util.FastMath.ulp(1.0),commit: Replaced Math with FastMath.
}, sim: 0.105500
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

08:58:40.324 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:40.325 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:40.325 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.m = m,commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

08:58:42.318 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:42.318 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:42.319 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double t = x.dotProduct(z),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double s = y.dotProduct(y),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

08:58:44.669 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:44.669 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:44.670 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double t = x.dotProduct(z),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:47.053 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:47.053 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:47.054 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
	s = norm;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double q = (p * p) + shift.w,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:49.062 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:49.062 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:49.063 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
	s = norm;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:51.538 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:51.539 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:51.540 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
	s = norm;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = p + z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:53.620 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:53.621 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:53.622 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
	s = norm;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = shift.x / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:55.856 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:55.857 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:55.857 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
	s = norm;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:58:57.903 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:57.903 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:57.904 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
	s = norm;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[i] /= s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:59:00.056 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:00.056 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:00.057 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
	s = norm;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int l = startIdx,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:59:02.110 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:02.110 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:02.111 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
	s = norm;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = idx - 1; j < n; j++) {
	z = matrixT[idx - 1][j];
	matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
	matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
},commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:59:04.374 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:04.374 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:04.375 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
	s = norm;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:59:06.509 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:06.509 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:06.510 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
	s = norm;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = norm,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:59:08.686 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:08.687 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:08.688 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
	s = norm;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

08:59:10.862 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:10.862 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:10.863 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double t = x.dotProduct(z),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:59:12.997 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:12.998 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:12.999 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.FastMath.abs(matrixT[l][l - 1]) < (epsilon * s)) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:59:15.322 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:15.323 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:15.324 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: l--,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:59:17.387 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:17.387 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:17.389 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (l > 0) {
	double s = org.apache.commons.math3.util.FastMath.abs(matrixT[l - 1][l - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[l][l]);
	if (org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
		s = norm;
	}
	if (org.apache.commons.math3.util.FastMath.abs(matrixT[l][l - 1]) < (epsilon * s)) {
		break;
	}
	l--;
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:59:19.630 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:19.631 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:19.632 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return l,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:59:21.824 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:21.824 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:21.825 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.y = shift.w = 0.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:59:24.112 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:24.113 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:24.114 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.y = matrixT[idx - 1][idx - 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:59:26.133 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:26.134 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:26.135 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (l < idx) {
	shift.y = matrixT[idx - 1][idx - 1];
	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

08:59:28.444 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:28.445 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:28.446 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.exShift += shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:59:30.441 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:30.441 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:30.442 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][i] -= shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:59:32.773 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:32.774 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:32.775 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= idx; i++) {
	matrixT[i][i] -= shift.x;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:59:34.756 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:34.757 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:34.758 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = shift.y = 0.75 * s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:59:36.938 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:36.938 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:36.939 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (s * s) + shift.w,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:59:39.092 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:39.092 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:39.093 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = shift.y = shift.w = 0.964,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:59:41.481 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:41.481 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:41.482 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:59:43.407 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:43.408 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:43.408 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][k] = matrixP[i][k] - p,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

08:59:45.493 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:45.494 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:45.494 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = m + 2; i <= idx; i++) {
	matrixT[i][i - 2] = 0.0;
	if (i > (m + 2)) {
		matrixT[i][i - 3] = 0.0;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[ERROR] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:84) - Error at generation 2
java.lang.IllegalArgumentException: Comparison method violates its general contract!
java.lang.IllegalArgumentException: Comparison method violates its general contract!
	at java.util.TimSort.mergeLo(TimSort.java:777)
	at java.util.TimSort.mergeAt(TimSort.java:514)
	at java.util.TimSort.mergeCollapse(TimSort.java:441)
	at java.util.TimSort.sort(TimSort.java:245)
	at java.util.Arrays.sort(Arrays.java:1512)
	at java.util.ArrayList.sort(ArrayList.java:1454)
	at java.util.Collections.sort(Collections.java:175)
	at fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy.getFixIngredient(PurposeBasedSearchStrategy.java:72)
	at fr.inria.astor.core.ingredientbased.IngredientBasedEvolutionaryRepairApproachImpl.createOperatorInstanceForPoint(IngredientBasedEvolutionaryRepairApproachImpl.java:95)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.modifyProgramVariant(EvolutionarySearchEngine.java:264)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.createNewProgramVariant(EvolutionarySearchEngine.java:198)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.processGenerations(EvolutionarySearchEngine.java:146)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:68)
	at fr.inria.main.evolution.AstorMain.run(AstorMain.java:203)
	at fr.inria.main.evolution.AstorMain.execute(AstorMain.java:247)
	at fr.inria.main.evolution.AstorMain.main(AstorMain.java:218)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - Time Repair Loop (s): 1819.185
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:172) - generationsexecuted: 2
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:247) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:257) - End Repair Search: NOT Found solution
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:208) - Time Total(s): 4511.902


Node: 1d288a147ac9



Date: Mon Nov 25 08:59:46 EST 2019

cd /script/jGenProg_Defects4J_Math_32;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-32 \
	-failing org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:purpose \
	-dependencies /script/jGenProg_Defects4J_Math_32/target/classes/:/script/jGenProg_Defects4J_Math_32/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

