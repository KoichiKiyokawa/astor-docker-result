Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO] 07:44:33,920 fr.inria.astor.core.setup.ProjectConfiguration:282 - Version of the JVM used: 1.7.0_181
[INFO] 07:44:33,925 main:381 - Java version of the JDK used to run tests: 1.7.0_181
[INFO] 07:44:33,925 main:382 - The compliance of the JVM is:  7
[INFO] 07:44:33,927 main:660 - command line arguments: [-mode  jgenprog  -location  .  -id  Math-20  -failing  org.apache.commons.math3.optimization.direct.CMAESOptimizerTest  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:purpose  -dependencies  /script/jGenProg_Defects4J_Math_20/target/classes/:/script/jGenProg_Defects4J_Math_20/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO] 07:44:33,931 fr.inria.main.evolution.AstorMain:224 - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:975) - Source folders: [/script/jGenProg_Defects4J_Math_20/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:994) - Source Test folders: [/script/jGenProg_Defects4J_Math_20/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:108) - mode is Purpose
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.resolveTestsToRun(AstorCoreEngine.java:1311) - Test retrieved from classes: 674
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Math_20/./output_astor/AstorMain-Math-20//bin//default from 674 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Math_20/./output_astor/AstorMain-Math-20//bin//default, /script/jGenProg_Defects4J_Math_20/target/classes/, /script/jGenProg_Defects4J_Math_20/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAtan2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest#testGetSigma
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testVectorFunction
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testGaussian
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testStepSizeUnstability
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testSeveralFreeParameters
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testMatrixFunction
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testLinear
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSpecialValues
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.events.EventStateTest#closeEvents
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[21]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[22]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[23]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[24]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[25]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[26]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[47]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[48]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[49]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[50]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[51]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.exception.util.LocalizedFormatsTest#testMessageNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalZero
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testMath221
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloParameters
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloObservations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testSampling
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testGetCovarianceMatrix
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testWave
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testCross
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBuildBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testTetrahedron
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIsometry
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testElliRotated
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testEllipse
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testUnsupportedBoundaries1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testUnsupportedBoundaries2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTwoAxes
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigar
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaNegative
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaDimensionMismatch
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRastrigin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiagonalRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSsDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testMaximize
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testAckley
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigTab
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSphere
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTablet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testDefault
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInterval
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testMultiple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testSinglePoint
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.function.SqrtTest#testDerivativesHighOrder
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testElliRotated
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testEllipse
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTwoAxes
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testProblemDimensionTooSmall
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigar
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRastrigin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSsDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaximize
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigTab
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSphere
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTablet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaxEvaluations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.dfp.DfpTest#testMultiply
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.correlation.CovarianceTest#testInsufficientData
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:4177, fails: 86, GZoltar suspicious 28945, with positive susp 4186
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 4177
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 1000 with susp > 0.1, we consider: 1000
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:898) - Setting up the max to 4941000 milliseconds (4941 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:240) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Math_20/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:68) - building model: /script/jGenProg_Defects4J_Math_20/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:82) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Math_20/target/classes/, /script/jGenProg_Defects4J_Math_20/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:779) - Number of CtTypes created: 617
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 1000
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=105, susp=0.1617491598051576]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=108, susp=0.1617491598051576]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=111, susp=0.1617491598051576]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=112, susp=0.1617491598051576]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem$Model, methodName=value(D)D, lineNumber=150, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=79, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=80, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=81, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=83, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=92, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=93, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=94, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=96, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=addPoint(DD)V, lineNumber=54, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=addPoint(DD)V, lineNumber=55, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=74, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=75, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=76, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=77, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=80, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=target()[D, lineNumber=84, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=88, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=89, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=90, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=91, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=94, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=98, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=101, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=102, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=103, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=104, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=107, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=127, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=128, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=129, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=130, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=132, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=133, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.DummyOptimizer, methodName=doOptimize()Lorg/apache/commons/math3/optimization/PointVectorValuePair;, lineNumber=316, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.DummyOptimizer, methodName=doOptimize()Lorg/apache/commons/math3/optimization/PointVectorValuePair;, lineNumber=319, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getPlus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=119, susp=0.12688648033134406]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getMinus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=126, susp=0.12688648033134406]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.RetryRunner$1, methodName=evaluate()V, lineNumber=77, susp=0.12451456127293807]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=62, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=63, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=65, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=66, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=68, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=71, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=72, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=90, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=95, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=99, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=100, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=134, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=plusFound()Z, lineNumber=140, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=minusFound()Z, lineNumber=147, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.RetryRunner$1, methodName=evaluate()V, lineNumber=70, susp=0.10783277320343841]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.RetryRunner$1, methodName=evaluate()V, lineNumber=72, susp=0.10783277320343841]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 1000,  338
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 338
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 338, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 1.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Math_20/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 4941000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math3.optimization.direct.CMAESOptimizerTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-20
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= purpose
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Math_20/target/classes/:/script/jGenProg_Defects4J_Math_20/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:continuewhenmodelfail= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
08:40:51.775 [main] INFO  org.nd4j.linalg.factory.Nd4jBackend - Loaded [CpuBackend] backend
08:40:53.299 [main] INFO  org.nd4j.nativeblas.NativeOpsHolder - Number of threads used for NativeOps: 6
08:40:54.106 [main] INFO  org.nd4j.nativeblas.Nd4jBlas - Number of threads used for BLAS: 6
08:40:54.113 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Backend used: [CPU]; OS: [Linux]
08:40:54.113 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Cores: [48]; Memory: [3.5GB];
08:40:54.113 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Blas vendor: [MKL]
08:40:54.636 [main] INFO  o.d.m.e.loader.WordVectorSerializer - Projected memory use for model: [3.96 MB]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:40:57.375 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:57.375 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:57.385 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.topDiagonal = new java.util.ArrayList<double[]>(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.abscissae = new java.util.ArrayList<java.lang.Double>(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:40:59.579 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:59.579 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:59.580 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.bottomDiagonal = new java.util.ArrayList<double[]>(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.topDiagonal = new java.util.ArrayList<double[]>(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:01.687 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:01.688 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:01.689 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] y = value[i].clone(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.bottomDiagonal = new java.util.ArrayList<double[]>(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:03.783 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:03.783 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:03.785 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] y = value[i].clone(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:06.361 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:06.362 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:06.363 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: y[j] *= inv,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:08.817 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:08.818 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:08.819 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = 0; j < y.length; ++j) {
	y[j] *= inv;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: y[j] *= inv,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:11.244 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:11.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:11.245 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (i > 1) {
	double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i);
	for (int j = 0; j < y.length; ++j) {
		y[j] *= inv;
	}
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = 0; j < y.length; ++j) {
	y[j] *= inv;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:13.370 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:13.370 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:13.371 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = abscissae.size(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (i > 1) {
	double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i);
	for (int j = 0; j < y.length; ++j) {
		y[j] *= inv;
	}
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:15.997 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:15.998 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:15.999 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bottomDiagonal.add(n - i, y),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = abscissae.size(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:18.457 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:18.457 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:18.458 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] bottom0 = y,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bottomDiagonal.add(n - i, y),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:20.772 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:20.773 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:20.774 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] bottom0 = y,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:22.753 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:22.753 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:22.754 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double inv = 1.0 / (x - abscissae.get(n - (j + 1))),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:24.691 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:24.692 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:24.693 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double inv = 1.0 / (x - abscissae.get(n - (j + 1))),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:41:26.600 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:26.600 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:26.601 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (java.lang.Double.isInfinite(inv)) {
	throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:28.976 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:28.977 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:28.978 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bottom1[k] = inv * (bottom0[k] - bottom1[k]),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (java.lang.Double.isInfinite(inv)) {
	throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:31.431 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:31.432 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:31.433 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int k = 0; k < y.length; ++k) {
	bottom1[k] = inv * (bottom0[k] - bottom1[k]);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bottom1[k] = inv * (bottom0[k] - bottom1[k]),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:33.842 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:33.842 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:33.844 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bottom0 = bottom1,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = 0; k < y.length; ++k) {
	bottom1[k] = inv * (bottom0[k] - bottom1[k]);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:35.973 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:35.973 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:35.974 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = i; j < n; ++j) {
	final double[] bottom1 = bottomDiagonal.get(n - (j + 1));
	final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));
	if (java.lang.Double.isInfinite(inv)) {
		throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
	}
	for (int k = 0; k < y.length; ++k) {
		bottom1[k] = inv * (bottom0[k] - bottom1[k]);
	}
	bottom0 = bottom1;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bottom0 = bottom1,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:38.132 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:38.132 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:38.133 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: topDiagonal.add(bottom0.clone()),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = i; j < n; ++j) {
	final double[] bottom1 = bottomDiagonal.get(n - (j + 1));
	final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));
	if (java.lang.Double.isInfinite(inv)) {
		throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
	}
	for (int k = 0; k < y.length; ++k) {
		bottom1[k] = inv * (bottom0[k] - bottom1[k]);
	}
	bottom0 = bottom1;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:40.292 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:40.292 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:40.293 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: abscissae.add(x),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: topDiagonal.add(bottom0.clone()),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:42.504 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:42.504 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:42.505 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < value.length; ++i) {

	final double[] y = value[i].clone();
	if (i > 1) {
		double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i);
		for (int j = 0; j < y.length; ++j) {
			y[j] *= inv;
		}
	}


	final int n = abscissae.size();
	bottomDiagonal.add(n - i, y);
	double[] bottom0 = y;
	for (int j = i; j < n; ++j) {
		final double[] bottom1 = bottomDiagonal.get(n - (j + 1));
		final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));
		if (java.lang.Double.isInfinite(inv)) {
			throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
		}
		for (int k = 0; k < y.length; ++k) {
			bottom1[k] = inv * (bottom0[k] - bottom1[k]);
		}
		bottom0 = bottom1;
	}


	topDiagonal.add(bottom0.clone());


	abscissae.add(x);

},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: abscissae.add(x),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:44.769 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:44.770 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:44.771 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: checkInterpolation(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < value.length; ++i) {

	final double[] y = value[i].clone();
	if (i > 1) {
		double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i);
		for (int j = 0; j < y.length; ++j) {
			y[j] *= inv;
		}
	}


	final int n = abscissae.size();
	bottomDiagonal.add(n - i, y);
	double[] bottom0 = y;
	for (int j = i; j < n; ++j) {
		final double[] bottom1 = bottomDiagonal.get(n - (j + 1));
		final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));
		if (java.lang.Double.isInfinite(inv)) {
			throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
		}
		for (int k = 0; k < y.length; ++k) {
			bottom1[k] = inv * (bottom0[k] - bottom1[k]);
		}
		bottom0 = bottom1;
	}


	topDiagonal.add(bottom0.clone());


	abscissae.add(x);

},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:46.817 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:46.818 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:46.819 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction zero = polynomial(0),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: checkInterpolation(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:48.918 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:48.918 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:48.919 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[topDiagonal.get(0).length],commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction zero = polynomial(0),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:51.135 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:51.135 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:51.136 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: polynomials[i] = zero,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[topDiagonal.get(0).length],commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:53.158 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:53.158 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:53.160 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < polynomials.length; ++i) {
	polynomials[i] = zero;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: polynomials[i] = zero,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:55.702 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:55.703 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:55.704 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.analysis.polynomials.PolynomialFunction coeff = polynomial(1),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < polynomials.length; ++i) {
	polynomials[i] = zero;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:41:58.119 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:58.120 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:58.122 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] tdi = topDiagonal.get(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.analysis.polynomials.PolynomialFunction coeff = polynomial(1),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:42:00.496 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:00.497 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:00.498 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k]))),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] tdi = topDiagonal.get(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:42:03.024 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:03.024 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:03.025 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int k = 0; k < polynomials.length; ++k) {
	polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k])));
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k]))),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:42:05.596 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:05.597 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:05.598 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: coeff = coeff.multiply(polynomial(-abscissae.get(i), 1.0)),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = 0; k < polynomials.length; ++k) {
	polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k])));
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:42:08.099 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:08.100 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:08.101 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] tdi = topDiagonal.get(i);
	for (int k = 0; k < polynomials.length; ++k) {
		polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k])));
	}
	coeff = coeff.multiply(polynomial(-abscissae.get(i), 1.0));
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: coeff = coeff.multiply(polynomial(-abscissae.get(i), 1.0)),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:42:10.186 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:10.187 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:10.188 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return polynomials,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] tdi = topDiagonal.get(i);
	for (int k = 0; k < polynomials.length; ++k) {
		polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k])));
	}
	coeff = coeff.multiply(polynomial(-abscissae.get(i), 1.0));
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:42:12.634 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:12.635 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:12.636 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] value = new double[topDiagonal.get(0).length],commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return polynomials,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:42:14.756 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:14.757 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:14.758 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double valueCoeff = 1,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] value = new double[topDiagonal.get(0).length],commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:42:17.119 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:17.119 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:17.121 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] dividedDifference = topDiagonal.get(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double valueCoeff = 1,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:42:19.640 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:19.640 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:19.641 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: value[k] += dividedDifference[k] * valueCoeff,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] dividedDifference = topDiagonal.get(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:42:22.111 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:22.112 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:22.113 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int k = 0; k < value.length; ++k) {
	value[k] += dividedDifference[k] * valueCoeff;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: value[k] += dividedDifference[k] * valueCoeff,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:42:24.422 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:24.422 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:24.423 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double deltaX = x - abscissae.get(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = 0; k < value.length; ++k) {
	value[k] += dividedDifference[k] * valueCoeff;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:42:26.461 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:26.461 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:26.462 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: valueCoeff *= deltaX,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double deltaX = x - abscissae.get(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:42:28.936 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:28.936 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:28.938 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] += dividedDifference[k] * valueCoeff;
	}
	final double deltaX = x - abscissae.get(i);
	valueCoeff *= deltaX;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: valueCoeff *= deltaX,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:42:31.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:31.345 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:31.346 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return value,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] += dividedDifference[k] * valueCoeff;
	}
	final double deltaX = x - abscissae.get(i);
	valueCoeff *= deltaX;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:42:33.457 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:33.457 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:33.458 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[topDiagonal.get(0).length],commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return value,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:42:35.910 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:35.911 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:35.912 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: java.util.Arrays.fill(value, x.getField().getZero()),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[topDiagonal.get(0).length],commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:42:38.384 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:38.385 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:38.387 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.analysis.differentiation.DerivativeStructure valueCoeff = x.getField().getOne(),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: java.util.Arrays.fill(value, x.getField().getZero()),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:42:40.580 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:40.581 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:40.582 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k])),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.analysis.differentiation.DerivativeStructure valueCoeff = x.getField().getOne(),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:42:42.780 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:42.781 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:42.782 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int k = 0; k < value.length; ++k) {
	value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
},commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k])),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:42:44.923 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:44.924 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:44.925 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i)),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = 0; k < value.length; ++k) {
	value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
},commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:42:46.970 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:46.970 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:46.972 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: valueCoeff = valueCoeff.multiply(deltaX),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i)),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:42:49.285 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:49.285 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:49.286 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
	}
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i));
	valueCoeff = valueCoeff.multiply(deltaX);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: valueCoeff = valueCoeff.multiply(deltaX),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:42:51.318 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:51.318 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:51.319 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
	}
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i));
	valueCoeff = valueCoeff.multiply(deltaX);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:42:53.267 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:53.268 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:53.269 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (abscissae.isEmpty()) {
	throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:42:55.270 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:55.271 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:55.272 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (abscissae.isEmpty()) {
	throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:42:57.428 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:57.428 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:57.429 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (abscissae.isEmpty()) {
	throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
	}
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i));
	valueCoeff = valueCoeff.multiply(deltaX);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:42:59.557 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:59.557 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:59.558 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (abscissae.isEmpty()) {
	throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:43:01.515 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:01.516 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:01.517 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: "final" keyword.
, ingredientB: "final" keyword.

08:43:03.490 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:03.490 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:03.491 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] h = new double[n],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = x.length - 1,commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: "final" keyword.
, ingredientB: "final" keyword.

08:43:05.550 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:05.550 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:05.551 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] z = new double[n + 1],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] mu = new double[n],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: "final" keyword.
, ingredientB: "final" keyword.

08:43:08.010 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:08.010 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:08.011 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] c = new double[n + 1],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] b = new double[n],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: "final" keyword.
, ingredientB: "final" keyword.

08:43:10.473 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:10.473 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:10.474 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] d = new double[n],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] c = new double[n + 1],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:43:12.977 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:12.978 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:12.979 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
	}
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i));
	valueCoeff = valueCoeff.multiply(deltaX);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (java.lang.Double.isInfinite(inv)) {
	throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:43:15.056 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:15.057 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:15.060 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
	}
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i));
	valueCoeff = valueCoeff.multiply(deltaX);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bottom1[k] = inv * (bottom0[k] - bottom1[k]),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:43:17.386 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:17.387 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:17.388 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
	}
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i));
	valueCoeff = valueCoeff.multiply(deltaX);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bottom0 = bottom1,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:43:19.504 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:19.505 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:19.507 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
	}
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i));
	valueCoeff = valueCoeff.multiply(deltaX);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < value.length; ++i) {

	final double[] y = value[i].clone();
	if (i > 1) {
		double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i);
		for (int j = 0; j < y.length; ++j) {
			y[j] *= inv;
		}
	}


	final int n = abscissae.size();
	bottomDiagonal.add(n - i, y);
	double[] bottom0 = y;
	for (int j = i; j < n; ++j) {
		final double[] bottom1 = bottomDiagonal.get(n - (j + 1));
		final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));
		if (java.lang.Double.isInfinite(inv)) {
			throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
		}
		for (int k = 0; k < y.length; ++k) {
			bottom1[k] = inv * (bottom0[k] - bottom1[k]);
		}
		bottom0 = bottom1;
	}


	topDiagonal.add(bottom0.clone());


	abscissae.add(x);

},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:43:21.968 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:21.968 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:21.969 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
	}
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i));
	valueCoeff = valueCoeff.multiply(deltaX);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k]))),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:43:24.475 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:24.475 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:24.477 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
	}
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i));
	valueCoeff = valueCoeff.multiply(deltaX);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.analysis.differentiation.DerivativeStructure valueCoeff = x.getField().getOne(),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:43:26.654 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:26.654 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:26.655 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
	}
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i));
	valueCoeff = valueCoeff.multiply(deltaX);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: value[k] += dividedDifference[k] * valueCoeff,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:43:28.755 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:28.755 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:28.756 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
	}
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i));
	valueCoeff = valueCoeff.multiply(deltaX);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] += dividedDifference[k] * valueCoeff;
	}
	final double deltaX = x - abscissae.get(i);
	valueCoeff *= deltaX;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:43:30.936 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:30.936 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:30.938 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
	}
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i));
	valueCoeff = valueCoeff.multiply(deltaX);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[topDiagonal.get(0).length],commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:43:33.430 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:33.431 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:33.432 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
	}
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i));
	valueCoeff = valueCoeff.multiply(deltaX);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return value,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: MATH-854 Populate "throws" clause.

08:43:35.701 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:35.702 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:35.703 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: valueCoeff = valueCoeff.multiply(deltaX),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[n],commit: MATH-854 Populate "throws" clause.
}, sim: 0.022312
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:43:38.053 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:38.053 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:38.054 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (abscissae.isEmpty()) {
	throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[topDiagonal.get(0).length],commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:43:40.437 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:40.438 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:40.439 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[topDiagonal.get(0).length],commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:43:42.565 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:42.565 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:42.566 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[topDiagonal.get(0).length],commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:43:44.675 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:44.676 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:44.677 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: java.util.Arrays.fill(value, x.getField().getZero()),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:43:47.142 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:47.143 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:47.144 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.analysis.differentiation.DerivativeStructure valueCoeff = x.getField().getOne(),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:43:49.637 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:49.638 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:49.639 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k])),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:43:52.139 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:52.139 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:52.140 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = 0; k < value.length; ++k) {
	value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
},commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:43:54.616 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:54.616 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:54.617 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i)),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:43:56.698 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:56.698 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:56.699 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (java.lang.Double.isInfinite(inv)) {
	throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: y[j] *= inv,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:43:59.113 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:59.113 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:59.114 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (java.lang.Double.isInfinite(inv)) {
	throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] bottom0 = y,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:44:01.122 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:01.122 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:01.123 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (java.lang.Double.isInfinite(inv)) {
	throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double inv = 1.0 / (x - abscissae.get(n - (j + 1))),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:44:03.122 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:03.122 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:03.124 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (java.lang.Double.isInfinite(inv)) {
	throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:44:05.662 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:05.663 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:05.664 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: valueCoeff = valueCoeff.multiply(deltaX),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:44:08.026 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:08.026 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:08.027 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = 0; k < value.length; ++k) {
	value[k] += dividedDifference[k] * valueCoeff;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

08:44:10.524 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:10.524 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:10.526 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[topDiagonal.get(0).length],commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:44:12.998 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:12.999 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:13.000 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return value,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:44:14.940 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:14.940 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:14.941 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (abscissae.isEmpty()) {
	throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:44:16.918 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:16.919 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:16.920 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:45:47.037 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:47.038 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:47.039 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((angle < 1.0E-10) || (angle > (org.apache.commons.math3.util.FastMath.PI - 1.0E-10))) && contains(line.zero),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double angle = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(direction, line.direction),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:45:49.520 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:49.521 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:49.522 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: u = w.orthogonal(),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: origin = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(-originOffset, w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:45:52.024 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:52.025 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:52.026 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: v = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, u),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: u = w.orthogonal(),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:45:54.364 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:54.364 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:54.365 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((angle < 1.0E-10) && (org.apache.commons.math3.util.FastMath.abs(originOffset - plane.originOffset) < 1.0E-10)) || 
((angle > (org.apache.commons.math3.util.FastMath.PI - 1.0E-10)) && (org.apache.commons.math3.util.FastMath.abs(originOffset + plane.originOffset) < 1.0E-10)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double angle = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(w, plane.w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:45:56.593 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:56.593 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:56.594 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = origin.subtract(center),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((angle < 1.0E-10) && (org.apache.commons.math3.util.FastMath.abs(originOffset - plane.originOffset) < 1.0E-10)) || 
((angle > (org.apache.commons.math3.util.FastMath.PI - 1.0E-10)) && (org.apache.commons.math3.util.FastMath.abs(originOffset + plane.originOffset) < 1.0E-10)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:45:59.048 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:59.048 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:59.049 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(center.add(rotation.applyTo(delta)), 
rotation.applyTo(w)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = origin.subtract(center),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:46:01.249 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:01.250 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:01.251 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plane.u = rotation.applyTo(u),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(center.add(rotation.applyTo(delta)), 
rotation.applyTo(w)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:46:03.205 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:03.206 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:03.207 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plane.v = rotation.applyTo(v),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plane.u = rotation.applyTo(u),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:46:05.204 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:05.204 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:05.205 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return plane,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plane.v = rotation.applyTo(v),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:46:07.459 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:07.459 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:07.460 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(origin.add(translation), w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return plane,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:46:09.512 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:09.512 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:09.513 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plane.u = u,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(origin.add(translation), w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:46:11.617 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:11.617 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:11.618 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plane.v = v,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plane.u = u,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:46:13.836 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:13.836 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:13.837 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (direction.getNorm() < 1.0E-10) {
	return null;
},commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:46:15.841 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:15.841 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:15.842 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D point = org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(this, other, new org.apache.commons.math3.geometry.euclidean.threed.Plane(direction)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (direction.getNorm() < 1.0E-10) {
	return null;
},commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:46:17.795 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:17.795 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:17.796 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.euclidean.threed.Line(point, point.add(direction)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D point = org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(this, other, new org.apache.commons.math3.geometry.euclidean.threed.Plane(direction)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:46:19.738 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:19.738 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:19.739 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMax, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMin, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:46:21.837 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:21.837 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:21.838 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMin, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMax, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:46:24.172 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:24.172 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:24.173 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMax, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMin, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:46:26.320 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:26.320 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:26.321 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMin), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMax, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:46:28.801 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:28.802 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:28.803 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMax), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMin), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:46:31.370 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:31.371 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:31.372 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> boundary = 
new org.apache.commons.math3.geometry.partitioning.RegionFactory<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>().buildConvex(pxMin, pxMax, pyMin, pyMax, pzMin, pzMax),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMax), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:46:33.867 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:33.868 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:33.869 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return boundary.getTree(false),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> boundary = 
new org.apache.commons.math3.geometry.partitioning.RegionFactory<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>().buildConvex(pxMin, pxMax, pyMin, pyMax, pzMin, pzMax),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Populate throws declarations for geometry package.

08:46:36.305 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:36.306 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:36.307 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP10 = tPlane.toSubSpace(apply(p10)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP00 = tPlane.toSubSpace(apply(p00)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Populate throws declarations for geometry package.

08:46:38.612 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:38.612 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:38.614 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP10 = tPlane.toSubSpace(apply(p10)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:46:41.052 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:41.053 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:41.054 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q0 = quat[0],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:46:43.342 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:43.343 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:43.344 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q1 = quat[1],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q0 = quat[0],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:46:45.314 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:45.314 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:45.315 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q2 = quat[2],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q1 = quat[1],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:46:47.246 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:47.246 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:47.247 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = quat[3],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q2 = quat[2],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:46:49.170 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:49.170 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:49.171 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q3 = quat[3],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:46:51.405 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:51.405 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:51.406 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: u2 = u3.crossProduct(u1).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:46:53.779 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:53.780 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:53.781 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: u1 = u1.normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: u2 = u3.crossProduct(u1).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:46:56.045 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:56.046 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:56.047 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: u1 = u1.normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:46:58.490 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:58.491 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:58.492 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: v2 = v3.crossProduct(v1).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:47:01.013 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:01.013 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:01.014 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: v1 = v1.normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: v2 = v3.crossProduct(v1).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:47:03.158 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:03.158 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:03.159 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: v1 = v1.normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:47:05.600 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:05.601 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:05.602 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(m),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:47:08.146 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:08.147 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:08.148 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:47:10.632 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:10.632 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:10.633 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r3 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA3(), alpha3),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:47:13.227 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:13.227 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:13.228 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation composed = r1.applyTo(r2.applyTo(r3)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r3 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA3(), alpha3),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:47:15.692 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:15.692 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:15.693 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q0 = composed.q0,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation composed = r1.applyTo(r2.applyTo(r3)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:47:17.747 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:17.747 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:17.748 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q1 = composed.q1,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q0 = composed.q0,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:47:20.246 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:20.247 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:20.248 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q2 = composed.q2,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q1 = composed.q1,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

08:47:22.262 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:22.263 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:22.264 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = composed.q3,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q2 = composed.q2,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

08:47:24.198 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:24.198 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:24.199 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q3 = composed.q3,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:47:26.124 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:26.124 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:26.125 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = (ort[0][0] + ort[1][1]) + ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:47:28.065 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:28.066 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:28.066 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = (ort[0][0] + ort[1][1]) + ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:47:30.520 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:30.520 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:30.522 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[0] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:47:32.985 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:32.985 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:32.986 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:47:35.519 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:35.519 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:35.520 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = inv * (ort[2][0] - ort[0][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[1] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:47:38.058 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:38.058 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:38.059 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = inv * (ort[0][1] - ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[2] = inv * (ort[2][0] - ort[0][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:47:40.572 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:40.573 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:40.574 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[0][0] - ort[1][1]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[3] = inv * (ort[0][1] - ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:47:43.052 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:43.053 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:43.054 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (ort[0][0] - ort[1][1]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:47:45.568 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:45.569 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:45.570 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:47:47.826 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:47.826 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:47.828 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:47:50.025 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:50.025 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:50.027 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[0] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:47:52.161 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:52.162 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:52.163 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = inv * (ort[0][2] + ort[2][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[2] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:47:54.111 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:54.111 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:54.112 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[1][1] - ort[0][0]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[3] = inv * (ort[0][2] + ort[2][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:47:56.427 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:56.427 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:56.428 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (ort[1][1] - ort[0][0]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:47:58.468 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:58.468 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:58.469 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:48:00.521 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:00.522 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:00.523 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = inv * (ort[2][0] - ort[0][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:48:03.180 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:03.180 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:03.181 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[0] = inv * (ort[2][0] - ort[0][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:48:05.677 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:05.678 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:05.679 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = inv * (ort[2][1] + ort[1][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[1] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:48:08.287 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:08.287 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:08.288 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[2][2] - ort[0][0]) - ort[1][1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[3] = inv * (ort[2][1] + ort[1][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:48:10.826 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:10.826 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:10.827 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (ort[2][2] - ort[0][0]) - ort[1][1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:48:13.327 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:13.327 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:13.329 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[3],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:48:15.457 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:15.457 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:15.458 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = inv * (ort[0][1] - ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[3],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:48:18.012 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:18.012 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:18.013 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = inv * (ort[0][2] + ort[2][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[0] = inv * (ort[0][1] - ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:48:20.497 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:20.498 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:20.499 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = inv * (ort[2][1] + ort[1][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[1] = inv * (ort[0][2] + ort[2][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:48:22.787 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:22.787 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:22.788 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (s > (-0.19)) {

	quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[2];
	quat[0] = inv * (ort[2][0] - ort[0][2]);
	quat[1] = inv * (ort[0][1] + ort[1][0]);
	quat[3] = inv * (ort[2][1] + ort[1][2]);
} else {

	s = (ort[2][2] - ort[0][0]) - ort[1][1];
	quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[3];
	quat[0] = inv * (ort[0][1] - ort[1][0]);
	quat[1] = inv * (ort[0][2] + ort[2][0]);
	quat[2] = inv * (ort[2][1] + ort[1][2]);
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[2] = inv * (ort[2][1] + ort[1][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:48:24.773 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:24.773 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:24.774 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (s > (-0.19)) {

	quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[1];
	quat[0] = inv * (ort[1][2] - ort[2][1]);
	quat[2] = inv * (ort[0][1] + ort[1][0]);
	quat[3] = inv * (ort[0][2] + ort[2][0]);
} else {
	s = (ort[1][1] - ort[0][0]) - ort[2][2];
	if (s > (-0.19)) {

		quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[2];
		quat[0] = inv * (ort[2][0] - ort[0][2]);
		quat[1] = inv * (ort[0][1] + ort[1][0]);
		quat[3] = inv * (ort[2][1] + ort[1][2]);
	} else {

		s = (ort[2][2] - ort[0][0]) - ort[1][1];
		quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[3];
		quat[0] = inv * (ort[0][1] - ort[1][0]);
		quat[1] = inv * (ort[0][2] + ort[2][0]);
		quat[2] = inv * (ort[2][1] + ort[1][2]);
	}
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (s > (-0.19)) {

	quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[2];
	quat[0] = inv * (ort[2][0] - ort[0][2]);
	quat[1] = inv * (ort[0][1] + ort[1][0]);
	quat[3] = inv * (ort[2][1] + ort[1][2]);
} else {

	s = (ort[2][2] - ort[0][0]) - ort[1][1];
	quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[3];
	quat[0] = inv * (ort[0][1] - ort[1][0]);
	quat[1] = inv * (ort[0][2] + ort[2][0]);
	quat[2] = inv * (ort[2][1] + ort[1][2]);
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:48:26.717 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:26.717 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:26.718 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (s > (-0.19)) {

	quat[0] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[0];
	quat[1] = inv * (ort[1][2] - ort[2][1]);
	quat[2] = inv * (ort[2][0] - ort[0][2]);
	quat[3] = inv * (ort[0][1] - ort[1][0]);
} else {
	s = (ort[0][0] - ort[1][1]) - ort[2][2];
	if (s > (-0.19)) {

		quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[1];
		quat[0] = inv * (ort[1][2] - ort[2][1]);
		quat[2] = inv * (ort[0][1] + ort[1][0]);
		quat[3] = inv * (ort[0][2] + ort[2][0]);
	} else {
		s = (ort[1][1] - ort[0][0]) - ort[2][2];
		if (s > (-0.19)) {

			quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
			double inv = 0.25 / quat[2];
			quat[0] = inv * (ort[2][0] - ort[0][2]);
			quat[1] = inv * (ort[0][1] + ort[1][0]);
			quat[3] = inv * (ort[2][1] + ort[1][2]);
		} else {

			s = (ort[2][2] - ort[0][0]) - ort[1][1];
			quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
			double inv = 0.25 / quat[3];
			quat[0] = inv * (ort[0][1] - ort[1][0]);
			quat[1] = inv * (ort[0][2] + ort[2][0]);
			quat[2] = inv * (ort[2][1] + ort[1][2]);
		}
	}
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (s > (-0.19)) {

	quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[1];
	quat[0] = inv * (ort[1][2] - ort[2][1]);
	quat[2] = inv * (ort[0][1] + ort[1][0]);
	quat[3] = inv * (ort[0][2] + ort[2][0]);
} else {
	s = (ort[1][1] - ort[0][0]) - ort[2][2];
	if (s > (-0.19)) {

		quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[2];
		quat[0] = inv * (ort[2][0] - ort[0][2]);
		quat[1] = inv * (ort[0][1] + ort[1][0]);
		quat[3] = inv * (ort[2][1] + ort[1][2]);
	} else {

		s = (ort[2][2] - ort[0][0]) - ort[1][1];
		quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[3];
		quat[0] = inv * (ort[0][1] - ort[1][0]);
		quat[1] = inv * (ort[0][2] + ort[2][0]);
		quat[2] = inv * (ort[2][1] + ort[1][2]);
	}
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:48:28.821 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:28.821 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:28.822 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return quat,commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (s > (-0.19)) {

	quat[0] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[0];
	quat[1] = inv * (ort[1][2] - ort[2][1]);
	quat[2] = inv * (ort[2][0] - ort[0][2]);
	quat[3] = inv * (ort[0][1] - ort[1][0]);
} else {
	s = (ort[0][0] - ort[1][1]) - ort[2][2];
	if (s > (-0.19)) {

		quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[1];
		quat[0] = inv * (ort[1][2] - ort[2][1]);
		quat[2] = inv * (ort[0][1] + ort[1][0]);
		quat[3] = inv * (ort[0][2] + ort[2][0]);
	} else {
		s = (ort[1][1] - ort[0][0]) - ort[2][2];
		if (s > (-0.19)) {

			quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
			double inv = 0.25 / quat[2];
			quat[0] = inv * (ort[2][0] - ort[0][2]);
			quat[1] = inv * (ort[0][1] + ort[1][0]);
			quat[3] = inv * (ort[2][1] + ort[1][2]);
		} else {

			s = (ort[2][2] - ort[0][0]) - ort[1][1];
			quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
			double inv = 0.25 / quat[3];
			quat[0] = inv * (ort[0][1] - ort[1][0]);
			quat[1] = inv * (ort[0][2] + ort[2][0]);
			quat[2] = inv * (ort[2][1] + ort[1][2]);
		}
	}
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

08:48:31.378 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:31.379 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:31.380 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r3 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA3(), alpha3),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

08:48:33.478 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:33.478 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:33.479 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

08:48:36.088 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:36.088 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:36.089 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Fixed checkstyle warnings.

08:48:38.587 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:38.587 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:38.588 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = composed.q3,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (s > (-0.19)) {

	quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[2];
	quat[0] = inv * (ort[2][0] - ort[0][2]);
	quat[1] = inv * (ort[0][1] + ort[1][0]);
	quat[3] = inv * (ort[2][1] + ort[1][2]);
} else {

	s = (ort[2][2] - ort[0][0]) - ort[1][1];
	quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[3];
	quat[0] = inv * (ort[0][1] - ort[1][0]);
	quat[1] = inv * (ort[0][2] + ort[2][0]);
	quat[2] = inv * (ort[2][1] + ort[1][2]);
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Fixed checkstyle warnings.

08:48:40.658 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:40.658 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:40.659 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = composed.q3,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (s > (-0.19)) {

	quat[0] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[0];
	quat[1] = inv * (ort[1][2] - ort[2][1]);
	quat[2] = inv * (ort[2][0] - ort[0][2]);
	quat[3] = inv * (ort[0][1] - ort[1][0]);
} else {
	s = (ort[0][0] - ort[1][1]) - ort[2][2];
	if (s > (-0.19)) {

		quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[1];
		quat[0] = inv * (ort[1][2] - ort[2][1]);
		quat[2] = inv * (ort[0][1] + ort[1][0]);
		quat[3] = inv * (ort[0][2] + ort[2][0]);
	} else {
		s = (ort[1][1] - ort[0][0]) - ort[2][2];
		if (s > (-0.19)) {

			quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
			double inv = 0.25 / quat[2];
			quat[0] = inv * (ort[2][0] - ort[0][2]);
			quat[1] = inv * (ort[0][1] + ort[1][0]);
			quat[3] = inv * (ort[2][1] + ort[1][2]);
		} else {

			s = (ort[2][2] - ort[0][0]) - ort[1][1];
			quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
			double inv = 0.25 / quat[3];
			quat[0] = inv * (ort[0][1] - ort[1][0]);
			quat[1] = inv * (ort[0][2] + ort[2][0]);
			quat[2] = inv * (ort[2][1] + ort[1][2]);
		}
	}
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Fixed checkstyle warnings.

08:48:42.621 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:42.621 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:42.622 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = composed.q3,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return quat,commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

08:48:44.647 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:44.648 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:44.649 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = (ort[0][0] + ort[1][1]) + ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

08:48:46.623 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:46.624 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:46.626 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

08:48:49.082 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:49.082 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:49.083 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

08:48:51.640 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:51.641 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:51.642 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

08:48:54.179 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:54.179 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:54.181 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = inv * (ort[2][0] - ort[0][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

08:48:56.736 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:56.736 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:56.737 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = inv * (ort[0][1] - ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

08:48:59.229 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:59.229 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:59.230 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[0][0] - ort[1][1]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

08:49:01.803 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:01.804 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:01.805 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Fixed checkstyle warnings.

08:49:04.312 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:04.312 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:04.313 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Fixed checkstyle warnings.

08:49:06.587 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:06.587 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:06.588 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[0] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Fixed checkstyle warnings.

08:49:08.919 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:08.919 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:08.921 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[3] = inv * (ort[0][2] + ort[2][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Fixed checkstyle warnings.

08:49:11.408 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:11.408 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:11.410 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[0] = inv * (ort[2][0] - ort[0][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Fixed checkstyle warnings.

08:49:13.852 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:13.852 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:13.853 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[2] = inv * (ort[2][1] + ort[1][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Fixed checkstyle warnings.

08:49:15.822 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:15.822 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:15.823 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (s > (-0.19)) {

	quat[0] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[0];
	quat[1] = inv * (ort[1][2] - ort[2][1]);
	quat[2] = inv * (ort[2][0] - ort[0][2]);
	quat[3] = inv * (ort[0][1] - ort[1][0]);
} else {
	s = (ort[0][0] - ort[1][1]) - ort[2][2];
	if (s > (-0.19)) {

		quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[1];
		quat[0] = inv * (ort[1][2] - ort[2][1]);
		quat[2] = inv * (ort[0][1] + ort[1][0]);
		quat[3] = inv * (ort[0][2] + ort[2][0]);
	} else {
		s = (ort[1][1] - ort[0][0]) - ort[2][2];
		if (s > (-0.19)) {

			quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
			double inv = 0.25 / quat[2];
			quat[0] = inv * (ort[2][0] - ort[0][2]);
			quat[1] = inv * (ort[0][1] + ort[1][0]);
			quat[3] = inv * (ort[2][1] + ort[1][2]);
		} else {

			s = (ort[2][2] - ort[0][0]) - ort[1][1];
			quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
			double inv = 0.25 / quat[3];
			quat[0] = inv * (ort[0][1] - ort[1][0]);
			quat[1] = inv * (ort[0][2] + ort[2][0]);
			quat[2] = inv * (ort[2][1] + ort[1][2]);
		}
	}
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Fixed checkstyle warnings.

08:49:18.342 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:18.342 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:18.344 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return quat,commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

08:50:31.341 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:31.342 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:31.343 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler[][] cache = org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers.get(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:50:33.906 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:33.906 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:33.907 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:50:36.177 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:36.178 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:36.179 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (((cache != null) && (cache.length > parameters)) && (cache[parameters].length > order)) {
	if (cache[parameters][order] != null) {

		return cache[parameters][order];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:50:38.101 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:38.101 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:38.102 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (((cache != null) && (cache.length > parameters)) && (cache[parameters].length > order)) {
	if (cache[parameters][order] != null) {

		return cache[parameters][order];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:50:40.057 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:40.057 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:40.058 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (((cache != null) && (cache.length > parameters)) && (cache[parameters].length > order)) {
	if (cache[parameters][order] != null) {

		return cache[parameters][order];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler[][] cache = org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers.get(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:50:42.183 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:42.183 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:42.184 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int maxParameters = org.apache.commons.math3.util.FastMath.max(parameters, cache == null ? 0 : cache.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:50:44.735 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:44.735 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:44.736 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int maxParameters = org.apache.commons.math3.util.FastMath.max(parameters, cache == null ? 0 : cache.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (((cache != null) && (cache.length > parameters)) && (cache[parameters].length > order)) {
	if (cache[parameters][order] != null) {

		return cache[parameters][order];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:50:47.211 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:47.211 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:47.212 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int maxOrder = org.apache.commons.math3.util.FastMath.max(order, cache == null ? 0 : cache[0].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int maxParameters = org.apache.commons.math3.util.FastMath.max(parameters, cache == null ? 0 : cache.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:50:49.502 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:49.503 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:49.504 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int maxOrder = org.apache.commons.math3.util.FastMath.max(order, cache == null ? 0 : cache[0].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:50:51.880 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:51.880 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:51.881 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int maxOrder = org.apache.commons.math3.util.FastMath.max(order, cache == null ? 0 : cache[0].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:50:54.298 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:54.299 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:54.300 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler[][] newCache = new org.apache.commons.math3.analysis.differentiation.DSCompiler[maxParameters + 1][maxOrder + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int maxOrder = org.apache.commons.math3.util.FastMath.max(order, cache == null ? 0 : cache[0].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:50:56.540 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:56.541 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:56.542 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler[][] newCache = new org.apache.commons.math3.analysis.differentiation.DSCompiler[maxParameters + 1][maxOrder + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:50:58.938 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:58.938 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:58.939 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler[][] newCache = new org.apache.commons.math3.analysis.differentiation.DSCompiler[maxParameters + 1][maxOrder + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:51:01.052 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:01.053 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:01.054 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int maxOrder = org.apache.commons.math3.util.FastMath.max(order, cache == null ? 0 : cache[0].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:51:02.980 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:02.980 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:02.981 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:51:05.238 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:05.238 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:05.239 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler[][] newCache = new org.apache.commons.math3.analysis.differentiation.DSCompiler[maxParameters + 1][maxOrder + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:51:07.218 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:07.218 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:07.219 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < cache.length; ++i) {
	java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler[][] newCache = new org.apache.commons.math3.analysis.differentiation.DSCompiler[maxParameters + 1][maxOrder + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:51:09.166 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:09.166 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:09.167 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < cache.length; ++i) {
	java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:51:11.670 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:11.670 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:11.671 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < cache.length; ++i) {
	java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:51:14.177 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:14.178 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:14.179 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (cache != null) {

	for (int i = 0; i < cache.length; ++i) {
		java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler[][] newCache = new org.apache.commons.math3.analysis.differentiation.DSCompiler[maxParameters + 1][maxOrder + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:51:16.836 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:16.836 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:16.837 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (cache != null) {

	for (int i = 0; i < cache.length; ++i) {
		java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:51:19.273 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:19.273 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:19.274 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (cache != null) {

	for (int i = 0; i < cache.length; ++i) {
		java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < cache.length; ++i) {
	java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:51:21.339 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:21.340 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:21.341 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int p = diag - o,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:51:23.958 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:23.958 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:23.959 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int p = diag - o,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:51:26.417 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:26.417 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:26.418 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int p = diag - o,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache != null) {

	for (int i = 0; i < cache.length; ++i) {
		java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:51:28.963 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:28.963 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:28.964 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:51:31.512 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:31.512 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:31.513 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int p = diag - o,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:51:33.480 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:33.480 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:33.481 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:51:35.450 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:35.450 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:35.451 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:51:37.347 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:37.348 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:37.349 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < cache.length; ++i) {
	java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:51:39.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:39.740 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:39.741 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:51:42.080 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:42.080 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:42.082 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:51:44.378 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:44.378 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:44.380 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:51:46.792 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:46.793 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:46.794 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < cache.length; ++i) {
	java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:51:49.276 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:49.277 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:49.278 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:51:51.654 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:51.654 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:51.655 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:51:54.011 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:54.011 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:54.012 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:51:56.077 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:56.078 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:56.079 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (newCache[p][o] == null) {
	final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
	final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
	newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache != null) {

	for (int i = 0; i < cache.length; ++i) {
		java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:51:58.658 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:58.658 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:58.659 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (newCache[p][o] == null) {
	final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
	final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
	newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:52:01.171 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:01.171 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:01.172 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (newCache[p][o] == null) {
	final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
	final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
	newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:52:03.693 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:03.694 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:03.695 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (newCache[p][o] == null) {
	final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
	final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
	newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

08:52:06.194 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:06.195 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:06.196 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
	final int p = diag - o;
	if (newCache[p][o] == null) {
		final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
		final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
		newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache != null) {

	for (int i = 0; i < cache.length; ++i) {
		java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

08:52:08.733 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:08.733 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:08.734 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
	final int p = diag - o;
	if (newCache[p][o] == null) {
		final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
		final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
		newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:52:10.829 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:10.830 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:10.831 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
	final int p = diag - o;
	if (newCache[p][o] == null) {
		final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
		final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
		newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:52:13.343 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:13.343 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:13.345 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
	final int p = diag - o;
	if (newCache[p][o] == null) {
		final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
		final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
		newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

08:52:15.873 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:15.873 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:15.874 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int diag = 0; diag <= (parameters + order); ++diag) {
	for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
		final int p = diag - o;
		if (newCache[p][o] == null) {
			final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
			final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
			newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
		}
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int p = diag - o,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

08:52:18.438 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:18.438 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:18.439 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int diag = 0; diag <= (parameters + order); ++diag) {
	for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
		final int p = diag - o;
		if (newCache[p][o] == null) {
			final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
			final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
			newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
		}
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (newCache[p][o] == null) {
	final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
	final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
	newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:52:20.924 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:20.924 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:20.925 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int diag = 0; diag <= (parameters + order); ++diag) {
	for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
		final int p = diag - o;
		if (newCache[p][o] == null) {
			final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
			final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
			newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
		}
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:52:22.878 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:22.878 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:22.879 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int diag = 0; diag <= (parameters + order); ++diag) {
	for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
		final int p = diag - o;
		if (newCache[p][o] == null) {
			final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
			final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
			newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
		}
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
	final int p = diag - o;
	if (newCache[p][o] == null) {
		final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
		final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
		newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:52:25.325 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:25.326 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:25.327 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers.compareAndSet(cache, newCache),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int p = diag - o,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:52:27.849 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:27.850 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:27.851 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers.compareAndSet(cache, newCache),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:52:30.260 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:30.260 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:30.262 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers.compareAndSet(cache, newCache),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:52:32.698 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:32.699 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:32.700 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers.compareAndSet(cache, newCache),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (newCache[p][o] == null) {
	final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
	final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
	newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:52:34.840 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:34.840 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:34.841 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.parameters = parameters,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return newCache[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:52:36.861 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:36.861 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:36.862 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.order = order,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.parameters = parameters,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:52:38.814 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:38.814 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:38.815 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.sizes = org.apache.commons.math3.analysis.differentiation.DSCompiler.compileSizes(parameters, order, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.order = order,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:52:40.794 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:40.794 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:40.795 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.derivativesIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileDerivativesIndirection(parameters, order, 
valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.sizes = org.apache.commons.math3.analysis.differentiation.DSCompiler.compileSizes(parameters, order, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:52:43.050 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:43.050 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:43.051 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.lowerIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileLowerIndirection(parameters, order, 
valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.derivativesIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileDerivativesIndirection(parameters, order, 
valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:52:45.525 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:45.526 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:45.527 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.multIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileMultiplicationIndirection(parameters, order, 
valueCompiler, derivativeCompiler, lowerIndirection),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.lowerIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileLowerIndirection(parameters, order, 
valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:52:48.003 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:48.003 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:48.004 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.compIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileCompositionIndirection(parameters, order, 
valueCompiler, derivativeCompiler, 
sizes, derivativesIndirection, lowerIndirection),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.multIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileMultiplicationIndirection(parameters, order, 
valueCompiler, derivativeCompiler, lowerIndirection),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:52:50.363 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:50.363 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:50.364 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[][] sizes = new int[parameters + 1][order + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.compIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileCompositionIndirection(parameters, order, 
valueCompiler, derivativeCompiler, 
sizes, derivativesIndirection, lowerIndirection),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:52:52.814 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:52.815 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:52.816 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(sizes[0], 1),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] sizes = new int[parameters + 1][order + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:52:55.277 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:55.277 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:55.278 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(valueCompiler.sizes, 0, sizes, 0, parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.Arrays.fill(sizes[0], 1),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:52:57.821 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:57.821 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:57.822 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: sizes[parameters][0] = 1,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(valueCompiler.sizes, 0, sizes, 0, parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:52:59.907 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:59.907 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:59.909 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: sizes[parameters][0] = 1,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:02.236 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:02.236 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:02.237 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < order; ++i) {
	sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:04.754 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:04.754 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:04.755 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (parameters == 0) {
	java.util.Arrays.fill(sizes[0], 1);
} else {
	java.lang.System.arraycopy(valueCompiler.sizes, 0, sizes, 0, parameters);
	sizes[parameters][0] = 1;
	for (int i = 0; i < order; ++i) {
		sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < order; ++i) {
	sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:07.241 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:07.241 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:07.242 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return sizes,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (parameters == 0) {
	java.util.Arrays.fill(sizes[0], 1);
} else {
	java.lang.System.arraycopy(valueCompiler.sizes, 0, sizes, 0, parameters);
	sizes[parameters][0] = 1;
	for (int i = 0; i < order; ++i) {
		sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:09.595 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:09.596 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:09.597 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new int[1][parameters],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return sizes,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:12.082 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:12.082 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:12.083 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((parameters == 0) || (order == 0)) {
	return new int[1][parameters];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new int[1][parameters],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:14.586 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:14.586 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:14.587 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int vSize = valueCompiler.derivativesIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if ((parameters == 0) || (order == 0)) {
	return new int[1][parameters];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:17.026 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:17.026 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:17.027 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int dSize = derivativeCompiler.derivativesIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int vSize = valueCompiler.derivativesIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:19.054 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:19.054 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:19.055 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[][] derivativesIndirection = new int[vSize + dSize][parameters],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int dSize = derivativeCompiler.derivativesIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:21.541 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:21.541 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:21.542 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(valueCompiler.derivativesIndirection[i], 0, 
derivativesIndirection[i], 0, 
parameters - 1),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] derivativesIndirection = new int[vSize + dSize][parameters],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:24.031 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:24.031 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:24.032 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < vSize; ++i) {

	java.lang.System.arraycopy(valueCompiler.derivativesIndirection[i], 0, 
	derivativesIndirection[i], 0, 
	parameters - 1);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(valueCompiler.derivativesIndirection[i], 0, 
derivativesIndirection[i], 0, 
parameters - 1),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:26.315 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:26.315 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:26.316 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(derivativeCompiler.derivativesIndirection[i], 0, 
derivativesIndirection[vSize + i], 0, 
parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < vSize; ++i) {

	java.lang.System.arraycopy(valueCompiler.derivativesIndirection[i], 0, 
	derivativesIndirection[i], 0, 
	parameters - 1);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:28.374 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:28.374 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:28.375 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivativesIndirection[vSize + i][parameters - 1]++,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(derivativeCompiler.derivativesIndirection[i], 0, 
derivativesIndirection[vSize + i], 0, 
parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:30.807 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:30.808 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:30.809 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dSize; ++i) {


	java.lang.System.arraycopy(derivativeCompiler.derivativesIndirection[i], 0, 
	derivativesIndirection[vSize + i], 0, 
	parameters);


	derivativesIndirection[vSize + i][parameters - 1]++;

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivativesIndirection[vSize + i][parameters - 1]++,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:33.241 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:33.241 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:33.242 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return derivativesIndirection,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < dSize; ++i) {


	java.lang.System.arraycopy(derivativeCompiler.derivativesIndirection[i], 0, 
	derivativesIndirection[vSize + i], 0, 
	parameters);


	derivativesIndirection[vSize + i][parameters - 1]++;

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:35.408 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:35.408 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:35.409 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new int[]{ 0 },commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return derivativesIndirection,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:37.824 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:37.825 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:37.826 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((parameters == 0) || (order <= 1)) {
	return new int[]{ 0 };
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new int[]{ 0 },commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:40.299 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:40.299 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:40.300 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int vSize = valueCompiler.lowerIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if ((parameters == 0) || (order <= 1)) {
	return new int[]{ 0 };
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:42.987 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:42.987 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:42.988 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int dSize = derivativeCompiler.lowerIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int vSize = valueCompiler.lowerIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:45.442 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:45.442 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:45.443 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[] lowerIndirection = new int[vSize + dSize],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int dSize = derivativeCompiler.lowerIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:47.899 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:47.900 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:47.901 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(valueCompiler.lowerIndirection, 0, lowerIndirection, 0, vSize),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[] lowerIndirection = new int[vSize + dSize],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:50.346 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:50.346 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:50.348 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: lowerIndirection[vSize + i] = valueCompiler.getSize() + derivativeCompiler.lowerIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(valueCompiler.lowerIndirection, 0, lowerIndirection, 0, vSize),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:52.818 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:52.818 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:52.819 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dSize; ++i) {
	lowerIndirection[vSize + i] = valueCompiler.getSize() + derivativeCompiler.lowerIndirection[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: lowerIndirection[vSize + i] = valueCompiler.getSize() + derivativeCompiler.lowerIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:54.892 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:54.892 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:54.893 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return lowerIndirection,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < dSize; ++i) {
	lowerIndirection[vSize + i] = valueCompiler.getSize() + derivativeCompiler.lowerIndirection[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:57.187 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:57.187 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:57.188 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new int[][][]{ new int[][]{ new int[]{ 1, 0, 0 } } },commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return lowerIndirection,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:53:59.260 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:59.260 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:59.261 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((parameters == 0) || (order == 0)) {
	return new int[][][]{ new int[][]{ new int[]{ 1, 0, 0 } } };
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new int[][][]{ new int[][]{ new int[]{ 1, 0, 0 } } },commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:01.580 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:01.580 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:01.581 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int vSize = valueCompiler.multIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if ((parameters == 0) || (order == 0)) {
	return new int[][][]{ new int[][]{ new int[]{ 1, 0, 0 } } };
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:04.032 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:04.032 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:04.033 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int dSize = derivativeCompiler.multIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int vSize = valueCompiler.multIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:06.342 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:06.343 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:06.344 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[][][] multIndirection = new int[vSize + dSize][][],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int dSize = derivativeCompiler.multIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:08.407 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:08.407 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:08.408 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(valueCompiler.multIndirection, 0, multIndirection, 0, vSize),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][][] multIndirection = new int[vSize + dSize][][],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:10.742 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:10.742 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:10.743 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[][] dRow = derivativeCompiler.multIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(valueCompiler.multIndirection, 0, multIndirection, 0, vSize),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:12.978 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:12.978 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:12.979 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.List<int[]> row = new java.util.ArrayList<int[]>(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] dRow = derivativeCompiler.multIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:14.903 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:14.904 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:14.905 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: row.add(new int[]{ dRow[j][0], lowerIndirection[dRow[j][1]], vSize + dRow[j][2] }),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.List<int[]> row = new java.util.ArrayList<int[]>(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:16.939 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:16.939 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:16.940 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: row.add(new int[]{ dRow[j][0], vSize + dRow[j][1], lowerIndirection[dRow[j][2]] }),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: row.add(new int[]{ dRow[j][0], lowerIndirection[dRow[j][1]], vSize + dRow[j][2] }),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:19.310 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:19.310 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:19.311 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int j = 0; j < dRow.length; ++j) {
	row.add(new int[]{ dRow[j][0], lowerIndirection[dRow[j][1]], vSize + dRow[j][2] });
	row.add(new int[]{ dRow[j][0], vSize + dRow[j][1], lowerIndirection[dRow[j][2]] });
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: row.add(new int[]{ dRow[j][0], vSize + dRow[j][1], lowerIndirection[dRow[j][2]] }),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:21.330 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:21.330 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:21.331 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final java.util.List<int[]> combined = new java.util.ArrayList<int[]>(row.size()),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < dRow.length; ++j) {
	row.add(new int[]{ dRow[j][0], lowerIndirection[dRow[j][1]], vSize + dRow[j][2] });
	row.add(new int[]{ dRow[j][0], vSize + dRow[j][1], lowerIndirection[dRow[j][2]] });
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:23.940 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:23.940 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:23.941 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[] termJ = row.get(j),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final java.util.List<int[]> combined = new java.util.ArrayList<int[]>(row.size()),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:26.311 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:26.311 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:26.312 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[] termK = row.get(k),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[] termJ = row.get(j),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:28.453 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:28.454 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:28.455 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: termJ[0] += termK[0],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[] termK = row.get(k),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:30.783 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:30.783 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:30.784 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: termK[0] = 0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: termJ[0] += termK[0],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:32.775 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:32.776 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:32.777 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((termJ[1] == termK[1]) && (termJ[2] == termK[2])) {

	termJ[0] += termK[0];

	termK[0] = 0;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: termK[0] = 0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:34.993 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:34.993 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:34.994 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = j + 1; k < row.size(); ++k) {
	final int[] termK = row.get(k);
	if ((termJ[1] == termK[1]) && (termJ[2] == termK[2])) {

		termJ[0] += termK[0];

		termK[0] = 0;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if ((termJ[1] == termK[1]) && (termJ[2] == termK[2])) {

	termJ[0] += termK[0];

	termK[0] = 0;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:37.031 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:37.031 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:37.032 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: combined.add(termJ),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = j + 1; k < row.size(); ++k) {
	final int[] termK = row.get(k);
	if ((termJ[1] == termK[1]) && (termJ[2] == termK[2])) {

		termJ[0] += termK[0];

		termK[0] = 0;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:39.069 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:39.069 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:39.070 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (termJ[0] > 0) {
	for (int k = j + 1; k < row.size(); ++k) {
		final int[] termK = row.get(k);
		if ((termJ[1] == termK[1]) && (termJ[2] == termK[2])) {

			termJ[0] += termK[0];

			termK[0] = 0;
		}
	}
	combined.add(termJ);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: combined.add(termJ),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:41.267 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:41.268 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:41.269 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int j = 0; j < row.size(); ++j) {
	final int[] termJ = row.get(j);
	if (termJ[0] > 0) {
		for (int k = j + 1; k < row.size(); ++k) {
			final int[] termK = row.get(k);
			if ((termJ[1] == termK[1]) && (termJ[2] == termK[2])) {

				termJ[0] += termK[0];

				termK[0] = 0;
			}
		}
		combined.add(termJ);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (termJ[0] > 0) {
	for (int k = j + 1; k < row.size(); ++k) {
		final int[] termK = row.get(k);
		if ((termJ[1] == termK[1]) && (termJ[2] == termK[2])) {

			termJ[0] += termK[0];

			termK[0] = 0;
		}
	}
	combined.add(termJ);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:43.520 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:43.520 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:43.522 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: multIndirection[vSize + i] = combined.toArray(new int[combined.size()][]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < row.size(); ++j) {
	final int[] termJ = row.get(j);
	if (termJ[0] > 0) {
		for (int k = j + 1; k < row.size(); ++k) {
			final int[] termK = row.get(k);
			if ((termJ[1] == termK[1]) && (termJ[2] == termK[2])) {

				termJ[0] += termK[0];

				termK[0] = 0;
			}
		}
		combined.add(termJ);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:45.935 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:45.936 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:45.937 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dSize; ++i) {
	final int[][] dRow = derivativeCompiler.multIndirection[i];
	java.util.List<int[]> row = new java.util.ArrayList<int[]>();
	for (int j = 0; j < dRow.length; ++j) {
		row.add(new int[]{ dRow[j][0], lowerIndirection[dRow[j][1]], vSize + dRow[j][2] });
		row.add(new int[]{ dRow[j][0], vSize + dRow[j][1], lowerIndirection[dRow[j][2]] });
	}


	final java.util.List<int[]> combined = new java.util.ArrayList<int[]>(row.size());
	for (int j = 0; j < row.size(); ++j) {
		final int[] termJ = row.get(j);
		if (termJ[0] > 0) {
			for (int k = j + 1; k < row.size(); ++k) {
				final int[] termK = row.get(k);
				if ((termJ[1] == termK[1]) && (termJ[2] == termK[2])) {

					termJ[0] += termK[0];

					termK[0] = 0;
				}
			}
			combined.add(termJ);
		}
	}

	multIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multIndirection[vSize + i] = combined.toArray(new int[combined.size()][]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:48.285 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:48.286 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:48.287 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return multIndirection,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < dSize; ++i) {
	final int[][] dRow = derivativeCompiler.multIndirection[i];
	java.util.List<int[]> row = new java.util.ArrayList<int[]>();
	for (int j = 0; j < dRow.length; ++j) {
		row.add(new int[]{ dRow[j][0], lowerIndirection[dRow[j][1]], vSize + dRow[j][2] });
		row.add(new int[]{ dRow[j][0], vSize + dRow[j][1], lowerIndirection[dRow[j][2]] });
	}


	final java.util.List<int[]> combined = new java.util.ArrayList<int[]>(row.size());
	for (int j = 0; j < row.size(); ++j) {
		final int[] termJ = row.get(j);
		if (termJ[0] > 0) {
			for (int k = j + 1; k < row.size(); ++k) {
				final int[] termK = row.get(k);
				if ((termJ[1] == termK[1]) && (termJ[2] == termK[2])) {

					termJ[0] += termK[0];

					termK[0] = 0;
				}
			}
			combined.add(termJ);
		}
	}

	multIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:50.717 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:50.718 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:50.719 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new int[][][]{ new int[][]{ new int[]{ 1, 0 } } },commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return multIndirection,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:52.623 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:52.624 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:52.625 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((parameters == 0) || (order == 0)) {
	return new int[][][]{ new int[][]{ new int[]{ 1, 0 } } };
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new int[][][]{ new int[][]{ new int[]{ 1, 0 } } },commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:54.711 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:54.711 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:54.712 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int vSize = valueCompiler.compIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if ((parameters == 0) || (order == 0)) {
	return new int[][][]{ new int[][]{ new int[]{ 1, 0 } } };
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:57.099 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:57.099 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:57.100 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int dSize = derivativeCompiler.compIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int vSize = valueCompiler.compIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:54:59.596 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:59.596 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:59.597 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[][][] compIndirection = new int[vSize + dSize][][],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int dSize = derivativeCompiler.compIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:02.088 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:02.089 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:02.090 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(valueCompiler.compIndirection, 0, compIndirection, 0, vSize),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][][] compIndirection = new int[vSize + dSize][][],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:04.540 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:04.541 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:04.542 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: int[] derivedTermF = new int[term.length + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(valueCompiler.compIndirection, 0, compIndirection, 0, vSize),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:06.885 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:06.886 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:06.887 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivedTermF[0] = term[0],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: int[] derivedTermF = new int[term.length + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:08.809 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:08.809 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:08.810 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivedTermF[1] = term[1] + 1,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivedTermF[0] = term[0],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:10.774 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:10.774 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:10.775 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: int[] orders = new int[parameters],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivedTermF[1] = term[1] + 1,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:12.842 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:12.842 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:12.843 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: orders[parameters - 1] = 1,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: int[] orders = new int[parameters],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:14.966 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:14.966 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:14.967 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivedTermF[term.length] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: orders[parameters - 1] = 1,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:17.429 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:17.430 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:17.431 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivedTermF[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
derivativeCompiler.derivativesIndirection, 
parameters, order, sizes),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivedTermF[term.length] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:19.831 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:19.831 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:19.833 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int j = 2; j < term.length; ++j) {


	derivedTermF[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
	derivativeCompiler.derivativesIndirection, 
	parameters, order, sizes);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivedTermF[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
derivativeCompiler.derivativesIndirection, 
parameters, order, sizes),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:22.128 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:22.128 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:22.129 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.sort(derivedTermF, 2, derivedTermF.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 2; j < term.length; ++j) {


	derivedTermF[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
	derivativeCompiler.derivativesIndirection, 
	parameters, order, sizes);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:24.199 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:24.199 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:24.200 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: row.add(derivedTermF),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.Arrays.sort(derivedTermF, 2, derivedTermF.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:26.832 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:26.833 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:26.834 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: int[] derivedTermG = new int[term.length],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: row.add(derivedTermF),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:29.288 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:29.288 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:29.289 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivedTermG[0] = term[0],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: int[] derivedTermG = new int[term.length],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:31.696 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:31.697 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:31.698 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivedTermG[1] = term[1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivedTermG[0] = term[0],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:34.151 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:34.151 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:34.152 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
derivativeCompiler.derivativesIndirection, 
parameters, order, sizes),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivedTermG[1] = term[1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:36.608 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:36.609 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:36.610 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
derivativeCompiler.derivativesIndirection, 
parameters, order, sizes),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:39.141 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:39.141 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:39.142 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: orders[parameters - 1]++,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:41.343 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:41.343 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:41.344 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: orders[parameters - 1]++,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:43.609 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:43.609 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:43.610 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (j == l) {

	java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);
	orders[parameters - 1]++;
	derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:46.161 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:46.161 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:46.162 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int j = 2; j < term.length; ++j) {


	derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
	derivativeCompiler.derivativesIndirection, 
	parameters, order, sizes);
	if (j == l) {

		java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);
		orders[parameters - 1]++;
		derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (j == l) {

	java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);
	orders[parameters - 1]++;
	derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:48.680 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:48.680 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:48.681 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.sort(derivedTermG, 2, derivedTermG.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 2; j < term.length; ++j) {


	derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
	derivativeCompiler.derivativesIndirection, 
	parameters, order, sizes);
	if (j == l) {

		java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);
		orders[parameters - 1]++;
		derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:51.167 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:51.167 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:51.168 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: row.add(derivedTermG),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.Arrays.sort(derivedTermG, 2, derivedTermG.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:53.691 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:53.691 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:53.692 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int l = 2; l < term.length; ++l) {
	int[] derivedTermG = new int[term.length];
	derivedTermG[0] = term[0];
	derivedTermG[1] = term[1];
	for (int j = 2; j < term.length; ++j) {


		derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
		derivativeCompiler.derivativesIndirection, 
		parameters, order, sizes);
		if (j == l) {

			java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);
			orders[parameters - 1]++;
			derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
		}
	}
	java.util.Arrays.sort(derivedTermG, 2, derivedTermG.length);
	row.add(derivedTermG);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: row.add(derivedTermG),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:55.766 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:55.766 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:55.767 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int[] term : derivativeCompiler.compIndirection[i]) {




	int[] derivedTermF = new int[term.length + 1];
	derivedTermF[0] = term[0];
	derivedTermF[1] = term[1] + 1;
	int[] orders = new int[parameters];
	orders[parameters - 1] = 1;
	derivedTermF[term.length] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
	for (int j = 2; j < term.length; ++j) {


		derivedTermF[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
		derivativeCompiler.derivativesIndirection, 
		parameters, order, sizes);
	}
	java.util.Arrays.sort(derivedTermF, 2, derivedTermF.length);
	row.add(derivedTermF);


	for (int l = 2; l < term.length; ++l) {
		int[] derivedTermG = new int[term.length];
		derivedTermG[0] = term[0];
		derivedTermG[1] = term[1];
		for (int j = 2; j < term.length; ++j) {


			derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
			derivativeCompiler.derivativesIndirection, 
			parameters, order, sizes);
			if (j == l) {

				java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);
				orders[parameters - 1]++;
				derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
			}
		}
		java.util.Arrays.sort(derivedTermG, 2, derivedTermG.length);
		row.add(derivedTermG);
	}

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int l = 2; l < term.length; ++l) {
	int[] derivedTermG = new int[term.length];
	derivedTermG[0] = term[0];
	derivedTermG[1] = term[1];
	for (int j = 2; j < term.length; ++j) {


		derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
		derivativeCompiler.derivativesIndirection, 
		parameters, order, sizes);
		if (j == l) {

			java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);
			orders[parameters - 1]++;
			derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
		}
	}
	java.util.Arrays.sort(derivedTermG, 2, derivedTermG.length);
	row.add(derivedTermG);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:55:58.177 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:55:58.178 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:55:58.179 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: boolean equals = termJ.length == termK.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int[] term : derivativeCompiler.compIndirection[i]) {




	int[] derivedTermF = new int[term.length + 1];
	derivedTermF[0] = term[0];
	derivedTermF[1] = term[1] + 1;
	int[] orders = new int[parameters];
	orders[parameters - 1] = 1;
	derivedTermF[term.length] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
	for (int j = 2; j < term.length; ++j) {


		derivedTermF[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
		derivativeCompiler.derivativesIndirection, 
		parameters, order, sizes);
	}
	java.util.Arrays.sort(derivedTermF, 2, derivedTermF.length);
	row.add(derivedTermF);


	for (int l = 2; l < term.length; ++l) {
		int[] derivedTermG = new int[term.length];
		derivedTermG[0] = term[0];
		derivedTermG[1] = term[1];
		for (int j = 2; j < term.length; ++j) {


			derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
			derivativeCompiler.derivativesIndirection, 
			parameters, order, sizes);
			if (j == l) {

				java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);
				orders[parameters - 1]++;
				derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
			}
		}
		java.util.Arrays.sort(derivedTermG, 2, derivedTermG.length);
		row.add(derivedTermG);
	}

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:00.642 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:00.642 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:00.644 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: equals &= termJ[l] == termK[l],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: boolean equals = termJ.length == termK.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:02.702 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:02.702 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:02.704 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int l = 1; equals && (l < termJ.length); ++l) {
	equals &= termJ[l] == termK[l];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: equals &= termJ[l] == termK[l],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:05.039 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:05.040 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:05.040 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (equals) {

	termJ[0] += termK[0];

	termK[0] = 0;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int l = 1; equals && (l < termJ.length); ++l) {
	equals &= termJ[l] == termK[l];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:07.241 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:07.241 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:07.242 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = j + 1; k < row.size(); ++k) {
	final int[] termK = row.get(k);
	boolean equals = termJ.length == termK.length;
	for (int l = 1; equals && (l < termJ.length); ++l) {
		equals &= termJ[l] == termK[l];
	}
	if (equals) {

		termJ[0] += termK[0];

		termK[0] = 0;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (equals) {

	termJ[0] += termK[0];

	termK[0] = 0;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:09.751 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:09.752 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:09.753 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (termJ[0] > 0) {
	for (int k = j + 1; k < row.size(); ++k) {
		final int[] termK = row.get(k);
		boolean equals = termJ.length == termK.length;
		for (int l = 1; equals && (l < termJ.length); ++l) {
			equals &= termJ[l] == termK[l];
		}
		if (equals) {

			termJ[0] += termK[0];

			termK[0] = 0;
		}
	}
	combined.add(termJ);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = j + 1; k < row.size(); ++k) {
	final int[] termK = row.get(k);
	boolean equals = termJ.length == termK.length;
	for (int l = 1; equals && (l < termJ.length); ++l) {
		equals &= termJ[l] == termK[l];
	}
	if (equals) {

		termJ[0] += termK[0];

		termK[0] = 0;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:12.248 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:12.249 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:12.250 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int j = 0; j < row.size(); ++j) {
	final int[] termJ = row.get(j);
	if (termJ[0] > 0) {
		for (int k = j + 1; k < row.size(); ++k) {
			final int[] termK = row.get(k);
			boolean equals = termJ.length == termK.length;
			for (int l = 1; equals && (l < termJ.length); ++l) {
				equals &= termJ[l] == termK[l];
			}
			if (equals) {

				termJ[0] += termK[0];

				termK[0] = 0;
			}
		}
		combined.add(termJ);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (termJ[0] > 0) {
	for (int k = j + 1; k < row.size(); ++k) {
		final int[] termK = row.get(k);
		boolean equals = termJ.length == termK.length;
		for (int l = 1; equals && (l < termJ.length); ++l) {
			equals &= termJ[l] == termK[l];
		}
		if (equals) {

			termJ[0] += termK[0];

			termK[0] = 0;
		}
	}
	combined.add(termJ);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:14.361 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:14.361 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:14.362 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compIndirection[vSize + i] = combined.toArray(new int[combined.size()][]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < row.size(); ++j) {
	final int[] termJ = row.get(j);
	if (termJ[0] > 0) {
		for (int k = j + 1; k < row.size(); ++k) {
			final int[] termK = row.get(k);
			boolean equals = termJ.length == termK.length;
			for (int l = 1; equals && (l < termJ.length); ++l) {
				equals &= termJ[l] == termK[l];
			}
			if (equals) {

				termJ[0] += termK[0];

				termK[0] = 0;
			}
		}
		combined.add(termJ);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:16.745 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:16.745 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:16.746 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dSize; ++i) {
	java.util.List<int[]> row = new java.util.ArrayList<int[]>();
	for (int[] term : derivativeCompiler.compIndirection[i]) {




		int[] derivedTermF = new int[term.length + 1];
		derivedTermF[0] = term[0];
		derivedTermF[1] = term[1] + 1;
		int[] orders = new int[parameters];
		orders[parameters - 1] = 1;
		derivedTermF[term.length] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
		for (int j = 2; j < term.length; ++j) {


			derivedTermF[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
			derivativeCompiler.derivativesIndirection, 
			parameters, order, sizes);
		}
		java.util.Arrays.sort(derivedTermF, 2, derivedTermF.length);
		row.add(derivedTermF);


		for (int l = 2; l < term.length; ++l) {
			int[] derivedTermG = new int[term.length];
			derivedTermG[0] = term[0];
			derivedTermG[1] = term[1];
			for (int j = 2; j < term.length; ++j) {


				derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
				derivativeCompiler.derivativesIndirection, 
				parameters, order, sizes);
				if (j == l) {

					java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);
					orders[parameters - 1]++;
					derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
				}
			}
			java.util.Arrays.sort(derivedTermG, 2, derivedTermG.length);
			row.add(derivedTermG);
		}

	}


	final java.util.List<int[]> combined = new java.util.ArrayList<int[]>(row.size());
	for (int j = 0; j < row.size(); ++j) {
		final int[] termJ = row.get(j);
		if (termJ[0] > 0) {
			for (int k = j + 1; k < row.size(); ++k) {
				final int[] termK = row.get(k);
				boolean equals = termJ.length == termK.length;
				for (int l = 1; equals && (l < termJ.length); ++l) {
					equals &= termJ[l] == termK[l];
				}
				if (equals) {

					termJ[0] += termK[0];

					termK[0] = 0;
				}
			}
			combined.add(termJ);
		}
	}

	compIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compIndirection[vSize + i] = combined.toArray(new int[combined.size()][]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:18.679 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:18.679 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:18.680 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compIndirection,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < dSize; ++i) {
	java.util.List<int[]> row = new java.util.ArrayList<int[]>();
	for (int[] term : derivativeCompiler.compIndirection[i]) {




		int[] derivedTermF = new int[term.length + 1];
		derivedTermF[0] = term[0];
		derivedTermF[1] = term[1] + 1;
		int[] orders = new int[parameters];
		orders[parameters - 1] = 1;
		derivedTermF[term.length] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
		for (int j = 2; j < term.length; ++j) {


			derivedTermF[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
			derivativeCompiler.derivativesIndirection, 
			parameters, order, sizes);
		}
		java.util.Arrays.sort(derivedTermF, 2, derivedTermF.length);
		row.add(derivedTermF);


		for (int l = 2; l < term.length; ++l) {
			int[] derivedTermG = new int[term.length];
			derivedTermG[0] = term[0];
			derivedTermG[1] = term[1];
			for (int j = 2; j < term.length; ++j) {


				derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
				derivativeCompiler.derivativesIndirection, 
				parameters, order, sizes);
				if (j == l) {

					java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);
					orders[parameters - 1]++;
					derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
				}
			}
			java.util.Arrays.sort(derivedTermG, 2, derivedTermG.length);
			row.add(derivedTermG);
		}

	}


	final java.util.List<int[]> combined = new java.util.ArrayList<int[]>(row.size());
	for (int j = 0; j < row.size(); ++j) {
		final int[] termJ = row.get(j);
		if (termJ[0] > 0) {
			for (int k = j + 1; k < row.size(); ++k) {
				final int[] termK = row.get(k);
				boolean equals = termJ.length == termK.length;
				for (int l = 1; equals && (l < termJ.length); ++l) {
					equals &= termJ[l] == termK[l];
				}
				if (equals) {

					termJ[0] += termK[0];

					termK[0] = 0;
				}
			}
			combined.add(termJ);
		}
	}

	compIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:21.140 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:21.140 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:21.141 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(orders.length, getFreeParameters()),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return compIndirection,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:23.568 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:23.568 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:23.569 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (orders.length != getFreeParameters()) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(orders.length, getFreeParameters());
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(orders.length, getFreeParameters()),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:25.919 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:25.919 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:25.920 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (orders.length != getFreeParameters()) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(orders.length, getFreeParameters());
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:27.979 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:27.979 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:27.980 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: int index = 0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:30.297 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:30.298 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:30.299 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: int m = order,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: int index = 0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:32.744 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:32.744 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:32.745 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: int ordersSum = 0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: int m = order,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:34.949 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:34.949 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:34.951 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: int derivativeOrder = orders[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: int ordersSum = 0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:37.329 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:37.329 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:37.330 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: ordersSum += derivativeOrder,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: int derivativeOrder = orders[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:39.661 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:39.662 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:39.663 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(ordersSum, order, true),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ordersSum += derivativeOrder,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:41.976 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:41.977 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:41.978 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (ordersSum > order) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(ordersSum, order, true);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(ordersSum, order, true),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:44.407 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:44.408 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:44.409 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: index += sizes[i][m--],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (ordersSum > order) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(ordersSum, order, true);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:46.710 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:46.711 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:46.712 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: while ((derivativeOrder--) > 0) {



	index += sizes[i][m--];
} ,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: index += sizes[i][m--],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:48.930 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:48.930 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:48.931 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = parameters - 1; i >= 0; --i) {


	int derivativeOrder = orders[i];


	ordersSum += derivativeOrder;
	if (ordersSum > order) {
		throw new org.apache.commons.math3.exception.NumberIsTooLargeException(ordersSum, order, true);
	}

	while ((derivativeOrder--) > 0) {



		index += sizes[i][m--];
	} 

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: while ((derivativeOrder--) > 0) {



	index += sizes[i][m--];
} ,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:51.339 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:51.339 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:51.341 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return index,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = parameters - 1; i >= 0; --i) {


	int derivativeOrder = orders[i];


	ordersSum += derivativeOrder;
	if (ordersSum > order) {
		throw new org.apache.commons.math3.exception.NumberIsTooLargeException(ordersSum, order, true);
	}

	while ((derivativeOrder--) > 0) {



		index += sizes[i][m--];
	} 

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:53.813 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:53.813 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:53.815 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: int[] orders = new int[destP],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return index,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:56.283 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:56.283 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:56.284 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(srcDerivativesIndirection[index], 0, orders, 0, org.apache.commons.math3.util.FastMath.min(srcP, destP)),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: int[] orders = new int[destP],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:56:58.704 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:58.705 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:58.706 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(destP, destO, destSizes, orders),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(srcDerivativesIndirection[index], 0, orders, 0, org.apache.commons.math3.util.FastMath.min(srcP, destP)),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:01.505 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:01.506 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:01.508 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return derivativesIndirection[index],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(destP, destO, destSizes, orders),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:04.656 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:04.657 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:04.659 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return parameters,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return derivativesIndirection[index],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:07.158 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:07.158 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:07.159 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return order,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return parameters,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:09.088 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:09.088 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:09.089 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return sizes[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return order,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:11.013 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:11.013 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:11.014 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = 
org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], a2, c2[offset2 + i]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return sizes[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:13.017 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:13.017 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:13.018 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < getSize(); ++i) {
	result[resultOffset + i] = 
	org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], a2, c2[offset2 + i]);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = 
org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], a2, c2[offset2 + i]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:15.662 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:15.663 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:15.664 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = 
org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], 
a2, c2[offset2 + i], 
a3, c3[offset3 + i]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < getSize(); ++i) {
	result[resultOffset + i] = 
	org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], a2, c2[offset2 + i]);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:18.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:18.345 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:18.347 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < getSize(); ++i) {
	result[resultOffset + i] = 
	org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], 
	a2, c2[offset2 + i], 
	a3, c3[offset3 + i]);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = 
org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], 
a2, c2[offset2 + i], 
a3, c3[offset3 + i]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:20.831 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:20.831 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:20.833 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = 
org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], 
a2, c2[offset2 + i], 
a3, c3[offset3 + i], 
a4, c4[offset4 + i]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < getSize(); ++i) {
	result[resultOffset + i] = 
	org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], 
	a2, c2[offset2 + i], 
	a3, c3[offset3 + i]);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:22.878 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:22.878 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:22.879 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < getSize(); ++i) {
	result[resultOffset + i] = 
	org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], 
	a2, c2[offset2 + i], 
	a3, c3[offset3 + i], 
	a4, c4[offset4 + i]);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = 
org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], 
a2, c2[offset2 + i], 
a3, c3[offset3 + i], 
a4, c4[offset4 + i]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:25.253 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:25.254 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:25.255 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = lhs[lhsOffset + i] + rhs[rhsOffset + i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < getSize(); ++i) {
	result[resultOffset + i] = 
	org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], 
	a2, c2[offset2 + i], 
	a3, c3[offset3 + i], 
	a4, c4[offset4 + i]);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:27.522 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:27.522 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:27.523 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < getSize(); ++i) {
	result[resultOffset + i] = lhs[lhsOffset + i] + rhs[rhsOffset + i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = lhs[lhsOffset + i] + rhs[rhsOffset + i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:29.539 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:29.539 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:29.540 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = lhs[lhsOffset + i] - rhs[rhsOffset + i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < getSize(); ++i) {
	result[resultOffset + i] = lhs[lhsOffset + i] + rhs[rhsOffset + i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:31.654 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:31.655 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:31.656 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < getSize(); ++i) {
	result[resultOffset + i] = lhs[lhsOffset + i] - rhs[rhsOffset + i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = lhs[lhsOffset + i] - rhs[rhsOffset + i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:34.151 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:34.151 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:34.153 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[][] mappingI = multIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < getSize(); ++i) {
	result[resultOffset + i] = lhs[lhsOffset + i] - rhs[rhsOffset + i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:36.556 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:36.556 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:36.557 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double r = 0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] mappingI = multIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:38.712 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:38.712 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:38.713 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: r += (mappingI[j][0] * 
lhs[lhsOffset + mappingI[j][1]]) * 
rhs[rhsOffset + mappingI[j][2]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double r = 0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:40.890 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:40.890 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:40.891 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int j = 0; j < mappingI.length; ++j) {
	r += (mappingI[j][0] * 
	lhs[lhsOffset + mappingI[j][1]]) * 
	rhs[rhsOffset + mappingI[j][2]];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: r += (mappingI[j][0] * 
lhs[lhsOffset + mappingI[j][1]]) * 
rhs[rhsOffset + mappingI[j][2]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:43.013 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:43.013 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:43.014 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = r,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < mappingI.length; ++j) {
	r += (mappingI[j][0] * 
	lhs[lhsOffset + mappingI[j][1]]) * 
	rhs[rhsOffset + mappingI[j][2]];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:45.203 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:45.203 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:45.204 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < multIndirection.length; ++i) {
	final int[][] mappingI = multIndirection[i];
	double r = 0;
	for (int j = 0; j < mappingI.length; ++j) {
		r += (mappingI[j][0] * 
		lhs[lhsOffset + mappingI[j][1]]) * 
		rhs[rhsOffset + mappingI[j][2]];
	}
	result[resultOffset + i] = r;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = r,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:47.377 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:47.377 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:47.378 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] reciprocal = new double[getSize()],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < multIndirection.length; ++i) {
	final int[][] mappingI = multIndirection[i];
	double r = 0;
	for (int j = 0; j < mappingI.length; ++j) {
		r += (mappingI[j][0] * 
		lhs[lhsOffset + mappingI[j][1]]) * 
		rhs[rhsOffset + mappingI[j][2]];
	}
	result[resultOffset + i] = r;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:49.882 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:49.883 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:49.884 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: pow(rhs, lhsOffset, -1, reciprocal, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] reciprocal = new double[getSize()],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:52.226 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:52.227 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:52.228 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: multiply(lhs, lhsOffset, reciprocal, 0, result, resultOffset),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: pow(rhs, lhsOffset, -1, reciprocal, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:54.630 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:54.630 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:54.631 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double rem = lhs[lhsOffset] % rhs[rhsOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(lhs, lhsOffset, reciprocal, 0, result, resultOffset),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:56.755 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:56.756 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:56.757 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double k = org.apache.commons.math3.util.FastMath.rint((lhs[lhsOffset] - rem) / rhs[rhsOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double rem = lhs[lhsOffset] % rhs[rhsOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:57:59.341 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:59.342 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:59.343 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset] = rem,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double k = org.apache.commons.math3.util.FastMath.rint((lhs[lhsOffset] - rem) / rhs[rhsOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:01.844 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:01.845 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:01.846 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = lhs[lhsOffset + i] - (k * rhs[rhsOffset + i]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset] = rem,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:04.382 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:04.383 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:04.383 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i < getSize(); ++i) {
	result[resultOffset + i] = lhs[lhsOffset + i] - (k * rhs[rhsOffset + i]);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = lhs[lhsOffset + i] - (k * rhs[rhsOffset + i]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:06.455 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:06.455 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:06.456 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] function = new double[1 + order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i < getSize(); ++i) {
	result[resultOffset + i] = lhs[lhsOffset + i] - (k * rhs[rhsOffset + i]);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:08.764 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:08.764 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:08.765 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], p - order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double[] function = new double[1 + order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:11.063 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:11.063 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:11.064 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[i] = xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], p - order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:13.020 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:13.020 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:13.021 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: xk *= operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[i] = xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:15.005 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:15.005 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:15.006 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = order; i > 0; --i) {
	function[i] = xk;
	xk *= operand[operandOffset];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk *= operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:17.156 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:17.156 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:17.157 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = order; i > 0; --i) {
	function[i] = xk;
	xk *= operand[operandOffset];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:19.289 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:19.289 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:19.290 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double coefficient = p,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:21.199 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:21.199 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:21.200 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[i] *= coefficient,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double coefficient = p,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:23.299 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:23.300 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:23.301 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: coefficient *= p - i,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[i] *= coefficient,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:25.292 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:25.292 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:25.293 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= p - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: coefficient *= p - i,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:27.395 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:27.396 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:27.397 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compose(operand, operandOffset, function, result, resultOffset),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= p - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:29.373 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:29.373 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:29.374 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset] = 1.0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compose(operand, operandOffset, function, result, resultOffset),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:31.289 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:31.289 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:31.290 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset] = 1.0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:33.281 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:33.281 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:33.282 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:35.419 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:35.419 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:35.420 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (n == 0) {

	result[resultOffset] = 1.0;
	java.util.Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), 0);
	return;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:37.357 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:37.357 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:37.359 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int maxOrder = org.apache.commons.math3.util.FastMath.min(order, n),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (n == 0) {

	result[resultOffset] = 1.0;
	java.util.Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), 0);
	return;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:39.876 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:39.876 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:39.877 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], n - maxOrder),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int maxOrder = org.apache.commons.math3.util.FastMath.min(order, n),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:42.395 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:42.396 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:42.397 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = maxOrder; i > 0; --i) {
	function[i] = xk;
	xk *= operand[operandOffset];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], n - maxOrder),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:44.477 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:44.477 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:44.479 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = maxOrder; i > 0; --i) {
	function[i] = xk;
	xk *= operand[operandOffset];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:46.351 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:46.351 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:46.352 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk = org.apache.commons.math3.util.FastMath.pow(inv, -n),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:48.236 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:48.236 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:48.237 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: xk *= inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = org.apache.commons.math3.util.FastMath.pow(inv, -n),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:50.135 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:50.135 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:50.136 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i <= order; ++i) {
	function[i] = xk;
	xk *= inv;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk *= inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:52.491 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:52.491 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:52.492 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (n > 0) {

	final int maxOrder = org.apache.commons.math3.util.FastMath.min(order, n);
	double xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], n - maxOrder);
	for (int i = maxOrder; i > 0; --i) {
		function[i] = xk;
		xk *= operand[operandOffset];
	}
	function[0] = xk;
} else {

	final double inv = 1.0 / operand[operandOffset];
	double xk = org.apache.commons.math3.util.FastMath.pow(inv, -n);
	for (int i = 0; i <= order; ++i) {
		function[i] = xk;
		xk *= inv;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i <= order; ++i) {
	function[i] = xk;
	xk *= inv;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:54.504 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:54.505 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:54.506 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double coefficient = n,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (n > 0) {

	final int maxOrder = org.apache.commons.math3.util.FastMath.min(order, n);
	double xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], n - maxOrder);
	for (int i = maxOrder; i > 0; --i) {
		function[i] = xk;
		xk *= operand[operandOffset];
	}
	function[0] = xk;
} else {

	final double inv = 1.0 / operand[operandOffset];
	double xk = org.apache.commons.math3.util.FastMath.pow(inv, -n);
	for (int i = 0; i <= order; ++i) {
		function[i] = xk;
		xk *= inv;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:56.905 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:56.905 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:56.906 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: coefficient *= n - i,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double coefficient = n,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:58:59.423 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:59.424 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:59.424 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: coefficient *= n - i,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

08:59:01.345 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:01.345 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:01.346 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] logX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:59:03.330 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:03.330 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:03.331 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return newCache[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler[][] cache = org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers.get(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:59:05.358 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:05.358 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:05.359 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return newCache[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (((cache != null) && (cache.length > parameters)) && (cache[parameters].length > order)) {
	if (cache[parameters][order] != null) {

		return cache[parameters][order];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:59:07.626 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:07.626 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:07.627 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return newCache[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int maxOrder = org.apache.commons.math3.util.FastMath.max(order, cache == null ? 0 : cache[0].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:59:09.507 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:09.508 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:09.509 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return newCache[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache != null) {

	for (int i = 0; i < cache.length; ++i) {
		java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:59:11.541 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:11.541 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:11.542 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return newCache[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:59:13.478 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:13.479 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:13.479 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return newCache[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

08:59:15.725 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:15.725 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:15.726 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return newCache[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers.compareAndSet(cache, newCache),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:59:17.623 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:17.624 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:17.625 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return newCache[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

08:59:19.508 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:19.508 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:19.509 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int diag = 0; diag <= (parameters + order); ++diag) {
	for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
		final int p = diag - o;
		if (newCache[p][o] == null) {
			final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
			final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
			newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
		}
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:59:21.548 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:21.548 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:21.550 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.parameters = parameters,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:59:23.669 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:23.669 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:23.670 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.order = order,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:59:25.641 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:25.641 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:25.642 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.sizes = org.apache.commons.math3.analysis.differentiation.DSCompiler.compileSizes(parameters, order, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:59:28.143 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:28.143 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:28.144 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.derivativesIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileDerivativesIndirection(parameters, order, 
valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:59:30.608 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:30.608 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:30.609 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.lowerIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileLowerIndirection(parameters, order, 
valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:59:32.707 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:32.707 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:32.708 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.multIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileMultiplicationIndirection(parameters, order, 
valueCompiler, derivativeCompiler, lowerIndirection),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:59:34.997 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:34.997 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:34.998 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.compIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileCompositionIndirection(parameters, order, 
valueCompiler, derivativeCompiler, 
sizes, derivativesIndirection, lowerIndirection),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

08:59:37.034 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:37.034 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:37.035 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[][] sizes = new int[parameters + 1][order + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

08:59:39.184 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:39.184 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:39.185 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.Arrays.fill(sizes[0], 1),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

08:59:41.264 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:41.265 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:41.266 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(valueCompiler.sizes, 0, sizes, 0, parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

08:59:43.341 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:43.342 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:43.343 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

08:59:45.422 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:45.422 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:45.423 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new int[1][parameters],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

08:59:47.601 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:47.601 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:47.602 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivativesIndirection[vSize + i][parameters - 1]++,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

08:59:49.688 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:49.688 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:49.689 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][][] multIndirection = new int[vSize + dSize][][],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

08:59:51.643 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:51.644 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:51.645 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivedTermF[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
derivativeCompiler.derivativesIndirection, 
parameters, order, sizes),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

08:59:54.101 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:54.101 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:54.102 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] reciprocal = new double[getSize()],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

08:59:56.187 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:56.187 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:56.188 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= p - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

08:59:58.777 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:59:58.778 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:59:58.779 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:00:01.485 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:01.485 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:01.486 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (n > 0) {

	final int maxOrder = org.apache.commons.math3.util.FastMath.min(order, n);
	double xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], n - maxOrder);
	for (int i = maxOrder; i > 0; --i) {
		function[i] = xk;
		xk *= operand[operandOffset];
	}
	function[0] = xk;
} else {

	final double inv = 1.0 / operand[operandOffset];
	double xk = org.apache.commons.math3.util.FastMath.pow(inv, -n);
	for (int i = 0; i <= order; ++i) {
		function[i] = xk;
		xk *= inv;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:00:03.993 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:03.993 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:03.994 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: coefficient *= n - i,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:00:06.428 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:06.428 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:06.430 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

09:00:08.645 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:08.645 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:08.646 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: log(x, xOffset, logX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] logX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

09:00:11.373 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:11.373 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:11.374 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] yLogX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: log(x, xOffset, logX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

09:00:13.923 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:13.923 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:13.924 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: multiply(logX, 0, y, yOffset, yLogX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] yLogX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

09:00:16.330 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:16.330 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:16.331 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: exp(yLogX, 0, result, resultOffset),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(logX, 0, y, yOffset, yLogX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

09:00:18.252 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:18.252 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:18.253 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: exp(yLogX, 0, result, resultOffset),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:00:20.728 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:20.728 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:20.729 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: xk = org.apache.commons.math3.util.FastMath.sqrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:00:23.083 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:23.083 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:23.084 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.sqrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:00:25.335 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:25.335 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:25.336 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:00:27.640 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:27.640 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:27.641 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (n == 3) {
	xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]);
} else {
	xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:00:29.757 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:29.758 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:29.758 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (n == 2) {
	xk = org.apache.commons.math3.util.FastMath.sqrt(operand[operandOffset]);
} else if (n == 3) {
	xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]);
} else {
	xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (n == 3) {
	xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]);
} else {
	xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:00:32.009 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:32.009 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:32.010 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double nReciprocal = 1.0 / n,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (n == 2) {
	xk = org.apache.commons.math3.util.FastMath.sqrt(operand[operandOffset]);
} else if (n == 3) {
	xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]);
} else {
	xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:00:34.022 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:34.022 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:34.023 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double xReciprocal = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double nReciprocal = 1.0 / n,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:00:36.010 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:36.010 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:36.011 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: xk *= xReciprocal * (nReciprocal - i),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double xReciprocal = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:00:38.214 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:38.214 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:38.215 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i <= order; ++i) {
	function[i] = xk;
	xk *= xReciprocal * (nReciprocal - i);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk *= xReciprocal * (nReciprocal - i),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:00:40.201 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:40.201 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:40.202 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i <= order; ++i) {
	function[i] = xk;
	xk *= xReciprocal * (nReciprocal - i);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

09:00:42.140 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:42.140 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:42.141 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.Arrays.fill(function, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

09:00:44.566 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:44.567 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:44.568 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

09:00:46.692 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:46.692 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:46.693 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: exp(yLogX, 0, result, resultOffset),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

09:00:48.666 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:48.667 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:48.668 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] yLogX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

09:00:50.601 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:50.601 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:50.602 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: log(x, xOffset, logX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

09:00:52.501 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:52.502 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:52.502 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] logX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

09:00:54.920 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:54.920 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:54.921 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, 1, 1 + order, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

09:00:57.444 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:00:57.445 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:00:57.446 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, 1, 1 + order, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(logX, 0, y, yOffset, yLogX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

09:01:00.041 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:00.042 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:00.043 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, 1, 1 + order, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: log(x, xOffset, logX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

09:01:02.417 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:02.417 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:02.418 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, 1, 1 + order, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] logX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

09:01:04.791 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:04.792 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:04.793 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, 1, 1 + order, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:01:06.667 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:06.667 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:06.668 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:01:08.630 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:08.630 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:08.631 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk = inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:01:10.526 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:10.527 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:10.528 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: xk *= (-i) * inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:01:12.572 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:12.572 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:12.573 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i <= order; ++i) {
	function[i] = xk;
	xk *= (-i) * inv;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk *= (-i) * inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:01:15.025 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:15.025 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:15.026 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] = xk;
	xk *= (-i) * inv;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

09:01:17.234 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:17.235 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:17.236 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log1p(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

09:01:19.423 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:19.424 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:19.425 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log1p(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk *= (-i) * inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

09:01:21.838 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:21.839 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:21.840 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log1p(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

09:01:24.253 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:24.254 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:24.255 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log1p(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

09:01:26.724 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:26.724 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:26.725 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double inv = 1.0 / (1.0 + operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

09:01:29.063 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:29.063 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:29.064 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double inv = 1.0 / (1.0 + operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

09:01:31.249 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:31.250 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:31.251 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double inv = 1.0 / (1.0 + operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log1p(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

09:01:33.621 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:33.621 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:33.622 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

09:01:36.233 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:36.233 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:36.234 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

09:01:38.886 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:38.886 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:38.888 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / (1.0 + operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:01:41.022 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:41.023 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:41.024 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log10(operand[operandOffset]),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

09:01:42.932 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:42.933 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:42.934 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log10(operand[operandOffset]),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:01:44.898 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:44.898 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:44.899 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log10(operand[operandOffset]),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:01:46.823 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:46.823 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:46.824 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

09:01:49.304 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:49.305 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:49.306 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:01:51.182 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:51.182 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:51.183 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

09:01:53.082 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:53.082 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:53.083 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log10(operand[operandOffset]),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:01:55.038 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:55.038 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:55.039 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

09:01:57.101 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:57.101 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:57.102 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

09:01:59.658 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:01:59.659 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:01:59.660 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:02.176 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:02.177 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:02.178 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:04.653 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:04.653 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:04.655 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk *= (-i) * inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:07.030 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:07.030 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:07.031 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:09.284 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:09.284 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:09.285 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:11.379 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:11.379 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:11.380 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] = xk;
	xk *= (-i) * inv;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:13.490 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:13.491 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:13.492 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:15.653 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:15.653 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:15.654 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[i] = -function[i - 2],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:17.726 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:17.726 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:17.728 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[i] = -function[i - 2],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:20.146 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:20.147 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:20.148 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[i] = -function[i - 2],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:22.537 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:22.538 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:22.539 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 2; i <= order; ++i) {
	function[i] = -function[i - 2];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:24.855 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:24.855 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:24.856 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 2; i <= order; ++i) {
	function[i] = -function[i - 2];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:26.953 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:26.953 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:26.954 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 2; i <= order; ++i) {
	function[i] = -function[i - 2];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:29.260 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:29.260 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:29.261 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 2; i <= order; ++i) {
	function[i] = -function[i - 2];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[i] = -function[i - 2],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:31.271 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:31.271 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:31.272 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:33.431 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:33.432 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:33.433 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:36.047 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:36.047 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:36.048 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[i] = -function[i - 2],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:38.124 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:38.125 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:38.126 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 2; i <= order; ++i) {
	function[i] = -function[i - 2];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:40.010 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:40.010 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:40.011 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:41.951 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:41.951 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:41.952 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:43.968 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:43.968 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:43.969 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 2; i <= order; ++i) {
	function[i] = -function[i - 2];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:46.662 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:46.662 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:46.664 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

09:02:49.153 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:49.154 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:49.155 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log1p(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

09:02:51.696 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:51.696 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:51.697 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log1p(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.Arrays.fill(function, 1, 1 + order, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

09:02:54.269 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:54.269 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:54.270 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log1p(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: log(x, xOffset, logX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

09:02:56.815 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:56.815 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:56.816 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log1p(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] logX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:02:59.281 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:02:59.281 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:02:59.283 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:03:01.676 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:01.676 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:01.678 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:03:04.088 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:04.088 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:04.090 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[i] = -function[i - 2],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:03:06.356 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:06.356 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:06.357 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] = xk;
	xk *= (-i) * inv;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

09:03:08.471 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:08.471 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:08.472 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:03:10.598 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:10.598 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:10.599 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

09:03:12.797 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:12.797 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:12.798 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

09:03:15.264 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:15.265 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:15.266 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:03:17.450 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:17.450 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:17.451 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i <= order; ++i) {
	function[i] = xk;
	xk *= xReciprocal * (nReciprocal - i);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:03:19.672 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:19.672 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:19.673 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk *= xReciprocal * (nReciprocal - i),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:03:22.098 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:22.098 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:22.099 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double xReciprocal = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:03:24.208 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:24.208 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:24.209 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double nReciprocal = 1.0 / n,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:03:26.713 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:26.713 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:26.714 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (n == 2) {
	xk = org.apache.commons.math3.util.FastMath.sqrt(operand[operandOffset]);
} else if (n == 3) {
	xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]);
} else {
	xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:03:29.221 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:29.221 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:29.222 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (n == 3) {
	xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]);
} else {
	xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:03:31.664 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:31.664 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:31.665 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:03:34.073 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:34.073 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:34.074 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:03:36.159 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:36.159 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:36.160 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.sqrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

09:03:38.569 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:38.569 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:38.570 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: exp(yLogX, 0, result, resultOffset),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:03:40.472 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:40.473 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:40.474 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

09:03:42.430 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:42.430 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:42.431 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: exp(yLogX, 0, result, resultOffset),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

09:03:44.784 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:44.784 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:44.785 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: exp(yLogX, 0, result, resultOffset),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log10(operand[operandOffset]),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

09:03:46.688 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:46.688 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:46.689 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: exp(yLogX, 0, result, resultOffset),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / (1.0 + operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

09:03:48.617 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:48.617 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:48.618 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: exp(yLogX, 0, result, resultOffset),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

09:03:50.593 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:50.594 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:50.594 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(logX, 0, y, yOffset, yLogX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

09:03:52.634 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:52.634 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:52.635 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] yLogX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

09:03:55.159 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:55.160 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:55.162 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: log(x, xOffset, logX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

09:03:57.615 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:57.616 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:57.617 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] logX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:03:59.896 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:03:59.897 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:03:59.898 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Added a new package dealing with differentials.

09:04:02.190 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:02.191 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:02.192 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] function = new double[1 + order],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:04.317 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:04.317 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:04.318 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double t = org.apache.commons.math3.util.FastMath.tan(operand[operandOffset]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] function = new double[1 + order],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:06.482 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:06.483 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:06.483 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = t,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t = org.apache.commons.math3.util.FastMath.tan(operand[operandOffset]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:08.613 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:08.613 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:08.614 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = t,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] function = new double[1 + order],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:04:10.660 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:10.660 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:10.661 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = t,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Added a new package dealing with differentials.

09:04:12.632 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:12.632 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:12.633 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order + 2],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = t,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:15.090 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:15.090 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:15.092 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order + 2],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t = org.apache.commons.math3.util.FastMath.tan(operand[operandOffset]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:17.602 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:17.602 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:17.604 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[1] = 1,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] function = new double[1 + order],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:20.089 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:20.089 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:20.090 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[1] = 1,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order + 2],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:22.212 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:22.212 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:22.213 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double t2 = t * t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] function = new double[1 + order],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:24.594 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:24.594 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:24.595 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double t2 = t * t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order + 2],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:26.593 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:26.593 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:26.594 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double t2 = t * t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[1] = 1,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:28.941 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:28.941 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:28.942 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double v = 0,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t = org.apache.commons.math3.util.FastMath.tan(operand[operandOffset]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:30.887 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:30.887 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:30.888 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double v = 0,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[1] = 1,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:32.959 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:32.959 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:32.960 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double v = 0,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t2 = t * t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:35.292 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:35.292 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:35.293 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[n + 1] = n * p[n],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t = org.apache.commons.math3.util.FastMath.tan(operand[operandOffset]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:37.697 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:37.697 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:37.698 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[n + 1] = n * p[n],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t2 = t * t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:40.274 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:40.274 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:40.275 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[n + 1] = n * p[n],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double v = 0,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:42.920 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:42.920 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:42.921 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * t2) + p[k],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order + 2],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:45.457 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:45.458 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:45.459 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * t2) + p[k],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double v = 0,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:47.925 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:47.925 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:47.926 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * t2) + p[k],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[n + 1] = n * p[n],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:50.401 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:50.401 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:50.402 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order + 2],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:52.873 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:52.873 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:52.875 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double v = 0,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:55.163 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:55.163 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:55.164 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * t2) + p[k],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:57.255 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:57.255 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:57.256 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[0] = p[1],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[1] = 1,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:04:59.505 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:04:59.505 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:04:59.506 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[0] = p[1],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[n + 1] = n * p[n],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:01.796 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:01.796 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:01.797 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[0] = p[1],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:04.206 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:04.206 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:04.208 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[1] = 1,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:06.725 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:06.725 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:06.726 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * t2) + p[k],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:09.098 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:09.098 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:09.099 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[0] = p[1],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:11.437 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:11.438 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:11.439 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t2 = t * t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:13.608 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:13.609 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:13.610 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:15.971 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:15.971 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:15.972 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:18.358 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:18.359 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:18.360 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = n + 1; k >= 0; k -= 2) {
	v = (v * t2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t2 = t * t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:20.438 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:20.438 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:20.439 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = n + 1; k >= 0; k -= 2) {
	v = (v * t2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:22.695 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:22.695 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:22.696 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = n + 1; k >= 0; k -= 2) {
	v = (v * t2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:24.676 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:24.676 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:24.677 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = n + 1; k >= 0; k -= 2) {
	v = (v * t2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:26.744 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:26.745 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:26.746 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v *= t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double v = 0,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:29.004 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:29.004 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:29.005 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v *= t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[0] = p[1],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:30.921 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:30.922 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:30.923 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v *= t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:32.922 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:32.922 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:32.923 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v *= t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n + 1; k >= 0; k -= 2) {
	v = (v * t2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:34.913 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:34.913 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:34.914 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= t;
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double v = 0,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:37.023 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:37.023 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:37.024 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= t;
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:39.037 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:39.037 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:39.038 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= t;
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n + 1; k >= 0; k -= 2) {
	v = (v * t2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:40.918 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:40.918 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:40.920 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= t;
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v *= t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:42.790 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:42.790 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:42.791 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 1; n <= order; ++n) {


	double v = 0;
	p[n + 1] = n * p[n];
	for (int k = n + 1; k >= 0; k -= 2) {
		v = (v * t2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= t;
	}

	function[n] = v;

},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = v,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:44.766 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:44.766 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:44.767 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 1; n <= order; ++n) {


	double v = 0;
	p[n + 1] = n * p[n];
	for (int k = n + 1; k >= 0; k -= 2) {
		v = (v * t2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= t;
	}

	function[n] = v;

},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:46.699 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:46.699 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:46.700 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 1; n <= order; ++n) {


	double v = 0;
	p[n + 1] = n * p[n];
	for (int k = n + 1; k >= 0; k -= 2) {
		v = (v * t2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= t;
	}

	function[n] = v;

},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:48.712 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:48.712 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:48.713 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = v,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:50.799 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:50.799 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:50.801 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = v,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:05:53.044 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:53.045 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:53.046 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:05:55.441 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:55.441 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:55.443 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = v,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:05:57.918 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:05:57.918 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:05:57.919 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:06:00.058 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:00.058 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:00.059 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:06:02.086 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:02.086 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:02.087 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:06:04.512 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:04.512 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:04.513 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:06:06.812 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:06.812 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:06.813 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[0] = -1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:06:09.116 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:09.116 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:09.117 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[0] = -1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:06:11.489 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:11.490 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:11.490 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[0] = -1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:06:13.485 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:13.485 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:13.486 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double x2 = x * x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:06:15.570 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:15.570 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:15.571 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double x2 = x * x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[0] = -1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:06:17.718 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:17.718 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:17.719 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double x2 = x * x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:06:19.649 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:19.650 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:19.651 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double f = 1.0 / (1 - x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:06:21.602 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:21.602 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:21.603 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double f = 1.0 / (1 - x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x2 = x * x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:06:23.756 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:23.757 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:23.758 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double f = 1.0 / (1 - x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:06:25.881 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:25.882 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:25.883 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double coeff = org.apache.commons.math3.util.FastMath.sqrt(f),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:06:27.768 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:27.768 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:27.769 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double coeff = org.apache.commons.math3.util.FastMath.sqrt(f),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x2 = x * x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:06:29.854 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:29.855 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:29.856 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double coeff = org.apache.commons.math3.util.FastMath.sqrt(f),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double f = 1.0 / (1 - x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:06:32.298 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:32.299 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:32.300 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[1] = coeff * p[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:06:34.706 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:34.706 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:34.707 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[1] = coeff * p[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x2 = x * x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:06:36.766 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:36.766 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:36.767 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[1] = coeff * p[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double coeff = org.apache.commons.math3.util.FastMath.sqrt(f),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:06:39.215 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:39.215 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:39.218 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[n - 1] = (n - 1) * p[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = coeff * p[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:06:41.705 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:41.706 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:41.707 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[n - 1] = (n - 1) * p[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:06:44.267 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:44.268 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:44.269 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[n - 1] = (n - 1) * p[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:06:46.765 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:46.765 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:46.766 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[n - 1] = (n - 1) * p[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:06:49.092 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:49.092 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:49.093 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * x2) + p[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[n - 1] = (n - 1) * p[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:06:51.411 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:51.411 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:51.412 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * x2) + p[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:06:53.676 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:53.676 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:53.677 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * x2) + p[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:06:55.784 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:55.784 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:55.785 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * x2) + p[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:06:57.721 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:57.721 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:57.723 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[n - 1] = (n - 1) * p[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:06:59.891 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:06:59.891 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:06:59.892 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:07:01.939 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:01.940 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:01.941 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:07:03.831 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:03.832 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:03.832 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * x2) + p[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:07:05.804 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:05.804 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:05.806 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * x2) + p[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:07:07.922 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:07.922 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:07.923 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:07:09.933 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:09.933 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:09.934 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:07:11.883 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:11.883 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:11.884 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:07:13.769 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:13.769 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:13.770 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * x2) + p[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:07:15.705 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:15.705 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:15.706 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:07:17.659 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:17.659 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:17.660 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:07:19.647 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:19.647 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:19.649 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:07:21.716 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:21.716 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:21.718 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v *= x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:07:23.710 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:23.710 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:23.711 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v *= x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:07:25.611 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:25.612 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:25.613 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v *= x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:07:27.530 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:27.530 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:27.531 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v *= x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:07:29.545 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:29.545 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:29.546 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:07:32.018 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:32.018 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:32.019 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:07:34.455 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:34.455 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:34.456 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v *= x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:07:36.715 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:36.715 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:36.717 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:07:38.875 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:38.876 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:38.877 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:07:41.293 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:41.294 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:41.295 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= t;
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 1; n <= order; ++n) {


	double v = 0;
	p[n + 1] = n * p[n];
	for (int k = n + 1; k >= 0; k -= 2) {
		v = (v * t2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= t;
	}

	function[n] = v;

},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

09:07:43.664 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:43.664 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:43.665 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= t;
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = v,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Added a new package dealing with differentials.

09:07:45.795 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:45.796 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:45.797 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= t;
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Added a new package dealing with differentials.

09:07:48.005 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:48.005 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:48.006 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= t;
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:07:50.109 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:50.109 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:50.110 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v *= t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:07:52.002 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:52.002 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:52.003 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n + 1; k >= 0; k -= 2) {
	v = (v * t2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:07:54.176 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:54.176 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:54.177 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:07:56.142 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:56.142 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:56.143 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:07:58.174 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:07:58.175 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:07:58.176 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[0] = p[1],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:08:00.152 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:00.152 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:00.153 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:08:02.206 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:02.206 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:02.207 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * t2) + p[k],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:08:04.280 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:04.280 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:04.281 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[n + 1] = n * p[n],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:08:06.305 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:06.305 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:06.306 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double v = 0,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:08:08.228 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:08.228 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:08.229 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t2 = t * t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:08:10.144 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:10.144 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:10.146 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order + 2],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:08:12.634 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:12.635 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:12.636 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:08:15.072 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:15.073 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:15.074 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] function = new double[1 + order],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:08:17.417 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:17.417 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:17.418 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = t,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:08:19.449 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:19.450 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:19.451 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = t,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:08:21.894 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:21.894 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:21.895 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = t,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:08:24.269 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:24.270 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:24.271 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = t,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v *= x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:08:26.610 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:26.611 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:26.612 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = t,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:08:28.719 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:28.719 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:28.720 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:08:31.163 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:31.163 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:31.165 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

09:08:33.547 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:33.547 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:33.549 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

09:08:35.780 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:35.781 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:35.781 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.Arrays.fill(function, 1, 1 + order, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

09:08:37.959 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:37.959 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:37.961 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / (1.0 + operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

09:08:40.428 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:40.428 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:40.430 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] yLogX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:08:42.808 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:42.808 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:42.809 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

09:08:45.175 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:45.175 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:45.176 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:08:47.204 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:47.204 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:47.205 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

09:08:49.214 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:49.214 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:49.215 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:08:51.480 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:51.480 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:51.481 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 1; n <= order; ++n) {


	double v = 0;
	p[n + 1] = n * p[n];
	for (int k = n + 1; k >= 0; k -= 2) {
		v = (v * t2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= t;
	}

	function[n] = v;

},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:08:53.921 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:53.922 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:53.922 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = v,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:08:56.393 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:56.393 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:56.394 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v *= t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:08:58.413 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:08:58.413 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:08:58.414 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[0] = p[1],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:09:00.772 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:00.772 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:00.773 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t = org.apache.commons.math3.util.FastMath.tan(operand[operandOffset]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:09:02.735 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:02.735 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:02.736 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double coeff = org.apache.commons.math3.util.FastMath.sqrt(f),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:09:04.685 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:04.685 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:04.686 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:09:06.791 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:06.791 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:06.792 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:09:09.018 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:09.018 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:09.019 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:09:10.911 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:10.911 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:10.912 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:09:13.324 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:13.325 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:13.325 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:09:15.340 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:15.340 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:15.341 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 2; i <= order; ++i) {
	function[i] = -function[i - 2];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:09:17.691 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:17.692 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:17.693 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[i] = -function[i - 2],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:09:19.859 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:19.859 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:19.860 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:09:21.929 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:21.929 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:21.930 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:09:23.988 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:23.988 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:23.989 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:09:26.204 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:26.205 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:26.206 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] = xk;
	xk *= (-i) * inv;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:09:28.195 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:28.195 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:28.196 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk *= (-i) * inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:09:30.353 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:30.353 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:30.354 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:09:32.773 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:32.773 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:32.775 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:09:35.163 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:35.163 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:35.164 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:09:37.316 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:37.316 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:37.317 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i <= order; ++i) {
	function[i] = xk;
	xk *= xReciprocal * (nReciprocal - i);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:09:39.513 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:39.513 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:39.514 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (n == 2) {
	xk = org.apache.commons.math3.util.FastMath.sqrt(operand[operandOffset]);
} else if (n == 3) {
	xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]);
} else {
	xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:09:41.592 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:41.592 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:41.593 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:09:43.571 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:43.571 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:43.572 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.sqrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:09:45.797 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:45.797 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:45.798 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:09:47.843 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:47.843 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:47.844 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[n] = coeff * v,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:09:49.768 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:49.768 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:49.769 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	p[n - 1] = (n - 1) * p[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = coeff * v,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:09:51.725 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:51.725 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:51.726 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	p[n - 1] = (n - 1) * p[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:09:53.639 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:53.639 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:53.640 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:09:56.055 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:56.056 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:56.057 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:09:58.550 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:09:58.550 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:09:58.551 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	p[n - 1] = (n - 1) * p[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:10:00.580 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:00.581 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:00.582 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:10:03.036 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:03.037 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:03.038 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:10:05.046 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:05.046 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:05.047 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:10:07.373 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:07.373 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:07.374 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:10:09.289 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:09.289 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:09.290 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.atan(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:10:11.266 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:11.266 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:11.267 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.atan(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:10:13.372 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:13.372 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:13.373 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.atan(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:10:15.452 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:15.452 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:15.453 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] q = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:10:17.342 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:17.342 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:17.343 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] q = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	p[n - 1] = (n - 1) * p[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:10:19.339 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:19.339 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:19.340 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] q = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:10:21.400 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:21.400 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:21.401 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] q = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:10:23.528 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:23.528 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:23.529 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:10:25.523 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:25.523 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:25.525 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:10:27.474 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:27.474 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:27.475 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:10:29.429 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:29.429 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:29.430 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double f = 1.0 / (1 + x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:10:31.476 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:31.477 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:31.477 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double f = 1.0 / (1 + x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:10:33.474 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:33.474 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:33.475 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double f = 1.0 / (1 + x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:10:35.499 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:35.500 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:35.501 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double f = 1.0 / (1 + x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:10:37.453 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:37.453 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:37.454 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double coeff = f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:10:39.349 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:39.349 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:39.350 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double coeff = f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:10:41.702 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:41.702 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:41.703 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double coeff = f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:10:44.156 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:44.156 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:44.157 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double coeff = f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double f = 1.0 / (1 + x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:10:46.672 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:46.672 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:46.673 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double f = 1.0 / (1 + x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:10:49.126 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:49.126 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:49.127 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:10:51.572 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:51.572 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:51.573 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:10:53.517 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:53.517 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:53.518 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double coeff = f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:10:55.857 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:55.857 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:55.858 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[n - 1] = (-n) * q[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double f = 1.0 / (1 + x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:10:57.777 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:57.778 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:57.779 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[n - 1] = (-n) * q[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:10:59.755 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:10:59.755 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:10:59.756 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[n - 1] = (-n) * q[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:11:01.983 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:01.983 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:01.984 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[n - 1] = (-n) * q[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:11:03.936 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:03.936 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:03.937 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * x2) + q[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double coeff = f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:11:05.823 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:05.823 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:05.824 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * x2) + q[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:11:07.838 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:07.838 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:07.839 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * x2) + q[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[n - 1] = (-n) * q[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:11:09.812 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:09.812 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:09.813 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * x2) + q[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:11:12.057 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:12.057 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:12.058 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double coeff = f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:11:14.241 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:14.242 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:14.243 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:11:16.678 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:16.678 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:16.679 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[n - 1] = (-n) * q[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:11:19.064 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:19.064 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:19.065 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * x2) + q[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:11:21.174 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:21.175 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:21.176 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[0] = q[1],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:11:23.533 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:23.533 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:23.534 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[0] = q[1],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:11:25.986 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:25.987 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:25.988 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[0] = q[1],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * x2) + q[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:11:28.657 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:28.657 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:28.658 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[0] = q[1],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:11:31.082 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:31.082 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:31.083 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:11:33.463 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:33.464 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:33.465 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:11:35.716 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:35.716 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:35.717 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:11:37.848 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:37.848 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:37.849 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[0] = q[1],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:11:39.794 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:39.794 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:39.795 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:11:41.835 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:41.836 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:41.836 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:11:44.058 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:44.058 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:44.059 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:11:46.022 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:46.022 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:46.023 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:11:48.465 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:48.465 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:48.466 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:11:50.862 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:50.863 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:50.864 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:11:52.943 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:52.944 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:52.945 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:11:55.365 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:55.366 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:55.367 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: multiply(x, xOffset, x, xOffset, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:11:57.693 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:57.693 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:57.694 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: multiply(x, xOffset, x, xOffset, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:11:59.689 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:11:59.689 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:11:59.690 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: multiply(x, xOffset, x, xOffset, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:12:01.854 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:01.854 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:01.855 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp2 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:12:04.153 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:04.154 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:04.155 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp2 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(x, xOffset, x, xOffset, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:12:06.456 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:06.456 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:06.457 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp2 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:12:08.715 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:08.715 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:08.716 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: multiply(y, yOffset, y, yOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:12:10.766 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:10.766 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:10.767 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: multiply(y, yOffset, y, yOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(x, xOffset, x, xOffset, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:12:12.909 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:12.910 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:12.911 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: multiply(y, yOffset, y, yOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double[] tmp2 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:12:15.036 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:15.036 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:15.037 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: add(tmp1, 0, tmp2, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:12:16.995 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:16.996 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:16.997 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: add(tmp1, 0, tmp2, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double[] tmp2 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:12:19.046 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:19.047 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:19.048 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: add(tmp1, 0, tmp2, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(y, yOffset, y, yOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:12:20.933 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:20.933 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:20.934 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: rootN(tmp2, 0, 2, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: add(tmp1, 0, tmp2, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:12:23.005 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:23.005 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:23.006 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: rootN(tmp2, 0, 2, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:12:25.098 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:25.098 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:25.099 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: rootN(tmp2, 0, 2, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:12:27.202 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:27.202 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:27.203 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: rootN(tmp2, 0, 2, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:12:29.132 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:29.132 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:29.133 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: add(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: rootN(tmp2, 0, 2, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:12:31.469 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:31.469 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:31.470 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: add(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:12:33.599 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:33.599 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:33.600 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: add(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:12:35.811 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:35.812 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:35.812 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: add(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:12:38.043 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:38.043 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:38.044 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: divide(y, yOffset, tmp2, 0, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: rootN(tmp2, 0, 2, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:12:40.207 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:40.208 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:40.208 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: divide(y, yOffset, tmp2, 0, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:12:42.158 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:42.158 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:42.159 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: divide(y, yOffset, tmp2, 0, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:12:44.254 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:44.254 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:44.255 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: divide(y, yOffset, tmp2, 0, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: add(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:12:46.396 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:46.396 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:46.397 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: atan(tmp1, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: add(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:12:48.356 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:48.356 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:48.358 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: atan(tmp1, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:12:50.423 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:50.423 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:50.424 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: atan(tmp1, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:12:52.903 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:52.904 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:52.905 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: atan(tmp1, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: divide(y, yOffset, tmp2, 0, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:12:55.315 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:55.315 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:55.317 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = 2 * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: add(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:12:57.706 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:12:57.706 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:12:57.707 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = 2 * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:13:00.108 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:00.108 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:00.109 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = 2 * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: atan(tmp1, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:13:02.549 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:02.549 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:02.550 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = 2 * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:13:05.006 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:05.006 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:05.007 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < tmp2.length; ++i) {
	result[resultOffset + i] = 2 * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: divide(y, yOffset, tmp2, 0, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:13:07.245 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:07.245 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:07.246 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < tmp2.length; ++i) {
	result[resultOffset + i] = 2 * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:13:09.349 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:09.349 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:09.350 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < tmp2.length; ++i) {
	result[resultOffset + i] = 2 * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = 2 * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:13:11.500 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:11.501 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:11.502 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < tmp2.length; ++i) {
	result[resultOffset + i] = 2 * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:13:13.947 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:13.947 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:13.949 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: subtract(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: divide(y, yOffset, tmp2, 0, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:13:16.166 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:16.166 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:16.168 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: subtract(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:13:18.434 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:18.434 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:18.435 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: subtract(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = 2 * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:13:20.975 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:20.975 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:20.977 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: subtract(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < tmp2.length; ++i) {
	result[resultOffset + i] = 2 * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:13:23.439 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:23.439 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:23.440 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset] = 
(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: atan(tmp1, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:13:25.970 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:25.970 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:25.971 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset] = 
(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:13:28.225 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:28.225 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:28.226 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset] = 
(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < tmp2.length; ++i) {
	result[resultOffset + i] = 2 * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:13:30.451 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:30.451 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:30.452 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset] = 
(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: subtract(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:13:32.815 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:32.815 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:32.816 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: atan(tmp1, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:13:34.803 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:34.803 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:34.804 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:13:37.322 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:37.322 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:37.323 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: subtract(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:13:39.719 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:39.719 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:39.720 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset] = 
(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:13:42.073 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:42.073 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:42.074 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:13:44.053 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:44.053 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:44.054 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.atan(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:13:46.398 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:46.398 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:46.399 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.atan(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:13:48.284 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:48.285 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:48.286 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:13:50.277 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:50.278 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:50.278 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:13:52.398 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:52.398 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:52.399 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:13:54.516 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:54.516 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:54.517 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:13:56.606 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:56.606 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:56.607 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:13:59.019 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:13:59.019 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:13:59.020 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:14:01.293 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:01.293 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:01.294 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:14:03.394 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:03.394 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:03.395 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[0] = q[1],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:14:05.580 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:05.580 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:05.581 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:14:07.736 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:07.736 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:07.737 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * x2) + q[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:14:09.851 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:09.852 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:09.853 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[n - 1] = (-n) * q[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:14:12.066 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:12.067 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:12.068 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:14:14.273 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:14.274 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:14.275 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double coeff = f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:14:16.476 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:16.476 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:16.477 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double f = 1.0 / (1 + x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:14:18.694 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:18.694 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:18.695 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:14:20.841 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:20.841 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:20.842 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] q = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:14:22.811 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:22.812 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:22.812 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:14:24.919 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:24.919 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:24.920 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = coeff * v,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:14:27.122 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:27.122 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:27.126 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:14:29.066 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:29.066 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:29.067 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i < tmp2.length; ++i) {
	result[resultOffset + i] = (-2) * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:14:30.998 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:30.998 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:30.999 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[] mappingIJ = mappingI[j],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] mappingI = compIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:14:32.982 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:32.982 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:32.983 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double product = mappingIJ[0] * f[mappingIJ[1]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[] mappingIJ = mappingI[j],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:14:35.147 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:35.147 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:35.148 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: product *= operand[operandOffset + mappingIJ[k]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double product = mappingIJ[0] * f[mappingIJ[1]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:14:37.334 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:37.334 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:37.335 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = 2; k < mappingIJ.length; ++k) {
	product *= operand[operandOffset + mappingIJ[k]];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: product *= operand[operandOffset + mappingIJ[k]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:14:39.759 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:39.760 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:39.761 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: r += product,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = 2; k < mappingIJ.length; ++k) {
	product *= operand[operandOffset + mappingIJ[k]];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:14:41.822 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:41.822 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:41.823 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int j = 0; j < mappingI.length; ++j) {
	final int[] mappingIJ = mappingI[j];
	double product = mappingIJ[0] * f[mappingIJ[1]];
	for (int k = 2; k < mappingIJ.length; ++k) {
		product *= operand[operandOffset + mappingIJ[k]];
	}
	r += product;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: r += product,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:14:44.176 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:44.177 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:44.178 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < compIndirection.length; ++i) {
	final int[][] mappingI = compIndirection[i];
	double r = 0;
	for (int j = 0; j < mappingI.length; ++j) {
		final int[] mappingIJ = mappingI[j];
		double product = mappingIJ[0] * f[mappingIJ[1]];
		for (int k = 2; k < mappingIJ.length; ++k) {
			product *= operand[operandOffset + mappingIJ[k]];
		}
		r += product;
	}
	result[resultOffset + i] = r;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < mappingI.length; ++j) {
	final int[] mappingIJ = mappingI[j];
	double product = mappingIJ[0] * f[mappingIJ[1]];
	for (int k = 2; k < mappingIJ.length; ++k) {
		product *= operand[operandOffset + mappingIJ[k]];
	}
	r += product;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:14:46.407 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:46.408 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:46.409 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double value = 0,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < compIndirection.length; ++i) {
	final int[][] mappingI = compIndirection[i];
	double r = 0;
	for (int j = 0; j < mappingI.length; ++j) {
		final int[] mappingIJ = mappingI[j];
		double product = mappingIJ[0] * f[mappingIJ[1]];
		for (int k = 2; k < mappingIJ.length; ++k) {
			product *= operand[operandOffset + mappingIJ[k]];
		}
		r += product;
	}
	result[resultOffset + i] = r;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:14:48.468 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:48.468 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:48.469 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i < tmp2.length; ++i) {
	result[resultOffset + i] = (-2) * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:14:50.453 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:50.453 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:50.454 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i < tmp2.length; ++i) {
	result[resultOffset + i] = (-2) * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(x, xOffset, x, xOffset, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:14:52.660 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:52.660 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:52.661 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i < tmp2.length; ++i) {
	result[resultOffset + i] = (-2) * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(y, yOffset, y, yOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:14:54.781 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:54.782 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:54.783 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i < tmp2.length; ++i) {
	result[resultOffset + i] = (-2) * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: divide(y, yOffset, tmp2, 0, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:14:57.229 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:57.229 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:57.230 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i < tmp2.length; ++i) {
	result[resultOffset + i] = (-2) * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = coeff * v,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:14:59.666 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:14:59.666 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:14:59.668 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i < tmp2.length; ++i) {
	result[resultOffset + i] = (-2) * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: subtract(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:15:02.182 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:02.182 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:02.184 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i < tmp2.length; ++i) {
	result[resultOffset + i] = (-2) * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:15:04.624 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:04.625 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:04.626 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i < tmp2.length; ++i) {
	result[resultOffset + i] = (-2) * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:15:07.062 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:07.062 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:07.063 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < compIndirection.length; ++i) {
	final int[][] mappingI = compIndirection[i];
	double r = 0;
	for (int j = 0; j < mappingI.length; ++j) {
		final int[] mappingIJ = mappingI[j];
		double product = mappingIJ[0] * f[mappingIJ[1]];
		for (int k = 2; k < mappingIJ.length; ++k) {
			product *= operand[operandOffset + mappingIJ[k]];
		}
		r += product;
	}
	result[resultOffset + i] = r;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:15:09.415 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:09.415 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:09.416 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < mappingI.length; ++j) {
	final int[] mappingIJ = mappingI[j];
	double product = mappingIJ[0] * f[mappingIJ[1]];
	for (int k = 2; k < mappingIJ.length; ++k) {
		product *= operand[operandOffset + mappingIJ[k]];
	}
	r += product;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:15:11.512 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:11.512 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:11.513 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = 2; k < mappingIJ.length; ++k) {
	product *= operand[operandOffset + mappingIJ[k]];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:15:13.453 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:13.453 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:13.454 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] mappingI = compIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added support for atan2 in DSCompiler.

09:15:15.943 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:15.944 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:15.945 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:15:18.516 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:18.516 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:18.517 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.atan(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:15:21.026 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:21.026 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:21.027 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:15:23.506 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:23.507 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:23.507 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:15:25.941 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:25.941 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:25.942 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:15:28.520 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:28.520 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:28.521 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:15:31.034 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:31.035 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:31.036 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:15:33.624 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:33.624 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:33.625 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:15:36.112 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:36.113 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:36.114 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:15:38.485 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:38.485 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:38.486 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[0] = q[1],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:15:40.797 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:40.797 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:40.798 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:15:42.785 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:42.785 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:42.786 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * x2) + q[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:15:45.051 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:45.051 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:45.052 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:15:46.981 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:46.981 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:46.982 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] q = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:15:49.020 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:49.020 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:49.021 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	p[n - 1] = (n - 1) * p[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:15:51.591 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:51.591 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:51.592 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = coeff * v,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:15:53.747 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:53.747 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:53.748 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

09:15:55.791 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:55.791 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:55.792 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

09:15:57.782 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:57.783 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:57.783 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.Arrays.fill(function, 1, 1 + order, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

09:15:59.876 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:15:59.876 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:15:59.877 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / (1.0 + operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

09:16:01.755 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:01.755 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:01.756 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] yLogX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:16:03.635 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:03.636 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:03.637 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x2 = x * x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

09:16:05.530 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:05.530 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:05.531 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:16:07.711 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:07.711 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:07.712 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

09:16:09.722 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:09.722 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:09.723 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Added a new package dealing with differentials.

09:16:11.728 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:11.728 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:11.729 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 1; n <= order; ++n) {


	double v = 0;
	p[n + 1] = n * p[n];
	for (int k = n + 1; k >= 0; k -= 2) {
		v = (v * t2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= t;
	}

	function[n] = v;

},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < compIndirection.length; ++i) {
	final int[][] mappingI = compIndirection[i];
	double r = 0;
	for (int j = 0; j < mappingI.length; ++j) {
		final int[] mappingIJ = mappingI[j];
		double product = mappingIJ[0] * f[mappingIJ[1]];
		for (int k = 2; k < mappingIJ.length; ++k) {
			product *= operand[operandOffset + mappingIJ[k]];
		}
		r += product;
	}
	result[resultOffset + i] = r;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:16:13.681 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:13.681 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:13.682 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: multiply(x, xOffset, x, xOffset, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:16:15.591 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:15.591 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:15.592 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp2 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:16:17.498 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:17.498 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:17.499 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: multiply(y, yOffset, y, yOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:16:19.385 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:19.386 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:19.386 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: add(tmp1, 0, tmp2, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:16:21.321 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:21.321 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:21.322 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: rootN(tmp2, 0, 2, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:16:23.266 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:23.266 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:23.267 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: add(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:16:25.204 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:25.204 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:25.205 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: divide(y, yOffset, tmp2, 0, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:16:27.174 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:27.175 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:27.176 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: atan(tmp1, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:16:29.165 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:29.166 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:29.167 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = 2 * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:16:31.168 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:31.168 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:31.169 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < tmp2.length; ++i) {
	result[resultOffset + i] = 2 * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:16:33.082 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:33.082 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:33.083 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: subtract(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:16:34.971 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:34.971 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:34.972 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset] = 
(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:16:36.891 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:36.891 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:36.892 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i < tmp2.length; ++i) {
	result[resultOffset + i] = (-2) * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:16:38.801 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:38.801 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:38.802 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	p[n - 1] = (n - 1) * p[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:16:40.972 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:40.973 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:40.974 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

09:16:43.383 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:43.384 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:43.385 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:16:45.690 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:45.690 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:45.691 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[0] = -1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:16:47.934 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:47.934 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:47.936 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x2 = x * x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:16:49.985 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:49.985 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:49.986 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double f = 1.0 / (1 - x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:16:52.080 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:52.081 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:52.082 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double coeff = org.apache.commons.math3.util.FastMath.sqrt(f),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:16:54.208 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:54.208 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:54.209 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = coeff * p[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:16:56.191 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:56.191 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:56.192 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[n - 1] = (n - 1) * p[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:16:58.196 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:16:58.196 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:16:58.197 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * x2) + p[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:17:00.136 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:00.136 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:00.138 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:17:02.143 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:02.143 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:02.144 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:17:04.263 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:04.264 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:04.264 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:17:06.247 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:06.247 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:06.248 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v *= x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:17:08.179 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:08.179 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:08.180 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:17:10.068 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:10.068 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:10.069 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.sqrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

09:17:12.078 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:12.078 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:12.079 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:17:14.638 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:14.639 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:14.640 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = coeff * v,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:17:17.066 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:17.066 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:17.067 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	p[n - 1] = (n - 1) * p[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:17:19.441 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:19.441 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:19.442 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] q = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:17:21.606 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:21.606 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:21.607 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

09:17:23.745 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:23.745 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:23.746 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:17:25.769 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:25.769 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:25.770 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.atan(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:17:28.064 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:28.065 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:28.066 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:17:29.959 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:29.959 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:29.960 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:17:32.015 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:32.015 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:32.016 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.sqrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:17:34.134 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:34.134 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:34.135 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:17:36.130 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:36.131 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:36.131 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (n == 3) {
	xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]);
} else {
	xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:17:38.013 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:38.013 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:38.014 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk *= xReciprocal * (nReciprocal - i),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:17:40.250 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:40.250 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:40.251 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:17:42.798 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:42.798 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:42.800 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[1] = 1,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:17:45.284 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:45.284 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:45.285 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

09:17:47.713 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:47.713 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:47.714 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:17:49.815 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:49.816 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:49.817 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t = org.apache.commons.math3.util.FastMath.tan(operand[operandOffset]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

09:17:52.094 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:52.094 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:52.095 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] function = new double[1 + order],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Added a new package dealing with differentials.

09:17:54.543 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:54.543 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:54.544 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] function = new double[1 + order],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Added a new package dealing with differentials.

09:17:56.775 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:56.775 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:56.776 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] function = new double[1 + order],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Added a new package dealing with differentials.

09:17:58.926 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:17:58.926 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:17:58.927 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] function = new double[1 + order],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[ERROR] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:84) - Error at generation 1
java.lang.IllegalArgumentException: Comparison method violates its general contract!
java.lang.IllegalArgumentException: Comparison method violates its general contract!
	at java.util.TimSort.mergeLo(TimSort.java:777)
	at java.util.TimSort.mergeAt(TimSort.java:514)
	at java.util.TimSort.mergeCollapse(TimSort.java:441)
	at java.util.TimSort.sort(TimSort.java:245)
	at java.util.Arrays.sort(Arrays.java:1512)
	at java.util.ArrayList.sort(ArrayList.java:1454)
	at java.util.Collections.sort(Collections.java:175)
	at fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy.getFixIngredient(PurposeBasedSearchStrategy.java:72)
	at fr.inria.astor.core.ingredientbased.IngredientBasedEvolutionaryRepairApproachImpl.createOperatorInstanceForPoint(IngredientBasedEvolutionaryRepairApproachImpl.java:95)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.modifyProgramVariant(EvolutionarySearchEngine.java:264)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.createNewProgramVariant(EvolutionarySearchEngine.java:198)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.processGenerations(EvolutionarySearchEngine.java:146)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:68)
	at fr.inria.main.evolution.AstorMain.run(AstorMain.java:203)
	at fr.inria.main.evolution.AstorMain.execute(AstorMain.java:247)
	at fr.inria.main.evolution.AstorMain.main(AstorMain.java:218)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - Time Repair Loop (s): 2306.001
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:172) - generationsexecuted: 1
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:247) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:257) - End Repair Search: NOT Found solution
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:208) - Time Total(s): 5605.014


Node: 002ad6361bca



Date: Mon Nov 25 09:17:59 EST 2019

cd /script/jGenProg_Defects4J_Math_20;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-20 \
	-failing org.apache.commons.math3.optimization.direct.CMAESOptimizerTest \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:purpose \
	-dependencies /script/jGenProg_Defects4J_Math_20/target/classes/:/script/jGenProg_Defects4J_Math_20/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

