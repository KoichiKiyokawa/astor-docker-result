Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO] 07:44:37,288 fr.inria.astor.core.setup.ProjectConfiguration:282 - Version of the JVM used: 1.7.0_181
[INFO] 07:44:37,294 main:381 - Java version of the JDK used to run tests: 1.7.0_181
[INFO] 07:44:37,295 main:382 - The compliance of the JVM is:  7
[INFO] 07:44:37,297 main:660 - command line arguments: [-mode  jgenprog  -location  .  -id  Math-7  -failing  org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:purpose  -dependencies  /script/jGenProg_Defects4J_Math_7/target/classes/:/script/jGenProg_Defects4J_Math_7/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO] 07:44:37,301 fr.inria.main.evolution.AstorMain:224 - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:975) - Source folders: [/script/jGenProg_Defects4J_Math_7/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:994) - Source Test folders: [/script/jGenProg_Defects4J_Math_7/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:108) - mode is Purpose
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.resolveTestsToRun(AstorCoreEngine.java:1311) - Test retrieved from classes: 782
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Math_7/./output_astor/AstorMain-Math-7//bin//default from 782 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Math_7/./output_astor/AstorMain-Math-7//bin//default, /script/jGenProg_Defects4J_Math_7/target/classes/, /script/jGenProg_Defects4J_Math_7/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testTwoSets
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testIllConditioned
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[21]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[22]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[23]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[24]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[25]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[26]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[47]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[48]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[49]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[50]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[51]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath828Cycle
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testCross
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBuildBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testTetrahedron
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIsometry
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInterval
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testMultiple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testSinglePoint
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSpecialValues
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.events.EventStateTest#closeEvents
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.exception.util.LocalizedFormatsTest#testMessageNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalZero
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testMath221
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testWave
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:4946, fails: 37, GZoltar suspicious 34354, with positive susp 2420
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 4946
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 1000 with susp > 0.1, we consider: 1000
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:898) - Setting up the max to 8172130 milliseconds (8172 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:240) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Math_7/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:68) - building model: /script/jGenProg_Defects4J_Math_7/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:82) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Math_7/target/classes/, /script/jGenProg_Defects4J_Math_7/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:779) - Number of CtTypes created: 709
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 1000
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=105, susp=0.24659848095803594]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=108, susp=0.24659848095803594]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=111, susp=0.24659848095803594]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=112, susp=0.24659848095803594]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=68, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=69, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=71, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=72, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=73, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=74, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=75, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=76, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=77, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=78, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=79, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=81, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=53, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=54, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=55, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=56, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=57, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=58, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=59, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=60, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=addPoint(DD)V, lineNumber=39, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=addPoint(DD)V, lineNumber=40, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=43, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=44, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=45, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=46, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=47, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getObjectiveFunction()Lorg/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunction;, lineNumber=51, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getObjectiveFunctionGradient()Lorg/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunctionGradient;, lineNumber=66, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=access$000(Lorg/apache/commons/math3/optim/nonlinear/scalar/gradient/CircleScalar;)Ljava/util/ArrayList;, lineNumber=31, susp=0.23249527748763857]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getPlus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=119, susp=0.18316875326179907]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getMinus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=126, susp=0.18316875326179907]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=62, susp=0.16778901380350608]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=63, susp=0.16778901380350608]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=65, susp=0.16778901380350608]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=66, susp=0.16778901380350608]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=68, susp=0.16778901380350608]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=71, susp=0.16778901380350608]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=72, susp=0.16778901380350608]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=90, susp=0.16778901380350608]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=95, susp=0.16778901380350608]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=99, susp=0.16778901380350608]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=100, susp=0.16778901380350608]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=134, susp=0.16778901380350608]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=plusFound()Z, lineNumber=140, susp=0.16778901380350608]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=minusFound()Z, lineNumber=147, susp=0.16778901380350608]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=116, susp=0.15949044456578]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=117, susp=0.15949044456578]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=118, susp=0.15949044456578]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=120, susp=0.15949044456578]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=121, susp=0.15949044456578]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=113, susp=0.15949044456578]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=114, susp=0.15949044456578]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=125, susp=0.15949044456578]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=126, susp=0.15949044456578]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=130, susp=0.15949044456578]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=access$000(Lorg/apache/commons/math3/optim/nonlinear/scalar/LineSearch;)Lorg/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer;, lineNumber=35, susp=0.15949044456578]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 1000,  321
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 321
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 321, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 1.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Math_7/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 8172130
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-7
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= purpose
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Math_7/target/classes/:/script/jGenProg_Defects4J_Math_7/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:continuewhenmodelfail= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
08:31:24.623 [main] INFO  org.nd4j.linalg.factory.Nd4jBackend - Loaded [CpuBackend] backend
08:31:26.089 [main] INFO  org.nd4j.nativeblas.NativeOpsHolder - Number of threads used for NativeOps: 6
08:31:26.865 [main] INFO  org.nd4j.nativeblas.Nd4jBlas - Number of threads used for BLAS: 6
08:31:26.869 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Backend used: [CPU]; OS: [Linux]
08:31:26.869 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Cores: [48]; Memory: [3.5GB];
08:31:26.869 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Blas vendor: [MKL]
08:31:27.415 [main] INFO  o.d.m.e.loader.WordVectorSerializer - Projected memory use for model: [3.96 MB]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:31:30.208 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:30.209 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:30.219 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T norm = axis.getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T inv = 
q0.multiply(q0).add(q1.multiply(q1)).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:31:32.659 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:32.659 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:32.661 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T halfAngle = angle.multiply(-0.5),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T norm = axis.getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:31:35.129 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:35.129 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:35.130 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T coeff = halfAngle.sin().divide(norm),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T halfAngle = angle.multiply(-0.5),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:31:37.168 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:37.169 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:37.170 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T[][] ort = orthogonalizeMatrix(m, threshold),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T coeff = halfAngle.sin().divide(norm),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:31:39.353 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:39.354 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:39.355 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T[][] ort = orthogonalizeMatrix(m, threshold),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:31:41.649 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:41.649 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:41.651 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T d1 = ort[0][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:31:44.171 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:44.172 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:44.173 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T d2 = ort[0][1].multiply(ort[1][2]).subtract(ort[1][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T d1 = ort[0][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:31:46.734 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:46.734 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:46.736 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T det = 
ort[0][0].multiply(d0).subtract(ort[1][0].multiply(d1)).add(ort[2][0].multiply(d2)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T d2 = ort[0][1].multiply(ort[1][2]).subtract(ort[1][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:31:49.044 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:49.044 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:49.045 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T[] quat = mat2quat(ort),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T det = 
ort[0][0].multiply(d0).subtract(ort[1][0].multiply(d1)).add(ort[2][0].multiply(d2)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:31:51.202 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:51.203 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:51.204 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> u3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(u1, u2).normalize(),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T[] quat = mat2quat(ort),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:31:53.452 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:53.453 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:53.454 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> u3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(u1, u2).normalize(),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:31:55.530 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:55.530 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:55.531 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> u3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(u1, u2).normalize(),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T halfAngle = angle.multiply(-0.5),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:31:57.884 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:57.884 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:57.886 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> u3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(u1, u2).normalize(),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T norm = axis.getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:00.108 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:00.109 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:00.110 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> u3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(u1, u2).normalize(),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T inv = 
q0.multiply(q0).add(q1.multiply(q1)).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:02.545 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:02.545 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:02.546 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2).normalize(),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T[][] ort = orthogonalizeMatrix(m, threshold),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:04.542 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:04.543 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:04.544 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2).normalize(),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T norm = axis.getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:06.908 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:06.909 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:06.910 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2).normalize(),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T inv = 
q0.multiply(q0).add(q1.multiply(q1)).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

08:32:08.939 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:08.940 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:08.941 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2).normalize(),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> u3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(u1, u2).normalize(),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:11.088 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:11.088 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:11.089 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T[][] array = org.apache.commons.math3.util.MathArrays.buildArray(u1.getX().getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T[][] ort = orthogonalizeMatrix(m, threshold),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:13.343 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:13.344 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:13.344 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T[][] array = org.apache.commons.math3.util.MathArrays.buildArray(u1.getX().getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T d2 = ort[0][1].multiply(ort[1][2]).subtract(ort[1][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:15.539 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:15.539 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:15.544 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T[][] array = org.apache.commons.math3.util.MathArrays.buildArray(u1.getX().getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T[] quat = mat2quat(ort),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:17.753 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:17.754 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:17.755 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T[] quat = mat2quat(array),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T[][] ort = orthogonalizeMatrix(m, threshold),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:19.984 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:19.985 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:19.986 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T[] quat = mat2quat(array),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T det = 
ort[0][0].multiply(d0).subtract(ort[1][0].multiply(d1)).add(ort[2][0].multiply(d2)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:22.071 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:22.071 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:22.072 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T[] quat = mat2quat(array),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T[][] array = org.apache.commons.math3.util.MathArrays.buildArray(u1.getX().getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:24.379 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:24.380 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:24.380 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T normProduct = u.getNorm().multiply(v.getNorm()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:26.690 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:26.691 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:26.693 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T normProduct = u.getNorm().multiply(v.getNorm()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T[] quat = mat2quat(ort),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:29.155 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:29.156 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:29.158 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T normProduct = u.getNorm().multiply(v.getNorm()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T[] quat = mat2quat(array),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:31.810 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:31.811 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:31.812 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(u, v),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:34.142 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:34.143 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:34.144 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(u, v),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T norm = axis.getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

08:32:36.647 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:36.647 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:36.648 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(u, v),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2).normalize(),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:39.146 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:39.147 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:39.148 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(u, v),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T inv = 
q0.multiply(q0).add(q1.multiply(q1)).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:41.485 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:41.485 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:41.486 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> w = u.orthogonal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:43.538 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:43.539 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:43.540 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> w = u.orthogonal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T[] quat = mat2quat(ort),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:45.836 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:45.837 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:45.838 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> w = u.orthogonal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T[] quat = mat2quat(array),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:47.743 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:47.744 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:47.745 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> w = u.orthogonal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T normProduct = u.getNorm().multiply(v.getNorm()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:49.924 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:49.925 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:49.926 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T coeff = q0.multiply(normProduct).multiply(2.0).reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:51.964 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:51.965 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:51.966 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T coeff = q0.multiply(normProduct).multiply(2.0).reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T[][] array = org.apache.commons.math3.util.MathArrays.buildArray(u1.getX().getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:53.980 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:53.981 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:53.982 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T coeff = q0.multiply(normProduct).multiply(2.0).reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T normProduct = u.getNorm().multiply(v.getNorm()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:55.860 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:55.860 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:55.861 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T coeff = q0.multiply(normProduct).multiply(2.0).reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> w = u.orthogonal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:57.832 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:57.833 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:57.834 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T d1 = ort[0][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:32:59.940 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:59.941 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:59.942 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T norm = axis.getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

08:33:01.937 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:01.937 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:01.939 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(u, v),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:04.434 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:04.434 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:04.435 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T inv = 
q0.multiply(q0).add(q1.multiply(q1)).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:07.006 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:07.006 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:07.007 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T one = alpha1.getField().getOne(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:09.506 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:09.507 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:09.508 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T one = alpha1.getField().getOne(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T[][] array = org.apache.commons.math3.util.MathArrays.buildArray(u1.getX().getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:11.820 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:11.821 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:11.822 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T one = alpha1.getField().getOne(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> w = u.orthogonal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:14.092 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:14.092 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:14.094 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T one = alpha1.getField().getOne(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T coeff = q0.multiply(normProduct).multiply(2.0).reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:16.495 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:16.496 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:16.497 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r1 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA1()), alpha1),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T d1 = ort[0][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:18.503 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:18.503 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:18.505 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r1 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA1()), alpha1),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T[] quat = mat2quat(array),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:20.933 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:20.933 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:20.934 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r1 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA1()), alpha1),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T coeff = q0.multiply(normProduct).multiply(2.0).reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:22.836 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:22.836 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:22.837 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r1 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA1()), alpha1),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T one = alpha1.getField().getOne(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:24.815 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:24.815 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:24.816 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r2 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA2()), alpha2),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T d1 = ort[0][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:26.939 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:26.939 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:26.940 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r2 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA2()), alpha2),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T normProduct = u.getNorm().multiply(v.getNorm()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:29.058 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:29.058 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:29.059 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r2 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA2()), alpha2),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T one = alpha1.getField().getOne(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:30.974 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:30.974 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:30.975 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r2 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA2()), alpha2),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r1 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA1()), alpha1),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:32.905 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:32.905 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:32.906 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r3 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA3()), alpha3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T d2 = ort[0][1].multiply(ort[1][2]).subtract(ort[1][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:35.009 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:35.009 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:35.010 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r3 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA3()), alpha3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> w = u.orthogonal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:36.938 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:36.938 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:36.939 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r3 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA3()), alpha3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r1 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA1()), alpha1),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:38.990 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:38.990 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:38.991 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r3 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA3()), alpha3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r2 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA2()), alpha2),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:40.999 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:41.000 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:41.001 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> composed = r1.applyTo(r2.applyTo(r3)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T d2 = ort[0][1].multiply(ort[1][2]).subtract(ort[1][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:42.888 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:42.888 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:42.889 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> composed = r1.applyTo(r2.applyTo(r3)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> w = u.orthogonal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:44.798 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:44.798 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:44.800 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> composed = r1.applyTo(r2.applyTo(r3)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r1 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA1()), alpha1),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:46.747 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:46.747 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:46.748 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> composed = r1.applyTo(r2.applyTo(r3)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r3 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA3()), alpha3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:48.647 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:48.647 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:48.649 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T[] quat = org.apache.commons.math3.util.MathArrays.buildArray(ort[0][0].getField(), 4),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T det = 
ort[0][0].multiply(d0).subtract(ort[1][0].multiply(d1)).add(ort[2][0].multiply(d2)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:50.619 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:50.619 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:50.620 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T[] quat = org.apache.commons.math3.util.MathArrays.buildArray(ort[0][0].getField(), 4),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T coeff = q0.multiply(normProduct).multiply(2.0).reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:52.590 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:52.590 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:52.591 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T[] quat = org.apache.commons.math3.util.MathArrays.buildArray(ort[0][0].getField(), 4),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r2 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA2()), alpha2),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:54.621 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:54.621 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:54.622 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T[] quat = org.apache.commons.math3.util.MathArrays.buildArray(ort[0][0].getField(), 4),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> composed = r1.applyTo(r2.applyTo(r3)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:56.713 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:56.713 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:56.714 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T s = ort[0][0].add(ort[1][1]).add(ort[2][2]),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T det = 
ort[0][0].multiply(d0).subtract(ort[1][0].multiply(d1)).add(ort[2][0].multiply(d2)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:33:59.166 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:59.167 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:59.168 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T s = ort[0][0].add(ort[1][1]).add(ort[2][2]),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T one = alpha1.getField().getOne(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:01.601 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:01.601 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:01.602 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T s = ort[0][0].add(ort[1][1]).add(ort[2][2]),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r3 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA3()), alpha3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:03.579 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:03.580 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:03.580 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T s = ort[0][0].add(ort[1][1]).add(ort[2][2]),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T[] quat = org.apache.commons.math3.util.MathArrays.buildArray(ort[0][0].getField(), 4),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:06.000 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:06.000 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:06.001 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T inv = quat[1].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:07.999 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:08.000 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:08.001 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T inv = quat[2].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T inv = quat[1].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:10.481 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:10.481 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:10.482 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T inv = quat[3].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T inv = quat[2].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:12.916 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:12.916 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:12.917 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T squaredSine = q1.multiply(q1).add(q2.multiply(q2)).add(q3.multiply(q3)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T inv = quat[3].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:14.865 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:14.865 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:14.866 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.Field<T> field = squaredSine.getField(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T squaredSine = q1.multiply(q1).add(q2.multiply(q2)).add(q3.multiply(q3)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:16.864 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:16.864 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:16.865 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T inverse = squaredSine.sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.Field<T> field = squaredSine.getField(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:19.159 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:19.159 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:19.160 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T inverse = squaredSine.sqrt().reciprocal().negate(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T inverse = squaredSine.sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:21.160 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:21.161 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:21.161 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(0, 0, 1)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T inverse = squaredSine.sqrt().reciprocal().negate(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:23.092 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:23.092 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:23.092 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(1, 0, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(0, 0, 1)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:25.295 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:25.296 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:25.297 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(0, 1, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(1, 0, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:27.358 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:27.358 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:27.359 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(0, 1, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(0, 1, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:29.239 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:29.240 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:29.242 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(1, 0, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(0, 1, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:31.335 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:31.335 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:31.336 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(0, 0, 1)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(1, 0, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:33.246 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:33.246 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:33.247 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T[] array = org.apache.commons.math3.util.MathArrays.buildArray(a0.getField(), 3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(0, 0, 1)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:35.309 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:35.309 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:35.310 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T zero = q0.getField().getZero(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T[] array = org.apache.commons.math3.util.MathArrays.buildArray(a0.getField(), 3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:37.362 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:37.362 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:37.363 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T q0q0 = q0.multiply(q0),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T zero = q0.getField().getZero(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:39.253 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:39.254 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:39.254 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T q0q1 = q0.multiply(q1),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T q0q0 = q0.multiply(q0),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:41.111 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:41.112 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:41.113 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T q0q2 = q0.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T q0q1 = q0.multiply(q1),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:42.997 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:42.997 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:42.998 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T q0q3 = q0.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T q0q2 = q0.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:45.004 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:45.004 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:45.005 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T q1q1 = q1.multiply(q1),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T q0q3 = q0.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:47.107 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:47.107 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:47.108 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T q1q2 = q1.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T q1q1 = q1.multiply(q1),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:49.180 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:49.180 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:49.181 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T q1q3 = q1.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T q1q2 = q1.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:51.075 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:51.075 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:51.076 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T q2q2 = q2.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T q1q3 = q1.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:53.047 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:53.048 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:53.048 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T q2q3 = q2.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T q2q2 = q2.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:54.943 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:54.943 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:54.944 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T q3q3 = q3.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T q2q3 = q2.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:56.838 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:56.838 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:56.839 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T[][] m = org.apache.commons.math3.util.MathArrays.buildArray(q0.getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T q3q3 = q3.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:34:58.715 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:58.715 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:58.716 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T x = u.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T[][] m = org.apache.commons.math3.util.MathArrays.buildArray(q0.getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:00.578 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:00.578 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:00.579 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T y = u.getY(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T x = u.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:02.588 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:02.589 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:02.590 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T z = u.getZ(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T y = u.getY(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:04.495 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:04.495 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:04.497 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T z = u.getZ(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:06.502 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:06.502 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:06.503 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double x = u.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:08.410 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:08.411 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:08.411 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double y = u.getY(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double x = u.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:10.451 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:10.451 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:10.452 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double z = u.getZ(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double y = u.getY(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:12.403 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:12.403 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:12.404 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T x = in[0],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double z = u.getZ(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:14.358 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:14.359 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:14.359 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T y = in[1],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T x = in[0],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:16.301 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:16.301 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:16.303 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T z = in[2],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T y = in[1],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:18.498 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:18.498 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:18.499 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double x = in[0],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T z = in[2],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:20.975 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:20.975 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:20.976 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double y = in[1],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double x = in[0],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:23.252 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:23.252 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:23.253 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double z = in[2],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double y = in[1],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:25.322 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:25.322 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:25.323 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T s = x.multiply(r.getQ1()).add(y.multiply(r.getQ2())).add(z.multiply(r.getQ3())),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double z = in[2],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:27.374 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:27.374 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:27.375 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T m0 = q0.negate(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T s = x.multiply(r.getQ1()).add(y.multiply(r.getQ2())).add(z.multiply(r.getQ3())),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:29.468 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:29.468 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:29.469 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double m0 = -r.getQ0(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T m0 = q0.negate(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:31.381 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:31.381 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:31.382 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T x00 = m[0][0],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double m0 = -r.getQ0(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:33.484 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:33.484 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:33.485 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T x01 = m[0][1],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T x00 = m[0][0],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:35.774 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:35.775 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:35.776 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T x02 = m[0][2],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T x01 = m[0][1],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:38.117 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:38.118 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:38.119 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T x10 = m[1][0],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T x02 = m[0][2],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:40.569 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:40.569 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:40.569 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T x11 = m[1][1],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T x10 = m[1][0],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:42.634 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:42.635 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:42.636 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T x12 = m[1][2],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T x11 = m[1][1],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:44.964 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:44.965 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:44.965 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T x20 = m[2][0],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T x12 = m[1][2],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:46.958 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:46.958 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:46.959 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T x21 = m[2][1],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T x20 = m[2][0],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:48.863 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:48.863 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:48.864 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T x22 = m[2][2],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T x21 = m[2][1],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:50.869 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:50.869 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:50.871 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double fn = 0,commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T x22 = m[2][2],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:53.081 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:53.082 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:53.083 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double fn1,commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double fn = 0,commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:55.177 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:55.177 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:55.178 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T[][] o = org.apache.commons.math3.util.MathArrays.buildArray(m[0][0].getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double fn1,commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:57.077 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:57.078 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:57.079 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: int i = 0,commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T[][] o = org.apache.commons.math3.util.MathArrays.buildArray(m[0][0].getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:35:59.018 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:59.019 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:59.019 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T mx00 = m[0][0].multiply(x00).add(m[1][0].multiply(x10)).add(m[2][0].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: int i = 0,commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:01.060 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:01.060 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:01.061 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T mx10 = m[0][1].multiply(x00).add(m[1][1].multiply(x10)).add(m[2][1].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T mx00 = m[0][0].multiply(x00).add(m[1][0].multiply(x10)).add(m[2][0].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:03.107 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:03.108 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:03.108 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T mx20 = m[0][2].multiply(x00).add(m[1][2].multiply(x10)).add(m[2][2].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T mx10 = m[0][1].multiply(x00).add(m[1][1].multiply(x10)).add(m[2][1].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:05.108 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:05.108 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:05.109 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T mx01 = m[0][0].multiply(x01).add(m[1][0].multiply(x11)).add(m[2][0].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T mx20 = m[0][2].multiply(x00).add(m[1][2].multiply(x10)).add(m[2][2].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:07.062 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:07.063 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:07.063 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T mx11 = m[0][1].multiply(x01).add(m[1][1].multiply(x11)).add(m[2][1].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T mx01 = m[0][0].multiply(x01).add(m[1][0].multiply(x11)).add(m[2][0].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:08.924 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:08.924 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:08.925 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T mx21 = m[0][2].multiply(x01).add(m[1][2].multiply(x11)).add(m[2][2].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T mx11 = m[0][1].multiply(x01).add(m[1][1].multiply(x11)).add(m[2][1].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:10.818 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:10.818 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:10.819 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T mx02 = m[0][0].multiply(x02).add(m[1][0].multiply(x12)).add(m[2][0].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T mx21 = m[0][2].multiply(x01).add(m[1][2].multiply(x11)).add(m[2][2].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:12.769 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:12.769 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:12.770 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T mx12 = m[0][1].multiply(x02).add(m[1][1].multiply(x12)).add(m[2][1].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T mx02 = m[0][0].multiply(x02).add(m[1][0].multiply(x12)).add(m[2][0].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:14.737 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:14.737 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:14.738 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T mx22 = m[0][2].multiply(x02).add(m[1][2].multiply(x12)).add(m[2][2].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T mx12 = m[0][1].multiply(x02).add(m[1][1].multiply(x12)).add(m[2][1].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:16.652 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:16.652 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:16.653 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double corr00 = o[0][0].getReal() - m[0][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T mx22 = m[0][2].multiply(x02).add(m[1][2].multiply(x12)).add(m[2][2].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:18.615 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:18.615 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:18.616 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double corr01 = o[0][1].getReal() - m[0][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double corr00 = o[0][0].getReal() - m[0][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:20.628 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:20.628 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:20.629 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double corr02 = o[0][2].getReal() - m[0][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double corr01 = o[0][1].getReal() - m[0][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:22.598 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:22.598 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:22.599 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double corr10 = o[1][0].getReal() - m[1][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double corr02 = o[0][2].getReal() - m[0][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:24.478 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:24.478 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:24.479 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double corr11 = o[1][1].getReal() - m[1][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double corr10 = o[1][0].getReal() - m[1][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:26.343 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:26.343 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:26.344 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double corr12 = o[1][2].getReal() - m[1][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double corr11 = o[1][1].getReal() - m[1][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:28.279 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:28.279 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:28.280 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double corr20 = o[2][0].getReal() - m[2][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double corr12 = o[1][2].getReal() - m[1][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:30.197 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:30.197 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:30.198 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double corr21 = o[2][1].getReal() - m[2][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double corr20 = o[2][0].getReal() - m[2][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:32.124 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:32.125 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:32.126 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double corr22 = o[2][2].getReal() - m[2][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double corr21 = o[2][1].getReal() - m[2][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:34.108 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:34.109 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:34.110 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T cosDelta = delta.cos(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double corr22 = o[2][2].getReal() - m[2][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:36.023 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:36.023 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:36.024 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T prototype = a1,commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T cosDelta = delta.cos(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:37.983 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:37.983 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:37.984 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T prototype = u1.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T prototype = a1,commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:40.094 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:40.094 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:40.095 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T[] array = org.apache.commons.math3.util.MathArrays.buildArray(x.getField(), 3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T prototype = u1.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:42.045 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:42.046 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:42.046 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T xAbs = x.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T[] array = org.apache.commons.math3.util.MathArrays.buildArray(x.getField(), 3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:44.239 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:44.240 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:44.240 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T yAbs = y.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T xAbs = x.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:46.700 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:46.701 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:46.702 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T zAbs = z.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T yAbs = y.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:48.706 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:48.706 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:48.707 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T s = getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T zAbs = z.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:51.068 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:51.068 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:51.069 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double threshold = 0.6 * getNorm().getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T s = getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:53.081 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:53.081 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:53.082 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T inverse = y.multiply(y).add(z.multiply(z)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double threshold = 0.6 * getNorm().getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:55.376 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:55.376 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:55.377 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T inverse = x.multiply(x).add(z.multiply(z)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T inverse = y.multiply(y).add(z.multiply(z)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:57.252 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:57.252 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:57.253 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T inverse = x.multiply(x).add(z.multiply(z)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:36:59.307 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:59.307 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:59.308 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T normProduct = v1.getNorm().multiply(v2.getNorm()),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Brought back some useful static methods.

08:37:01.379 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:01.379 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:01.380 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> u3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(u1, u2).normalize(),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Brought back some useful static methods.

08:37:03.443 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:03.443 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:03.444 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2).normalize(),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Brought back some useful static methods.

08:37:05.389 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:05.389 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:05.390 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:37:07.311 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:07.311 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:07.312 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T coeff = halfAngle.sin().divide(norm),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:37:09.817 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:09.817 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:09.818 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T[] quat = mat2quat(array),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:37:12.286 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:12.287 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:12.288 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r2 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA2()), alpha2),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:37:14.577 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:14.577 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:14.579 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T[] quat = org.apache.commons.math3.util.MathArrays.buildArray(ort[0][0].getField(), 4),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:37:16.994 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:16.994 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:16.995 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T s = ort[0][0].add(ort[1][1]).add(ort[2][2]),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

08:37:19.070 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:19.070 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:19.071 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T normProduct = v1.getNorm().multiply(v2.getNorm()),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Brought back some useful static methods.

08:37:21.007 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:21.008 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:21.008 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double threshold = normProduct.getReal() * 0.9999,commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:37:23.155 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:23.155 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:23.156 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double threshold = normProduct.getReal() * 0.9999,commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

08:37:25.495 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:25.496 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:25.497 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:37:27.735 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:27.735 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:27.737 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double threshold = normProduct.getReal() * 0.9999,commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Brought back some useful static methods.

08:37:29.734 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:29.734 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:29.735 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> rhs = ((org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>) (other)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:37:31.716 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:31.716 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:31.717 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> rhs = ((org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>) (other)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double threshold = normProduct.getReal() * 0.9999,commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Brought back some useful static methods.

08:37:33.805 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:33.805 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:33.806 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dx = v.x.subtract(x).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:37:35.941 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:35.941 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:35.941 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dx = v.x.subtract(x).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> rhs = ((org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>) (other)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:37:37.906 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:37.907 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:37.908 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dy = v.y.subtract(y).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double threshold = normProduct.getReal() * 0.9999,commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:37:39.823 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:39.823 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:39.824 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dy = v.y.subtract(y).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dx = v.x.subtract(x).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:37:41.889 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:41.890 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:41.891 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dz = v.z.subtract(z).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double threshold = normProduct.getReal() * 0.9999,commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:37:43.898 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:43.898 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:43.899 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dz = v.z.subtract(z).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dx = v.x.subtract(x).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:37:45.912 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:45.912 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:45.913 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dz = v.z.subtract(z).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dy = v.y.subtract(y).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:37:47.907 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:47.907 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:47.908 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dx = x.subtract(v.getX()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> rhs = ((org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>) (other)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:37:49.956 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:49.956 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:49.957 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dx = x.subtract(v.getX()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dy = v.y.subtract(y).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:37:51.963 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:51.963 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:51.964 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dx = x.subtract(v.getX()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dz = v.z.subtract(z).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:37:53.877 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:53.877 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:53.878 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dy = y.subtract(v.getY()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> rhs = ((org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>) (other)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:37:55.763 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:55.763 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:55.764 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dy = y.subtract(v.getY()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dz = v.z.subtract(z).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:37:57.742 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:57.742 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:57.743 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dy = y.subtract(v.getY()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dx = x.subtract(v.getX()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:37:59.642 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:59.642 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:59.643 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dz = z.subtract(v.getZ()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dx = v.x.subtract(x).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:01.602 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:01.603 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:01.603 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dz = z.subtract(v.getZ()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dx = x.subtract(v.getX()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:03.488 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:03.488 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:03.489 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dz = z.subtract(v.getZ()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dy = y.subtract(v.getY()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:05.465 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:05.465 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:05.466 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dx = v.x.subtract(x),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dx = v.x.subtract(x).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:07.476 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:07.476 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:07.477 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dx = v.x.subtract(x),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dx = x.subtract(v.getX()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:09.392 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:09.392 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:09.393 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dx = v.x.subtract(x),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dz = z.subtract(v.getZ()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:11.335 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:11.335 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:11.336 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dy = v.y.subtract(y),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dy = v.y.subtract(y).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:13.252 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:13.253 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:13.253 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dy = v.y.subtract(y),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dy = y.subtract(v.getY()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:15.194 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:15.194 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:15.195 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dy = v.y.subtract(y),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dx = v.x.subtract(x),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:17.117 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:17.117 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:17.118 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dz = v.z.subtract(z),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dy = v.y.subtract(y).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:19.265 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:19.265 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:19.266 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dz = v.z.subtract(z),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dz = z.subtract(v.getZ()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:21.140 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:21.140 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:21.141 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dz = v.z.subtract(z),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dy = v.y.subtract(y),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:23.019 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:23.019 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:23.020 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dx = x.subtract(v.getX()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dz = v.z.subtract(z).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:24.937 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:24.938 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:24.938 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dx = x.subtract(v.getX()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dx = v.x.subtract(x),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:26.833 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:26.833 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:26.834 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dx = x.subtract(v.getX()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dz = v.z.subtract(z),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:28.726 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:28.727 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:28.727 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dy = y.subtract(v.getY()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dz = v.z.subtract(z).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:30.760 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:30.761 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:30.761 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dy = y.subtract(v.getY()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dx = v.x.subtract(x),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:32.653 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:32.653 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:32.653 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dy = y.subtract(v.getY()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dz = v.z.subtract(z),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:34.556 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:34.556 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:34.557 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dy = y.subtract(v.getY()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dx = x.subtract(v.getX()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:36.551 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:36.552 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:36.552 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dz = z.subtract(v.getZ()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dx = x.subtract(v.getX()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:38.468 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:38.468 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:38.468 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dz = z.subtract(v.getZ()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dy = v.y.subtract(y),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:40.413 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:40.413 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:40.414 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dz = z.subtract(v.getZ()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dx = x.subtract(v.getX()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:42.351 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:42.351 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:42.352 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T dz = z.subtract(v.getZ()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dy = y.subtract(v.getY()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:44.216 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:44.216 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:44.217 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = p2.subtract(p1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dx = x.subtract(v.getX()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:46.105 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:46.105 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:46.106 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = p2.subtract(p1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dz = v.z.subtract(z),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:48.044 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:48.044 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:48.045 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = p2.subtract(p1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dy = y.subtract(v.getY()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:49.934 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:49.934 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:49.935 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = p2.subtract(p1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dz = z.subtract(v.getZ()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:51.915 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:51.915 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:51.916 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double norm2 = delta.getNormSq(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dy = y.subtract(v.getY()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:53.797 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:53.797 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:53.798 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double norm2 = delta.getNormSq(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dx = x.subtract(v.getX()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:55.654 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:55.654 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:55.655 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double norm2 = delta.getNormSq(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dz = z.subtract(v.getZ()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:57.538 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:57.538 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:57.539 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double norm2 = delta.getNormSq(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = p2.subtract(p1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy of 3D Line.revert().
, ingredientB: Added a new ExtendedFieldElement interface.

08:38:59.424 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:59.424 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:59.425 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line reverted = new org.apache.commons.math3.geometry.euclidean.threed.Line(this),commit: Fixed accuracy of 3D Line.revert().
}, sim: 0.127969
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dy = y.subtract(v.getY()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy of 3D Line.revert().
, ingredientB: Added a new ExtendedFieldElement interface.

08:39:01.309 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:01.309 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:01.310 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line reverted = new org.apache.commons.math3.geometry.euclidean.threed.Line(this),commit: Fixed accuracy of 3D Line.revert().
}, sim: 0.127969
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> rhs = ((org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>) (other)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy of 3D Line.revert().
, ingredientB: Brought back some useful static methods.

08:39:03.191 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:03.191 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:03.192 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line reverted = new org.apache.commons.math3.geometry.euclidean.threed.Line(this),commit: Fixed accuracy of 3D Line.revert().
}, sim: 0.127969
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy of 3D Line.revert().
, ingredientB: Brought back some useful static methods.

08:39:05.066 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:05.066 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:05.067 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line reverted = new org.apache.commons.math3.geometry.euclidean.threed.Line(this),commit: Fixed accuracy of 3D Line.revert().
}, sim: 0.127969
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy of 3D Line.revert().
, ingredientB: Brought back some useful static methods.

08:39:06.955 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:06.955 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:06.956 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line reverted = new org.apache.commons.math3.geometry.euclidean.threed.Line(this),commit: Fixed accuracy of 3D Line.revert().
}, sim: 0.127969
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T normProduct = v1.getNorm().multiply(v2.getNorm()),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Added a new ExtendedFieldElement interface.

08:39:08.890 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:08.891 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:08.892 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D d = p.subtract(zero),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dy = y.subtract(v.getY()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Added a new ExtendedFieldElement interface.

08:39:10.777 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:10.777 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:10.778 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D d = p.subtract(zero),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dy = y.subtract(v.getY()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:12.684 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:12.684 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:12.685 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D d = p.subtract(zero),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double norm2 = delta.getNormSq(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Added a new ExtendedFieldElement interface.

08:39:14.581 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:14.581 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:14.582 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D n = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1.0, d, -d.dotProduct(direction), direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dz = z.subtract(v.getZ()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Added a new ExtendedFieldElement interface.

08:39:16.484 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:16.484 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:16.485 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D n = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1.0, d, -d.dotProduct(direction), direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dz = z.subtract(v.getZ()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:18.489 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:18.489 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:18.490 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D n = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1.0, d, -d.dotProduct(direction), direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D d = p.subtract(zero),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Added a new ExtendedFieldElement interface.

08:39:20.364 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:20.365 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:20.365 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D normal = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(direction, line.direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dz = z.subtract(v.getZ()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Added a new ExtendedFieldElement interface.

08:39:22.349 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:22.349 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:22.349 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D normal = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(direction, line.direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dz = z.subtract(v.getZ()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:24.243 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:24.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:24.244 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D normal = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(direction, line.direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D n = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1.0, d, -d.dotProduct(direction), direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Added a new ExtendedFieldElement interface.

08:39:26.132 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:26.132 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:26.133 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double n = normal.getNorm(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dx = v.x.subtract(x),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:28.017 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:28.018 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:28.019 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double n = normal.getNorm(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = p2.subtract(p1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:29.993 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:29.993 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:29.994 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double n = normal.getNorm(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D d = p.subtract(zero),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:31.935 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:31.935 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:31.936 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double n = normal.getNorm(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D normal = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(direction, line.direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Added a new ExtendedFieldElement interface.

08:39:33.826 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:33.826 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:33.827 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double offset = line.zero.subtract(zero).dotProduct(normal) / n,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dx = v.x.subtract(x),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:35.787 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:35.787 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:35.788 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double offset = line.zero.subtract(zero).dotProduct(normal) / n,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double norm2 = delta.getNormSq(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:37.752 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:37.752 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:37.753 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double offset = line.zero.subtract(zero).dotProduct(normal) / n,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D n = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1.0, d, -d.dotProduct(direction), direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:40.274 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:40.274 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:40.275 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double offset = line.zero.subtract(zero).dotProduct(normal) / n,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double n = normal.getNorm(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:42.718 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:42.719 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:42.720 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double n = 1 - (cos * cos),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double cos = direction.dotProduct(line.direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:45.108 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:45.109 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:45.110 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta0 = line.zero.subtract(zero),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double n = 1 - (cos * cos),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:47.530 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:47.530 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:47.532 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double a = delta0.dotProduct(direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta0 = line.zero.subtract(zero),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:49.822 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:49.822 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:49.823 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double b = delta0.dotProduct(line.direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double a = delta0.dotProduct(direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:52.125 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:52.125 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:52.125 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D closest = closestPoint(line),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double b = delta0.dotProduct(line.direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:54.228 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:54.228 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:54.229 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor.BoundaryProjector projector = new org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor.BoundaryProjector(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D closest = closestPoint(line),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:56.743 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:56.744 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:56.745 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet projected = projector.getProjected(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor.BoundaryProjector projector = new org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor.BoundaryProjector(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:58.798 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:58.799 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:58.800 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] outline = projected.getVertices(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet projected = projector.getProjected(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:01.256 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:01.257 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:01.257 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] rawLoop = outline[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] outline = projected.getVertices(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:03.754 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:03.755 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:03.755 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: int end = rawLoop.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] rawLoop = outline[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:06.269 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:06.269 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:06.270 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: int j = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: int end = rawLoop.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:08.199 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:08.200 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:08.200 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D previous = loop[((i + n) - 1) % n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: int j = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:10.386 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:10.386 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:10.387 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D current = loop[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D previous = loop[((i + n) - 1) % n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:12.592 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:12.592 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:12.593 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D next = loop[(i + 1) % n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D current = loop[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:14.585 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:14.586 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:14.587 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double dx1 = current.getX() - previous.getX(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D next = loop[(i + 1) % n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:16.560 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:16.561 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:16.562 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double dy1 = current.getY() - previous.getY(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double dx1 = current.getX() - previous.getX(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:18.899 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:18.900 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:18.900 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double dx2 = next.getX() - current.getX(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double dy1 = current.getY() - previous.getY(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:21.379 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:21.379 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:21.381 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double dy2 = next.getY() - current.getY(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double dx2 = next.getX() - current.getX(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:23.532 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:23.532 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:23.533 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double cross = (dx1 * dy2) - (dx2 * dy1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double dy2 = next.getY() - current.getY(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:25.960 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:25.960 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:25.961 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double dot = (dx1 * dx2) + (dy1 * dy2),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double cross = (dx1 * dy2) - (dx2 * dy1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:28.409 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:28.409 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:28.410 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double d1d2 = org.apache.commons.math3.util.FastMath.sqrt(((dx1 * dx1) + (dy1 * dy1)) * ((dx2 * dx2) + (dy2 * dy2))),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double dot = (dx1 * dx2) + (dy1 * dy2),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:30.713 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:30.714 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:30.715 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.BoundaryAttribute<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> attribute = 
((org.apache.commons.math3.geometry.partitioning.BoundaryAttribute<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) (node.getAttribute())),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double d1d2 = org.apache.commons.math3.util.FastMath.sqrt(((dx1 * dx1) + (dy1 * dy1)) * ((dx2 * dx2) + (dy2 * dy2))),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:33.055 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:33.055 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:33.056 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> absFacet = 
((org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) (facet)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.BoundaryAttribute<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> attribute = 
((org.apache.commons.math3.geometry.partitioning.BoundaryAttribute<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) (node.getAttribute())),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:35.537 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:35.538 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:35.539 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = ((org.apache.commons.math3.geometry.euclidean.threed.Plane) (facet.getHyperplane())),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> absFacet = 
((org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) (facet)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:37.889 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:37.889 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:37.890 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double scal = plane.getNormal().dotProduct(w),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = ((org.apache.commons.math3.geometry.euclidean.threed.Plane) (facet.getHyperplane())),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:40.232 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:40.233 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:40.234 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vertices = 
((org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet) (absFacet.getRemainingRegion())).getVertices(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double scal = plane.getNormal().dotProduct(w),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:42.658 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:42.658 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:42.659 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] newVertices = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[vertices.length][],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vertices = 
((org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet) (absFacet.getRemainingRegion())).getVertices(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:44.916 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:44.916 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:44.917 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop = vertices[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] newVertices = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[vertices.length][],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:47.045 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:47.045 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:47.046 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] newLoop = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop = vertices[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:49.348 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:49.348 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:49.349 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>> edges = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>>(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] newLoop = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:51.424 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:51.424 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:51.425 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final boolean closed = loop[0] != null,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>> edges = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>>(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:53.327 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:53.327 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:53.328 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: int previous = (closed) ? loop.length - 1 : 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final boolean closed = loop[0] != null,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:55.700 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:55.701 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:55.701 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D previous3D = plane.toSpace(loop[previous]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: int previous = (closed) ? loop.length - 1 : 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:57.767 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:57.768 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:57.769 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: int current = (previous + 1) % loop.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D previous3D = plane.toSpace(loop[previous]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:00.322 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:00.322 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:00.323 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.Vector2D pPoint = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(previous3D.dotProduct(u), 
previous3D.dotProduct(v)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: int current = (previous + 1) % loop.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:02.946 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:02.947 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:02.948 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D current3D = plane.toSpace(loop[current]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.Vector2D pPoint = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(previous3D.dotProduct(u), 
previous3D.dotProduct(v)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:05.582 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:05.582 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:05.583 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D cPoint = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(current3D.dotProduct(u), 
current3D.dotProduct(v)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D current3D = plane.toSpace(loop[current]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:08.260 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:08.261 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:08.262 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Line line = 
new org.apache.commons.math3.geometry.euclidean.twod.Line(pPoint, cPoint),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D cPoint = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(current3D.dotProduct(u), 
current3D.dotProduct(v)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:10.800 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:10.800 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:10.801 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> edge = line.wholeHyperplane(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Line line = 
new org.apache.commons.math3.geometry.euclidean.twod.Line(pPoint, cPoint),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:13.063 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:13.063 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:13.064 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double angle = line.getAngle() + (0.5 * org.apache.commons.math3.util.FastMath.PI),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> edge = line.wholeHyperplane(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:15.752 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:15.753 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:15.754 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Line l = 
new org.apache.commons.math3.geometry.euclidean.twod.Line(pPoint, angle),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double angle = line.getAngle() + (0.5 * org.apache.commons.math3.util.FastMath.PI),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:18.314 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:18.314 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:18.315 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Line l = 
new org.apache.commons.math3.geometry.euclidean.twod.Line(cPoint, angle),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Line l = 
new org.apache.commons.math3.geometry.euclidean.twod.Line(pPoint, angle),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:20.880 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:20.880 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:20.881 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet projectedFacet = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet(edges),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Line l = 
new org.apache.commons.math3.geometry.euclidean.twod.Line(cPoint, angle),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:23.391 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:23.391 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:23.392 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double norm = normal.getNorm(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet projectedFacet = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet(edges),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:25.905 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:25.905 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:25.906 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D tmp = u,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double norm = normal.getNorm(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:28.498 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:28.498 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:28.499 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D p2D = ((org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (point)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D tmp = u,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:31.060 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:31.061 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:31.062 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double dot = w.dotProduct(direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = line.getDirection(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:33.222 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:33.223 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:33.224 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D point = line.toSpace(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double dot = w.dotProduct(direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:35.173 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:35.173 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:35.174 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double k = (-(originOffset + w.dotProduct(point))) / dot,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D point = line.toSpace(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:37.184 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:37.184 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:37.185 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double b1 = plane1.w.getY(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double a1 = plane1.w.getX(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:39.226 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:39.227 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:39.228 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double c1 = plane1.w.getZ(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double b1 = plane1.w.getY(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:41.610 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:41.611 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:41.612 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double d1 = plane1.originOffset,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double c1 = plane1.w.getZ(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:44.182 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:44.183 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:44.184 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double a2 = plane2.w.getX(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double d1 = plane1.originOffset,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:46.568 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:46.568 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:46.569 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double b2 = plane2.w.getY(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double a2 = plane2.w.getX(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:48.986 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:48.986 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:48.987 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double c2 = plane2.w.getZ(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double b2 = plane2.w.getY(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:51.243 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:51.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:51.245 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double d2 = plane2.originOffset,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double c2 = plane2.w.getZ(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:53.552 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:53.553 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:53.554 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double a3 = plane3.w.getX(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double d2 = plane2.originOffset,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:56.079 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:56.079 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:56.080 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double b3 = plane3.w.getY(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double a3 = plane3.w.getX(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:58.508 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:58.508 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:58.509 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double c3 = plane3.w.getZ(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double b3 = plane3.w.getY(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:00.592 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:00.593 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:00.594 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double d3 = plane3.originOffset,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double c3 = plane3.w.getZ(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:03.031 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:03.031 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:03.032 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double a23 = (b2 * c3) - (b3 * c2),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double d3 = plane3.originOffset,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:05.061 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:05.061 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:05.062 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double b23 = (c2 * a3) - (c3 * a2),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double a23 = (b2 * c3) - (b3 * c2),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:07.495 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:07.495 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:07.496 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double c23 = (a2 * b3) - (a3 * b2),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double b23 = (c2 * a3) - (c3 * a2),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:09.417 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:09.417 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:09.418 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double determinant = ((a1 * a23) + (b1 * b23)) + (c1 * c23),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double c23 = (a2 * b3) - (a3 * b2),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:11.411 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:11.411 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:11.412 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double r = 1.0 / determinant,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double determinant = ((a1 * a23) + (b1 * b23)) + (c1 * c23),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:13.730 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:13.731 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:13.731 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double area = polygon.getSize(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> polygon = ((org.apache.commons.math3.geometry.euclidean.threed.SubPlane) (facet)).getRemainingRegion(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:15.830 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:15.830 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:15.831 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D facetB = plane.toSpace(polygon.getBarycenter()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double area = polygon.getSize(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:18.275 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:18.275 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:18.276 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double scaled = area * facetB.dotProduct(plane.getNormal()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D facetB = plane.toSpace(polygon.getBarycenter()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:20.431 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:20.432 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:20.432 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> cut = node.getCut(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double scaled = area * facetB.dotProduct(plane.getNormal()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:22.707 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:22.708 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:22.709 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> cut = node.getCut(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:24.714 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:24.714 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:24.715 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:26.737 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:26.737 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:26.738 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = ((org.apache.commons.math3.geometry.euclidean.threed.Plane) (cut.getHyperplane())),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:29.037 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:29.038 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:29.039 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double offset = plane.getOffset(point),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = ((org.apache.commons.math3.geometry.euclidean.threed.Plane) (cut.getHyperplane())),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:31.501 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:31.501 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:31.502 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final boolean in = org.apache.commons.math3.util.FastMath.abs(offset) < 1.0E-10,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double offset = plane.getOffset(point),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:34.046 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:34.046 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:34.047 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> near,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final boolean in = org.apache.commons.math3.util.FastMath.abs(offset) < 1.0E-10,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:36.299 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:36.299 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:36.300 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> far,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> near,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:38.603 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:38.603 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:38.604 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> facet = boundaryFacet(point, node),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> far,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:41.109 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:41.109 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:41.110 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> crossed = recurseFirstIntersection(near, point, line),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> facet = boundaryFacet(point, node),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:43.596 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:43.597 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:43.597 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D hit3D = plane.intersection(line),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> crossed = recurseFirstIntersection(near, point, line),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:45.680 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:45.680 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:45.681 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> facet = boundaryFacet(hit3D, node),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D hit3D = plane.intersection(line),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:48.062 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:48.062 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:48.063 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D point2D = ((org.apache.commons.math3.geometry.euclidean.threed.Plane) (node.getCut().getHyperplane())).toSubSpace(point),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> facet = boundaryFacet(hit3D, node),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:50.487 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:50.487 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:50.488 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = ((org.apache.commons.math3.geometry.euclidean.threed.Vector3D) (point)).subtract(center),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D point2D = ((org.apache.commons.math3.geometry.euclidean.threed.Plane) (node.getCut().getHyperplane())).toSubSpace(point),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:52.949 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:52.950 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:52.951 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane oPlane = ((org.apache.commons.math3.geometry.euclidean.threed.Plane) (original)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = ((org.apache.commons.math3.geometry.euclidean.threed.Vector3D) (point)).subtract(center),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:55.513 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:55.514 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:55.514 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane tPlane = ((org.apache.commons.math3.geometry.euclidean.threed.Plane) (transformed)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane oPlane = ((org.apache.commons.math3.geometry.euclidean.threed.Plane) (original)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:57.607 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:57.608 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:57.609 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D p00 = oPlane.getOrigin(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane tPlane = ((org.apache.commons.math3.geometry.euclidean.threed.Plane) (transformed)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:00.024 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:00.025 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:00.025 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D p10 = oPlane.toSpace(new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(1.0, 0.0)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D p00 = oPlane.getOrigin(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:01.996 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:01.996 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:01.997 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D p01 = oPlane.toSpace(new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(0.0, 1.0)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D p10 = oPlane.toSpace(new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(1.0, 0.0)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:04.572 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:04.572 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:04.573 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP00 = tPlane.toSubSpace(apply(p00)),commit: Populate throws declarations for geometry package.
}, sim: 0.051190
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D p01 = oPlane.toSpace(new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(0.0, 1.0)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Fixed accuracy of 3D Line.revert().

08:43:07.016 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:07.016 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:07.017 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double cos = direction.dotProduct(line.direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line reverted = new org.apache.commons.math3.geometry.euclidean.threed.Line(this),commit: Fixed accuracy of 3D Line.revert().
}, sim: 0.127969
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Brought back some useful static methods.

08:43:09.029 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:09.029 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:09.030 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double cos = direction.dotProduct(line.direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T normProduct = v1.getNorm().multiply(v2.getNorm()),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Brought back some useful static methods.

08:43:11.538 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:11.538 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:11.539 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double cos = direction.dotProduct(line.direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Added a new ExtendedFieldElement interface.

08:43:14.102 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:14.102 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:14.103 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double cos = direction.dotProduct(line.direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dy = v.y.subtract(y).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Added a new ExtendedFieldElement interface.

08:43:16.628 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:16.629 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:16.630 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double cos = direction.dotProduct(line.direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dx = x.subtract(v.getX()),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:19.171 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:19.171 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:19.173 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double cos = direction.dotProduct(line.direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D d = p.subtract(zero),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:21.550 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:21.550 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:21.551 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double cos = direction.dotProduct(line.direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double n = normal.getNorm(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:23.940 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:23.940 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:23.941 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double cos = direction.dotProduct(line.direction),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double offset = line.zero.subtract(zero).dotProduct(normal) / n,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy of 3D Line.revert().
, ingredientB: Brought back some useful static methods.

08:43:25.918 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:25.918 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:25.919 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line reverted = new org.apache.commons.math3.geometry.euclidean.threed.Line(this),commit: Fixed accuracy of 3D Line.revert().
}, sim: 0.127969
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> u3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(u1, u2).normalize(),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:27.988 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:27.988 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:27.989 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D p01 = oPlane.toSpace(new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(0.0, 1.0)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:30.169 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:30.170 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:30.171 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D p10 = oPlane.toSpace(new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(1.0, 0.0)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:32.413 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:32.414 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:32.414 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane tPlane = ((org.apache.commons.math3.geometry.euclidean.threed.Plane) (transformed)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:34.898 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:34.898 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:34.899 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> facet = boundaryFacet(hit3D, node),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:37.088 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:37.089 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:37.089 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = ((org.apache.commons.math3.geometry.euclidean.threed.Plane) (cut.getHyperplane())),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:39.348 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:39.349 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:39.350 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double determinant = ((a1 * a23) + (b1 * b23)) + (c1 * c23),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:41.494 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:41.495 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:41.496 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double angle = line.getAngle() + (0.5 * org.apache.commons.math3.util.FastMath.PI),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Brought back some useful static methods.

08:43:44.070 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:44.070 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:44.072 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:46.719 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:46.719 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:46.720 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] outline = projected.getVertices(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:49.226 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:49.227 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:49.228 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = p2.subtract(p1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:43:51.814 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:51.814 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:51.815 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dy = y.subtract(v.getY()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:43:54.387 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:54.387 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:54.388 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dx = v.x.subtract(x).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

08:43:56.538 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:56.538 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:56.539 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double threshold = normProduct.getReal() * 0.9999,commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Brought back some useful static methods.

08:43:58.959 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:58.959 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:58.960 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:44:01.453 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:01.453 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:01.454 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T inverse = x.multiply(x).add(z.multiply(z)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:44:03.899 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:03.899 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:03.900 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T inverse = y.multiply(y).add(z.multiply(z)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:44:05.927 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:05.927 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:05.928 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double threshold = 0.6 * getNorm().getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:44:08.433 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:08.434 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:08.434 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T s = getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:44:10.403 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:10.403 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:10.404 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T zAbs = z.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:44:12.425 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:12.425 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:12.426 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T yAbs = y.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:44:14.801 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:14.801 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:14.802 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T xAbs = x.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:44:16.787 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:16.788 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:16.789 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T[] array = org.apache.commons.math3.util.MathArrays.buildArray(x.getField(), 3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:44:18.680 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:18.680 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:18.681 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T prototype = u1.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:44:20.781 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:20.781 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:20.782 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T cosDelta = delta.cos(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:44:23.294 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:23.294 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:23.295 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double corr12 = o[1][2].getReal() - m[1][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:44:25.791 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:25.791 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:25.792 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T mx02 = m[0][0].multiply(x02).add(m[1][0].multiply(x12)).add(m[2][0].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:44:28.279 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:28.279 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:28.280 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: T x10 = m[1][0],commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:44:30.485 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:30.486 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:30.486 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T[] array = org.apache.commons.math3.util.MathArrays.buildArray(a0.getField(), 3),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:44:32.657 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:32.657 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:32.658 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r1 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA1()), alpha1),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:44:34.795 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:34.795 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:34.797 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T d1 = ort[0][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:44:37.336 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:37.336 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:37.337 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T norm = axis.getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

08:44:39.859 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:39.860 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:39.861 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(u, v),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

08:44:42.307 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:42.307 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:42.308 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T inv = 
q0.multiply(q0).add(q1.multiply(q1)).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: 0.044866
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

08:44:44.779 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:44.779 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:44.780 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

08:44:47.305 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:47.306 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:47.306 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

08:44:49.785 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:49.785 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:49.786 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final T normProduct = v1.getNorm().multiply(v2.getNorm()),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Brought back some useful static methods.
, ingredientB: Fixed accuracy of 3D Line.revert().

08:44:51.800 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:51.801 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:51.801 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: 0.052612
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line reverted = new org.apache.commons.math3.geometry.euclidean.threed.Line(this),commit: Fixed accuracy of 3D Line.revert().
}, sim: 0.127969
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Populate throws declarations for geometry package.

08:44:54.244 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:54.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:54.245 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP10 = tPlane.toSubSpace(apply(p10)),commit: Populate throws declarations for geometry package.
}, sim: 0.051190
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP00 = tPlane.toSubSpace(apply(p00)),commit: Populate throws declarations for geometry package.
}, sim: 0.051190
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Populate throws declarations for geometry package.

08:44:56.823 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:56.824 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:56.824 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: 0.051190
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP10 = tPlane.toSubSpace(apply(p10)),commit: Populate throws declarations for geometry package.
}, sim: 0.051190
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Populate throws declarations for geometry package.

08:44:59.177 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:59.177 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:59.178 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final java.awt.geom.AffineTransform at = 
new java.awt.geom.AffineTransform(tP10.getX() - tP00.getX(), tP10.getY() - tP00.getY(), 
tP01.getX() - tP00.getX(), tP01.getY() - tP00.getY(), 
tP00.getX(), tP00.getY()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: 0.051190
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:01.395 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:01.396 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:01.397 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D shift = tPlane.toSubSpace(apply(oPlane.getOrigin())),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final java.awt.geom.AffineTransform at = 
new java.awt.geom.AffineTransform(tP10.getX() - tP00.getX(), tP10.getY() - tP00.getY(), 
tP01.getX() - tP00.getX(), tP01.getY() - tP00.getY(), 
tP00.getX(), tP00.getY()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:04.013 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:04.013 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:04.014 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final java.awt.geom.AffineTransform at = 
java.awt.geom.AffineTransform.getTranslateInstance(shift.getX(), shift.getY()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D shift = tPlane.toSubSpace(apply(oPlane.getOrigin())),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:06.467 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:06.467 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:06.468 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double inv = 1.0 / org.apache.commons.math3.util.FastMath.sqrt((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q3 * q3)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final java.awt.geom.AffineTransform at = 
java.awt.geom.AffineTransform.getTranslateInstance(shift.getX(), shift.getY()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:09.052 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:09.052 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:09.053 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double norm = axis.getNorm(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double inv = 1.0 / org.apache.commons.math3.util.FastMath.sqrt((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q3 * q3)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:11.628 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:11.628 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:11.629 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double halfAngle = (-0.5) * angle,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double norm = axis.getNorm(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:14.176 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:14.177 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:14.178 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double coeff = org.apache.commons.math3.util.FastMath.sin(halfAngle) / norm,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double halfAngle = (-0.5) * angle,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:16.713 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:16.713 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:16.714 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double[][] ort = orthogonalizeMatrix(m, threshold),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double coeff = org.apache.commons.math3.util.FastMath.sin(halfAngle) / norm,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:19.223 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:19.224 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:19.225 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double det = ((ort[0][0] * ((ort[1][1] * ort[2][2]) - (ort[2][1] * ort[1][2]))) - 
(ort[1][0] * ((ort[0][1] * ort[2][2]) - (ort[2][1] * ort[0][2])))) + 
(ort[2][0] * ((ort[0][1] * ort[1][2]) - (ort[1][1] * ort[0][2]))),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double[][] ort = orthogonalizeMatrix(m, threshold),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:21.671 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:21.672 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:21.673 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double det = ((ort[0][0] * ((ort[1][1] * ort[2][2]) - (ort[2][1] * ort[1][2]))) - 
(ort[1][0] * ((ort[0][1] * ort[2][2]) - (ort[2][1] * ort[0][2])))) + 
(ort[2][0] * ((ort[0][1] * ort[1][2]) - (ort[1][1] * ort[0][2]))),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:23.839 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:23.839 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:23.840 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double inv = 1.0 / org.apache.commons.math3.util.FastMath.sqrt((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q3 * q3)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:26.342 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:26.343 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:26.344 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final java.awt.geom.AffineTransform at = 
new java.awt.geom.AffineTransform(tP10.getX() - tP00.getX(), tP10.getY() - tP00.getY(), 
tP01.getX() - tP00.getX(), tP01.getY() - tP00.getY(), 
tP00.getX(), tP00.getY()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Populate throws declarations for geometry package.

08:45:28.836 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:28.837 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:28.837 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP10 = tPlane.toSubSpace(apply(p10)),commit: Populate throws declarations for geometry package.
}, sim: 0.051190
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Populate throws declarations for geometry package.

08:45:31.426 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:31.427 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:31.432 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP00 = tPlane.toSubSpace(apply(p00)),commit: Populate throws declarations for geometry package.
}, sim: 0.051190
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:33.954 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:33.955 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:33.955 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final java.awt.geom.AffineTransform at = 
java.awt.geom.AffineTransform.getTranslateInstance(shift.getX(), shift.getY()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Populate throws declarations for geometry package.

08:45:36.615 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:36.615 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:36.617 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: 0.051190
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Populate throws declarations for geometry package.

08:45:39.237 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:39.237 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:39.239 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP00 = tPlane.toSubSpace(apply(p00)),commit: Populate throws declarations for geometry package.
}, sim: 0.051190
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:45:41.772 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:41.773 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:41.774 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:44.379 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:44.379 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:44.380 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final java.awt.geom.AffineTransform at = 
java.awt.geom.AffineTransform.getTranslateInstance(shift.getX(), shift.getY()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Populate throws declarations for geometry package.

08:45:47.217 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:47.217 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:47.218 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP10 = tPlane.toSubSpace(apply(p10)),commit: Populate throws declarations for geometry package.
}, sim: 0.051190
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:45:49.877 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:49.877 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:49.878 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Populate throws declarations for geometry package.

08:45:52.451 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:52.452 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:52.453 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP00 = tPlane.toSubSpace(apply(p00)),commit: Populate throws declarations for geometry package.
}, sim: 0.051190
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:55.152 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:55.152 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:55.153 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D shift = tPlane.toSubSpace(apply(oPlane.getOrigin())),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Populate throws declarations for geometry package.

08:45:57.354 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:57.354 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:57.356 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP00 = tPlane.toSubSpace(apply(p00)),commit: Populate throws declarations for geometry package.
}, sim: 0.051190
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:45:59.948 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:59.949 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:59.950 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:46:02.427 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:02.427 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:02.428 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:04.442 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:04.442 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:04.443 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(m),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D shift = tPlane.toSubSpace(apply(oPlane.getOrigin())),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Populate throws declarations for geometry package.

08:46:06.400 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:06.400 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:06.401 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(m),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP00 = tPlane.toSubSpace(apply(p00)),commit: Populate throws declarations for geometry package.
}, sim: 0.051190
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:46:08.468 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:08.468 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:08.469 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(m),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:46:11.056 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:11.056 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:11.057 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(m),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:13.716 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:13.716 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:13.717 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double normProduct = u.getNorm() * v.getNorm(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final java.awt.geom.AffineTransform at = 
new java.awt.geom.AffineTransform(tP10.getX() - tP00.getX(), tP10.getY() - tP00.getY(), 
tP01.getX() - tP00.getX(), tP01.getY() - tP00.getY(), 
tP00.getX(), tP00.getY()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:16.373 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:16.373 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:16.374 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double normProduct = u.getNorm() * v.getNorm(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double halfAngle = (-0.5) * angle,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:18.299 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:18.299 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:18.300 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double normProduct = u.getNorm() * v.getNorm(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double[][] ort = orthogonalizeMatrix(m, threshold),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:20.528 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:20.528 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:20.529 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double normProduct = u.getNorm() * v.getNorm(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double det = ((ort[0][0] * ((ort[1][1] * ort[2][2]) - (ort[2][1] * ort[1][2]))) - 
(ort[1][0] * ((ort[0][1] * ort[2][2]) - (ort[2][1] * ort[0][2])))) + 
(ort[2][0] * ((ort[0][1] * ort[1][2]) - (ort[1][1] * ort[0][2]))),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:23.141 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:23.141 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:23.142 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double dot = u.dotProduct(v),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D shift = tPlane.toSubSpace(apply(oPlane.getOrigin())),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:25.648 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:25.648 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:25.649 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double dot = u.dotProduct(v),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double coeff = org.apache.commons.math3.util.FastMath.sin(halfAngle) / norm,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:27.818 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:27.818 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:27.820 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double dot = u.dotProduct(v),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double det = ((ort[0][0] * ((ort[1][1] * ort[2][2]) - (ort[2][1] * ort[1][2]))) - 
(ort[1][0] * ((ort[0][1] * ort[2][2]) - (ort[2][1] * ort[0][2])))) + 
(ort[2][0] * ((ort[0][1] * ort[1][2]) - (ort[1][1] * ort[0][2]))),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:29.761 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:29.761 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:29.762 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double dot = u.dotProduct(v),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double normProduct = u.getNorm() * v.getNorm(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:31.760 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:31.760 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:31.761 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w = u.orthogonal(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D shift = tPlane.toSubSpace(apply(oPlane.getOrigin())),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:33.859 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:33.859 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:33.860 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w = u.orthogonal(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double coeff = org.apache.commons.math3.util.FastMath.sin(halfAngle) / norm,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:36.208 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:36.208 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:36.209 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w = u.orthogonal(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double normProduct = u.getNorm() * v.getNorm(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:38.756 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:38.756 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:38.757 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w = u.orthogonal(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double dot = u.dotProduct(v),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:41.419 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:41.420 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:41.420 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double coeff = 1.0 / ((2.0 * q0) * normProduct),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final java.awt.geom.AffineTransform at = 
java.awt.geom.AffineTransform.getTranslateInstance(shift.getX(), shift.getY()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:44.225 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:44.226 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:44.226 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double coeff = 1.0 / ((2.0 * q0) * normProduct),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double[][] ort = orthogonalizeMatrix(m, threshold),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:46.937 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:46.938 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:46.939 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double coeff = 1.0 / ((2.0 * q0) * normProduct),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double dot = u.dotProduct(v),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:49.730 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:49.730 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:49.731 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double coeff = 1.0 / ((2.0 * q0) * normProduct),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w = u.orthogonal(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:52.430 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:52.430 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:52.432 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D q = v.crossProduct(u),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final java.awt.geom.AffineTransform at = 
java.awt.geom.AffineTransform.getTranslateInstance(shift.getX(), shift.getY()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:55.106 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:55.107 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:55.108 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D q = v.crossProduct(u),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double det = ((ort[0][0] * ((ort[1][1] * ort[2][2]) - (ort[2][1] * ort[1][2]))) - 
(ort[1][0] * ((ort[0][1] * ort[2][2]) - (ort[2][1] * ort[0][2])))) + 
(ort[2][0] * ((ort[0][1] * ort[1][2]) - (ort[1][1] * ort[0][2]))),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:57.813 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:57.814 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:57.814 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D q = v.crossProduct(u),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w = u.orthogonal(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:47:00.561 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:00.561 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:00.562 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D q = v.crossProduct(u),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double coeff = 1.0 / ((2.0 * q0) * normProduct),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:47:03.135 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:03.135 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:03.136 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double s = (ort[0][0] + ort[1][1]) + ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.147214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.147214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:47:05.754 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:05.755 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:05.755 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.147214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double s = (ort[0][0] + ort[1][1]) + ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.147214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:47:08.291 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:08.292 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:08.293 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double inv = 0.25 / quat[1],commit: Fixed checkstyle warnings.
}, sim: 0.147214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.147214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:47:10.434 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:10.434 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:10.435 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.147214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double inv = 0.25 / quat[1],commit: Fixed checkstyle warnings.
}, sim: 0.147214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:47:13.152 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:13.153 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:13.154 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double inv = 0.25 / quat[3],commit: Fixed checkstyle warnings.
}, sim: 0.147214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.147214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Fixed checkstyle warnings.

08:47:15.371 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:15.371 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:15.372 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double squaredSine = ((q1 * q1) + (q2 * q2)) + (q3 * q3),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double inv = 0.25 / quat[3],commit: Fixed checkstyle warnings.
}, sim: 0.147214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:47:17.411 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:17.411 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:17.412 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt(squaredSine),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double squaredSine = ((q1 * q1) + (q2 * q2)) + (q3 * q3),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:47:19.409 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:19.409 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:19.410 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double inverse = (-1) / org.apache.commons.math3.util.FastMath.sqrt(squaredSine),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt(squaredSine),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:47:21.616 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:21.617 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:21.618 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1 = applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double inverse = (-1) / org.apache.commons.math3.util.FastMath.sqrt(squaredSine),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:47:24.009 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:24.009 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:24.010 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2 = applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1 = applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:47:26.674 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:26.675 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:26.676 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1 = applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2 = applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:47:29.257 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:29.258 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:29.259 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2 = applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1 = applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:47:32.186 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:32.186 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:32.187 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1 = applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2 = applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:47:34.188 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:34.188 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:34.189 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2 = applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1 = applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:47:36.135 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:36.135 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:36.135 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double q0q0 = q0 * q0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2 = applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:47:38.133 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:38.133 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:38.134 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double q0q1 = q0 * q1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double q0q0 = q0 * q0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:47:40.602 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:40.602 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:40.603 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double q0q2 = q0 * q2,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double q0q1 = q0 * q1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:47:43.299 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:43.299 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:43.300 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double q0q3 = q0 * q3,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double q0q2 = q0 * q2,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:47:46.014 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:46.014 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:46.015 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double q1q1 = q1 * q1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double q0q3 = q0 * q3,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:47:49.035 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:49.036 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:49.036 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double q1q2 = q1 * q2,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double q1q1 = q1 * q1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:47:51.742 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:51.743 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:51.744 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double q1q3 = q1 * q3,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double q1q2 = q1 * q2,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:47:54.479 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:54.479 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:54.480 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double q2q2 = q2 * q2,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double q1q3 = q1 * q3,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:47:57.228 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:57.229 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:57.230 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double q2q3 = q2 * q3,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double q2q2 = q2 * q2,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:00.154 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:00.154 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:00.155 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double q3q3 = q3 * q3,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double q2q3 = q2 * q3,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:02.913 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:02.914 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:02.915 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double[][] m = new double[3][],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double q3q3 = q3 * q3,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:05.683 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:05.683 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:05.684 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double x = u.getX(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double[][] m = new double[3][],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:08.529 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:08.530 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:08.531 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double y = u.getY(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double x = u.getX(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:11.340 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:11.340 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:11.341 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double z = u.getZ(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double y = u.getY(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:14.058 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:14.058 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:14.059 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double s = ((q1 * x) + (q2 * y)) + (q3 * z),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double z = u.getZ(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:16.960 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:16.960 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:16.961 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double s = ((q1 * x) + (q2 * y)) + (q3 * z),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double s = ((q1 * x) + (q2 * y)) + (q3 * z),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:19.723 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:19.723 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:19.724 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double m0 = -q0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double s = ((q1 * x) + (q2 * y)) + (q3 * z),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:22.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:22.344 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:22.345 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double m0 = -q0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double m0 = -q0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:24.933 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:24.933 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:24.934 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double[] m0 = m[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double m0 = -q0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:27.794 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:27.795 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:27.796 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double[] m1 = m[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double[] m0 = m[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:30.380 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:30.380 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:30.381 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double[] m2 = m[2],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double[] m1 = m[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:32.442 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:32.442 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:32.443 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double x00 = m0[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double[] m2 = m[2],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:34.396 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:34.396 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:34.397 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double x01 = m0[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double x00 = m0[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:36.409 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:36.409 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:36.410 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double x02 = m0[2],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double x01 = m0[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:38.704 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:38.704 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:38.707 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double x10 = m1[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double x02 = m0[2],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:41.548 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:41.549 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:41.550 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double x11 = m1[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double x10 = m1[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:43.810 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:43.810 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:43.811 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double x12 = m1[2],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double x11 = m1[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:46.259 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:46.259 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:46.260 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double x20 = m2[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double x12 = m1[2],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:48.596 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:48.596 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:48.597 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double x21 = m2[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double x20 = m2[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:50.649 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:50.649 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:50.650 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double x22 = m2[2],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double x21 = m2[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:52.625 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:52.625 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:52.626 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double[][] o = new double[3][3],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double x22 = m2[2],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:54.627 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:54.628 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:54.628 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double[] o0 = o[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double[][] o = new double[3][3],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:57.089 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:57.089 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:57.090 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double[] o1 = o[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double[] o0 = o[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:48:59.874 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:59.875 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:59.876 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double[] o2 = o[2],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double[] o1 = o[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:49:01.894 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:01.894 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:01.895 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double mx00 = ((m0[0] * x00) + (m1[0] * x10)) + (m2[0] * x20),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double[] o2 = o[2],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:49:03.840 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:03.840 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:03.841 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double mx10 = ((m0[1] * x00) + (m1[1] * x10)) + (m2[1] * x20),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double mx00 = ((m0[0] * x00) + (m1[0] * x10)) + (m2[0] * x20),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:49:05.845 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:05.846 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:05.847 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double mx20 = ((m0[2] * x00) + (m1[2] * x10)) + (m2[2] * x20),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double mx10 = ((m0[1] * x00) + (m1[1] * x10)) + (m2[1] * x20),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:49:08.434 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:08.434 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:08.435 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double mx01 = ((m0[0] * x01) + (m1[0] * x11)) + (m2[0] * x21),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double mx20 = ((m0[2] * x00) + (m1[2] * x10)) + (m2[2] * x20),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:49:10.427 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:10.427 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:10.428 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double mx11 = ((m0[1] * x01) + (m1[1] * x11)) + (m2[1] * x21),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double mx01 = ((m0[0] * x01) + (m1[0] * x11)) + (m2[0] * x21),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:49:12.452 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:12.453 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:12.453 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double mx21 = ((m0[2] * x01) + (m1[2] * x11)) + (m2[2] * x21),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double mx11 = ((m0[1] * x01) + (m1[1] * x11)) + (m2[1] * x21),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:49:14.403 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:14.403 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:14.404 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double mx02 = ((m0[0] * x02) + (m1[0] * x12)) + (m2[0] * x22),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double mx21 = ((m0[2] * x01) + (m1[2] * x11)) + (m2[2] * x21),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:49:16.455 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:16.456 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:16.457 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double mx12 = ((m0[1] * x02) + (m1[1] * x12)) + (m2[1] * x22),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double mx02 = ((m0[0] * x02) + (m1[0] * x12)) + (m2[0] * x22),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:49:19.257 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:19.257 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:19.258 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double mx22 = ((m0[2] * x02) + (m1[2] * x12)) + (m2[2] * x22),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double mx12 = ((m0[1] * x02) + (m1[1] * x12)) + (m2[1] * x22),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:49:21.221 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:21.221 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:21.222 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double corr00 = o0[0] - m0[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double mx22 = ((m0[2] * x02) + (m1[2] * x12)) + (m2[2] * x22),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:49:23.181 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:23.181 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:23.182 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double corr01 = o0[1] - m0[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double corr00 = o0[0] - m0[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:49:25.081 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:25.081 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:25.082 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double corr02 = o0[2] - m0[2],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double corr01 = o0[1] - m0[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:49:27.188 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:27.188 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:27.189 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double corr10 = o1[0] - m1[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double corr02 = o0[2] - m0[2],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:49:29.946 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:29.947 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:29.948 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double corr11 = o1[1] - m1[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double corr10 = o1[0] - m1[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:49:32.573 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:32.574 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:32.575 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double corr12 = o1[2] - m1[2],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double corr11 = o1[1] - m1[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:49:35.233 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:35.233 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:35.234 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double corr20 = o2[0] - m2[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double corr12 = o1[2] - m1[2],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:49:37.833 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:37.833 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:37.834 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double corr21 = o2[1] - m2[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double corr20 = o2[0] - m2[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:49:40.153 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:40.153 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:40.154 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double corr22 = o2[2] - m2[2],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double corr21 = o2[1] - m2[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:49:42.871 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:42.871 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:42.872 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double cosTheta = org.apache.commons.math3.util.FastMath.cos(theta),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.053848
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double corr22 = o2[2] - m2[2],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:49:45.559 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:45.560 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:45.561 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.147214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:49:48.194 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:48.195 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:48.196 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double s = (ort[0][0] + ort[1][1]) + ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.147214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:49:50.942 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:50.942 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:50.943 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.147214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:49:53.901 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:53.902 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:53.903 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double inv = 0.25 / quat[1],commit: Fixed checkstyle warnings.
}, sim: 0.147214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:49:56.486 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:56.486 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:56.487 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.147214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:49:59.191 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:59.191 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:59.192 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double inv = 0.25 / quat[3],commit: Fixed checkstyle warnings.
}, sim: 0.147214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:50:01.924 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:01.924 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:01.925 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double squaredSine = ((q1 * q1) + (q2 * q2)) + (q3 * q3),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:50:04.420 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:04.421 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:04.422 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double squaredSine = ((q1 * q1) + (q2 * q2)) + (q3 * q3),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:50:07.197 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:07.198 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:07.199 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double squaredSine = ((q1 * q1) + (q2 * q2)) + (q3 * q3),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:50:10.094 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:10.094 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:10.095 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double squaredSine = ((q1 * q1) + (q2 * q2)) + (q3 * q3),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:50:12.989 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:12.990 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:12.990 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double squaredSine = ((q1 * q1) + (q2 * q2)) + (q3 * q3),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(m),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: 0.097522
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Populate throws declarations for geometry package.

08:50:15.968 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:15.968 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:15.969 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double squaredSine = ((q1 * q1) + (q2 * q2)) + (q3 * q3),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP00 = tPlane.toSubSpace(apply(p00)),commit: Populate throws declarations for geometry package.
}, sim: 0.051190
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Populate throws declarations for geometry package.

08:50:18.521 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:18.522 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:18.523 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double squaredSine = ((q1 * q1) + (q2 * q2)) + (q3 * q3),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP10 = tPlane.toSubSpace(apply(p10)),commit: Populate throws declarations for geometry package.
}, sim: 0.051190
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Populate throws declarations for geometry package.

08:50:21.172 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:21.173 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:21.175 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double squaredSine = ((q1 * q1) + (q2 * q2)) + (q3 * q3),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: 0.051190
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:50:23.458 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:23.458 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:23.459 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double squaredSine = ((q1 * q1) + (q2 * q2)) + (q3 * q3),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final java.awt.geom.AffineTransform at = 
new java.awt.geom.AffineTransform(tP10.getX() - tP00.getX(), tP10.getY() - tP00.getY(), 
tP01.getX() - tP00.getX(), tP01.getY() - tP00.getY(), 
tP00.getX(), tP00.getY()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:50:25.389 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:25.389 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:25.390 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double squaredSine = ((q1 * q1) + (q2 * q2)) + (q3 * q3),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: final java.awt.geom.AffineTransform at = 
java.awt.geom.AffineTransform.getTranslateInstance(shift.getX(), shift.getY()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:50:27.304 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:27.304 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:27.305 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingA: {code: double squaredSine = ((q1 * q1) + (q2 * q2)) + (q3 * q3),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w), commit: Removed too aggressive checks for impossible errors.
}, ingB: {code: double coeff = org.apache.commons.math3.util.FastMath.sin(halfAngle) / norm,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[ERROR] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:84) - Error at generation 2
java.lang.IllegalArgumentException: Comparison method violates its general contract!
java.lang.IllegalArgumentException: Comparison method violates its general contract!
	at java.util.TimSort.mergeLo(TimSort.java:777)
	at java.util.TimSort.mergeAt(TimSort.java:514)
	at java.util.TimSort.mergeCollapse(TimSort.java:441)
	at java.util.TimSort.sort(TimSort.java:245)
	at java.util.Arrays.sort(Arrays.java:1512)
	at java.util.ArrayList.sort(ArrayList.java:1454)
	at java.util.Collections.sort(Collections.java:175)
	at fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy.getFixIngredient(PurposeBasedSearchStrategy.java:72)
	at fr.inria.astor.core.ingredientbased.IngredientBasedEvolutionaryRepairApproachImpl.createOperatorInstanceForPoint(IngredientBasedEvolutionaryRepairApproachImpl.java:95)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.modifyProgramVariant(EvolutionarySearchEngine.java:264)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.createNewProgramVariant(EvolutionarySearchEngine.java:198)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.processGenerations(EvolutionarySearchEngine.java:146)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:68)
	at fr.inria.main.evolution.AstorMain.run(AstorMain.java:203)
	at fr.inria.main.evolution.AstorMain.execute(AstorMain.java:247)
	at fr.inria.main.evolution.AstorMain.main(AstorMain.java:218)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - Time Repair Loop (s): 1206.49
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:172) - generationsexecuted: 2
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:247) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:257) - End Repair Search: NOT Found solution
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:208) - Time Total(s): 3950.023


Node: 9c093ba475d0



Date: Mon Nov 25 08:50:28 EST 2019

cd /script/jGenProg_Defects4J_Math_7;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-7 \
	-failing org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:purpose \
	-dependencies /script/jGenProg_Defects4J_Math_7/target/classes/:/script/jGenProg_Defects4J_Math_7/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

