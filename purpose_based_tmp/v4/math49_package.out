Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO] 07:44:32,408 fr.inria.astor.core.setup.ProjectConfiguration:282 - Version of the JVM used: 1.7.0_181
[INFO] 07:44:32,412 main:381 - Java version of the JDK used to run tests: 1.7.0_181
[INFO] 07:44:32,413 main:382 - The compliance of the JVM is:  7
[INFO] 07:44:32,415 main:660 - command line arguments: [-mode  jgenprog  -location  .  -id  Math-49  -failing  org.apache.commons.math.linear.SparseRealVectorTest  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:purpose  -dependencies  /script/jGenProg_Defects4J_Math_49/target/classes/:/script/jGenProg_Defects4J_Math_49/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO] 07:44:32,421 fr.inria.main.evolution.AstorMain:224 - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:975) - Source folders: [/script/jGenProg_Defects4J_Math_49/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:994) - Source Test folders: [/script/jGenProg_Defects4J_Math_49/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:108) - mode is Purpose
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.resolveTestsToRun(AstorCoreEngine.java:1311) - Test retrieved from classes: 570
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Math_49/./output_astor/AstorMain-Math-49//bin//default from 570 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Math_49/./output_astor/AstorMain-Math-49//bin//default, /script/jGenProg_Defects4J_Math_49/target/classes/, /script/jGenProg_Defects4J_Math_49/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math.util.FastMathTest#checkMissingFastMathClasses
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math.linear.SparseRealVectorTest#testConcurrentModification
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:2954, fails: 2, GZoltar suspicious 23542, with positive susp 190
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 2954
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 70 with susp > 0.1, we consider: 70
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:898) - Setting up the max to 1786290 milliseconds (1786 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:240) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Math_49/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:68) - building model: /script/jGenProg_Defects4J_Math_49/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:82) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Math_49/target/classes/, /script/jGenProg_Defects4J_Math_49/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:779) - Number of CtTypes created: 569
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 70
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 70,  59
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 59
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 59, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 1.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Math_49/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 1786290
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math.linear.SparseRealVectorTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-49
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= purpose
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Math_49/target/classes/:/script/jGenProg_Defects4J_Math_49/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:continuewhenmodelfail= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
08:02:02.848 [main] INFO  org.nd4j.linalg.factory.Nd4jBackend - Loaded [CpuBackend] backend
08:02:04.369 [main] INFO  org.nd4j.nativeblas.NativeOpsHolder - Number of threads used for NativeOps: 6
08:02:05.202 [main] INFO  org.nd4j.nativeblas.Nd4jBlas - Number of threads used for BLAS: 6
08:02:05.207 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Backend used: [CPU]; OS: [Linux]
08:02:05.207 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Cores: [48]; Memory: [3.5GB];
08:02:05.207 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Blas vendor: [MKL]
08:02:05.753 [main] INFO  o.d.m.e.loader.WordVectorSerializer - Projected memory use for model: [3.96 MB]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Resolved multiple problems leading to inaccuracy and/or failure to compute Normal, ChiSquare and Poisson probabilities, Erf and Gamma functions.
, ingredientB: Resolved multiple problems leading to inaccuracy and/or failure to compute Normal, ChiSquare and Poisson probabilities, Erf and Gamma functions.

08:02:08.446 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:08.447 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:08.457 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double scaleFactor = 1.0,commit: Resolved multiple problems leading to inaccuracy and/or failure to compute Normal, ChiSquare and Poisson probabilities, Erf and Gamma functions.
}, sim: 0.171904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean infinite = false,commit: Resolved multiple problems leading to inaccuracy and/or failure to compute Normal, ChiSquare and Poisson probabilities, Erf and Gamma functions.
}, sim: 0.171904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Resolved multiple problems leading to inaccuracy and/or failure to compute Normal, ChiSquare and Poisson probabilities, Erf and Gamma functions.
, ingredientB: Resolved multiple problems leading to inaccuracy and/or failure to compute Normal, ChiSquare and Poisson probabilities, Erf and Gamma functions.

08:02:10.766 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:10.767 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:10.768 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double lastScaleFactor = 1.0,commit: Resolved multiple problems leading to inaccuracy and/or failure to compute Normal, ChiSquare and Poisson probabilities, Erf and Gamma functions.
}, sim: 0.171904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double scaleFactor = 1.0,commit: Resolved multiple problems leading to inaccuracy and/or failure to compute Normal, ChiSquare and Poisson probabilities, Erf and Gamma functions.
}, sim: 0.171904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Resolved multiple problems leading to inaccuracy and/or failure to compute Normal, ChiSquare and Poisson probabilities, Erf and Gamma functions.
, ingredientB: Resolved multiple problems leading to inaccuracy and/or failure to compute Normal, ChiSquare and Poisson probabilities, Erf and Gamma functions.

08:02:13.339 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:13.339 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:13.340 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int maxPower = 5,commit: Resolved multiple problems leading to inaccuracy and/or failure to compute Normal, ChiSquare and Poisson probabilities, Erf and Gamma functions.
}, sim: 0.171904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double lastScaleFactor = 1.0,commit: Resolved multiple problems leading to inaccuracy and/or failure to compute Normal, ChiSquare and Poisson probabilities, Erf and Gamma functions.
}, sim: 0.171904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Resolved multiple problems leading to inaccuracy and/or failure to compute Normal, ChiSquare and Poisson probabilities, Erf and Gamma functions.

08:02:15.950 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:15.950 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:15.951 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double scale = org.apache.commons.math.util.FastMath.max(a, b),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int maxPower = 5,commit: Resolved multiple problems leading to inaccuracy and/or failure to compute Normal, ChiSquare and Poisson probabilities, Erf and Gamma functions.
}, sim: 0.171904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:02:18.022 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:18.023 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:18.024 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] tmp = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int i,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:02:20.075 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:20.076 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:20.077 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] recip = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] tmp = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:02:22.608 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:22.609 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:22.611 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] recip = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:02:25.148 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:25.149 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:25.151 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:02:27.574 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:27.575 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:27.576 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:02:29.933 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:29.934 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:29.936 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya = hiPrec[0] + hiPrec[1],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:02:32.569 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:32.570 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:32.572 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb = -((ya - hiPrec[0]) - hiPrec[1]),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = hiPrec[0] + hiPrec[1],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:02:35.171 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:35.171 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:35.173 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = -((ya - hiPrec[0]) - hiPrec[1]),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:02:37.750 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:37.751 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:37.752 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yaa = (ya + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:02:40.105 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:40.105 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:40.106 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yaa = (ya + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = hiPrec[0] + hiPrec[1],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:02:42.712 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:42.712 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:42.713 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yaa = (ya + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:02:45.286 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:45.287 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:45.288 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yaa = (ya + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = -((ya - hiPrec[0]) - hiPrec[1]),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:02:47.900 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:47.900 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:47.901 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yab = ya - yaa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = -((ya - hiPrec[0]) - hiPrec[1]),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:02:50.455 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:50.455 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:50.456 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yab = ya - yaa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:02:52.556 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:52.556 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:52.557 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yab = ya - yaa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yaa = (ya + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:02:54.547 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:54.547 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:54.548 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double recip = 1.0 / ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = -((ya - hiPrec[0]) - hiPrec[1]),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:02:56.618 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:56.618 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:56.619 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double recip = 1.0 / ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yab = ya - yaa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:02:58.593 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:02:58.594 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:02:58.595 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double recip = 1.0 / ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:03:00.583 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:00.584 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:00.585 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double recipa = (recip + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yaa = (ya + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:03:02.653 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:02.653 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:02.654 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double recipa = (recip + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double recip = 1.0 / ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:03:04.673 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:04.673 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:04.674 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double recipa = (recip + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:03:06.763 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:06.763 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:06.764 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double recipb = recip - recipa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yaa = (ya + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:03:09.372 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:09.373 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:09.374 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double recipb = recip - recipa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double recipa = (recip + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:03:11.951 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:11.952 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:11.953 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double recipb = recip - recipa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:03:14.188 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:14.189 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:14.190 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = ya + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yab = ya - yaa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:03:16.329 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:16.330 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:16.332 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = ya + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double recipb = recip - recipa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:03:18.255 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:18.256 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:18.257 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = ya + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:03:20.216 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:20.216 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:20.217 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: boolean negate = false,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yab = ya - yaa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:03:22.192 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:22.192 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:22.193 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: boolean negate = false,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double recipb = recip - recipa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:03:24.254 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:24.255 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:24.256 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: boolean negate = false,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:03:26.829 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:26.830 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:26.831 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: boolean negate = false,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = ya + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:03:29.561 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:29.561 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:29.562 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double recip = 1.0 / ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:03:31.883 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:31.884 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:31.885 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = ya + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:03:34.287 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:34.288 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:34.289 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:03:36.867 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:36.867 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:36.868 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean negate = false,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:03:39.405 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:39.406 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:39.407 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denom = 1.0 + ya,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double recip = 1.0 / ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:03:41.700 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:41.701 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:41.703 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denom = 1.0 + ya,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = -((ya - hiPrec[0]) - hiPrec[1]),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:03:43.977 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:43.978 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:43.979 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denom = 1.0 + ya,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:03:46.608 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:46.608 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:46.610 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denom = 1.0 + ya,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:03:49.203 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:49.203 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:49.204 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denomr = 1.0 / denom,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double recip = 1.0 / ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:03:51.819 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:51.819 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:51.821 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denomr = 1.0 / denom,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = hiPrec[0] + hiPrec[1],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:03:54.440 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:54.440 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:54.442 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denomr = 1.0 / denom,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: Checkstyle errors.

08:03:56.771 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:56.771 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:56.772 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denomr = 1.0 / denom,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double denom = 1.0 + ya,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:03:59.052 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:03:59.052 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:03:59.053 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denomb = (-((denom - 1.0) - ya)) + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yab = ya - yaa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:04:01.487 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:01.488 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:01.489 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denomb = (-((denom - 1.0) - ya)) + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = ya + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:04:03.522 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:03.522 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:03.523 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denomb = (-((denom - 1.0) - ya)) + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:04:05.543 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:05.543 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:05.544 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denomb = (-((denom - 1.0) - ya)) + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:04:07.736 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:07.736 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:07.737 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ratio = ya * denomr,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double recip = 1.0 / ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:04:10.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:10.344 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:10.345 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ratio = ya * denomr,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = hiPrec[0] + hiPrec[1],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:04:12.401 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:12.402 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:12.403 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ratio = ya * denomr,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: Checkstyle errors.

08:04:14.426 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:14.427 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:14.427 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ratio = ya * denomr,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double denomr = 1.0 / denom,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:04:16.367 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:16.367 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:16.368 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ra = (ratio + temp) - temp,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: Checkstyle errors.

08:04:18.508 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:18.508 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:18.509 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double rb = ratio - ra,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ra = (ratio + temp) - temp,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:04:21.012 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:21.013 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:21.014 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double rb = ratio - ra,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: Checkstyle errors.

08:04:23.592 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:23.592 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:23.593 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double rb = ratio - ra,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ra = (ratio + temp) - temp,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: Checkstyle errors.

08:04:26.029 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:26.030 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:26.031 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = (denom + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double rb = ratio - ra,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:04:28.454 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:28.455 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:28.456 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = (denom + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:04:31.015 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:31.015 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:31.017 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double zb = denom - za,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = (denom + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:04:33.592 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:33.593 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:33.595 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double zb = denom - za,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:04:36.192 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:36.192 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:36.193 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double na = (-1.0) + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = (denom + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:04:38.731 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:38.731 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:38.732 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double na = (-1.0) + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:04:41.268 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:41.268 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:41.269 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double na = (-1.0) + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = denom - za,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:04:43.425 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:43.426 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:43.427 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double nb = -((na + 1.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = denom - za,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:04:45.964 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:45.964 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:45.965 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double nb = -((na + 1.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:04:48.456 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:48.457 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:48.458 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double nb = -((na + 1.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double na = (-1.0) + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:04:50.947 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:50.948 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:50.949 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = na + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = denom - za,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:04:53.400 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:53.401 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:53.402 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = na + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double nb = -((na + 1.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:04:55.805 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:55.805 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:55.806 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = na + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:04:58.444 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:04:58.445 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:04:58.446 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double da = 1.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double na = (-1.0) + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:05:00.585 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:00.585 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:00.586 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double da = 1.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = na + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:05:02.511 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:02.511 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:02.512 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double da = 1.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:05:04.452 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:04.453 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:04.453 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double db = -((da - 1.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double na = (-1.0) + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:05:06.476 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:06.476 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:06.477 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double db = -((da - 1.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double da = 1.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:05:08.938 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:08.939 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:08.940 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double db = -((da - 1.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:05:11.436 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:11.436 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:11.437 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double daa = (da + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double nb = -((na + 1.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:05:13.872 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:13.873 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:13.874 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double daa = (da + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double db = -((da - 1.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:05:16.198 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:16.199 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:16.200 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double daa = (da + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:05:18.282 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:18.283 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:18.284 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double dab = da - daa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double nb = -((na + 1.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:05:20.687 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:20.687 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:20.689 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double dab = da - daa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double db = -((da - 1.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:05:23.122 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:23.122 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:23.123 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double dab = da - daa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:05:25.647 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:25.648 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:25.649 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double dab = da - daa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double daa = (da + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:05:28.122 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:28.122 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:28.124 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ratio = na / da,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = na + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:05:30.497 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:30.498 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:30.499 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ratio = na / da,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double daa = (da + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:05:32.955 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:32.955 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:32.956 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ratio = na / da,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:05:35.390 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:35.391 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:35.392 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ratio = na / da,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double dab = da - daa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:05:37.660 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:37.661 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:37.662 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ratioa = (ratio + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = na + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:05:39.772 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:39.772 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:39.773 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ratioa = (ratio + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double dab = da - daa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:05:42.040 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:42.040 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:42.041 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ratioa = (ratio + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:05:44.464 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:44.464 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:44.465 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ratioa = (ratio + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ratio = na / da,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:05:46.688 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:46.689 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:46.690 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ratiob = ratio - ratioa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double da = 1.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:05:49.013 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:49.013 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:49.014 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ratiob = ratio - ratioa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ratio = na / da,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:05:51.440 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:51.440 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:51.441 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ratiob = ratio - ratioa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:05:53.487 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:53.487 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:53.488 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ratiob = ratio - ratioa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ratioa = (ratio + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:05:55.432 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:55.433 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:55.434 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double na = ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double da = 1.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:05:57.644 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:57.644 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:57.645 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double na = ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ratio = na / da,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:05:59.843 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:05:59.843 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:05:59.844 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double na = ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ratiob = ratio - ratioa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:06:02.330 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:02.331 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:02.332 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double na = ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:06:04.427 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:04.427 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:04.428 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double nb = yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double db = -((da - 1.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:06:06.684 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:06.684 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:06.685 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double nb = yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ratioa = (ratio + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:06:08.926 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:08.926 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:08.928 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double nb = yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double na = ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:06:11.152 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:11.152 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:11.153 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double nb = yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: Checkstyle errors.

08:06:13.209 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:13.209 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:13.210 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ra = (ratio + temp) - temp,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double denom = 1.0 + ya,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: Checkstyle errors.

08:06:15.662 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:15.662 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:15.663 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ra = (ratio + temp) - temp,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double denomr = 1.0 / denom,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:06:18.032 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:18.033 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:18.034 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ra = (ratio + temp) - temp,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: Checkstyle errors.

08:06:19.964 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:19.965 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:19.966 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ra = (ratio + temp) - temp,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ratio = ya * denomr,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:06:21.906 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:21.906 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:21.907 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:06:23.930 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:23.931 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:23.931 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double nb = yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:06:26.451 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:26.452 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:26.453 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double rb = ratio - ra,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:06:28.877 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:28.877 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:28.879 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = (denom + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:06:31.325 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:31.325 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:31.326 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = (denom + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:06:33.719 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:33.719 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:33.720 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = (denom + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = hiPrec[0] + hiPrec[1],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:06:36.192 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:36.192 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:36.193 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = (denom + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = -((ya - hiPrec[0]) - hiPrec[1]),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:06:38.750 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:38.750 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:38.751 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = (denom + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yaa = (ya + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:06:41.228 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:41.229 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:41.230 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = (denom + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yab = ya - yaa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:06:43.704 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:43.704 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:43.705 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = (denom + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double recip = 1.0 / ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:06:46.234 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:46.234 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:46.235 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = (denom + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double recipa = (recip + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:06:48.339 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:48.339 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:48.340 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = (denom + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double recipb = recip - recipa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:06:50.711 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:50.712 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:50.712 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = (denom + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean negate = false,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:06:53.152 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:53.153 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:53.154 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = (denom + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double denomb = (-((denom - 1.0) - ya)) + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:06:55.299 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:55.299 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:55.300 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = (denom + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:06:57.190 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:57.191 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:57.191 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double db = -((da - 2.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double da = 2.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:06:59.196 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:06:59.197 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:06:59.198 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = da + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double db = -((da - 2.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:07:01.526 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:01.526 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:01.527 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: boolean negative = false,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = da + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:07:03.775 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:03.775 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:03.776 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: boolean negative = false,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double db = -((da - 2.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:07:06.245 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:06.245 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:06.246 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: boolean negative = false,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double da = 2.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:07:08.439 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:08.439 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:08.440 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double absAsinh,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double db = -((da - 2.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:07:10.501 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:10.501 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:10.502 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double absAsinh,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double da = 2.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:07:12.409 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:12.409 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:12.410 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double absAsinh,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean negative = false,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:07:14.302 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:14.302 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:14.303 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a2 = a * a,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double da = 2.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:07:16.617 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:16.617 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:16.618 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a2 = a * a,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double absAsinh,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:07:19.015 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:19.015 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:19.016 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double absAtanh,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double da = 2.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:07:21.465 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:21.466 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:21.467 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double absAtanh,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double absAsinh,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:07:23.702 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:23.702 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:23.703 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double absAtanh,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double a2 = a * a,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:07:25.879 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:25.880 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:25.881 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double intPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double absAtanh,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:07:28.059 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:28.059 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:28.060 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double intPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double db = -((da - 2.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:07:30.289 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:30.289 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:30.290 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double intPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double da = 2.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:07:32.449 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:32.450 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:32.450 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double intPartB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double intPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:07:34.638 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:34.638 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:34.639 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double intPartB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double db = -((da - 2.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:07:36.580 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:36.581 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:36.582 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double intPartB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double da = 2.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:07:38.863 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:38.864 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:38.865 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int intVal,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double intPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:07:41.345 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:41.345 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:41.346 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int intVal,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double db = -((da - 2.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:07:43.432 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:43.432 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:43.433 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int intVal,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double da = 2.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:07:45.764 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:45.764 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:45.765 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int intVal,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double intPartB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:07:47.806 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:47.806 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:47.807 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double result = org.apache.commons.math.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double intPartB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:07:50.201 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:50.202 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:50.203 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double result = org.apache.commons.math.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double db = -((da - 2.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:07:52.145 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:52.145 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:52.146 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double result = org.apache.commons.math.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double da = 2.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:07:54.571 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:54.571 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:54.572 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double result = org.apache.commons.math.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int intVal,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:07:56.502 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:56.503 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:56.504 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double result = org.apache.commons.math.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double intPartB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:07:58.673 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:07:58.673 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:07:58.674 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double result = org.apache.commons.math.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double da = 2.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:08:01.054 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:01.055 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:01.056 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double result = org.apache.commons.math.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double result = org.apache.commons.math.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:08:03.459 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:03.460 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:03.461 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int intFrac = ((int) ((x - intVal) * 1024.0)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int intVal,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:08:05.989 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:05.990 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:05.991 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int intFrac = ((int) ((x - intVal) * 1024.0)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double da = 2.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:08:08.317 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:08.317 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:08.318 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int intFrac = ((int) ((x - intVal) * 1024.0)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double result = org.apache.commons.math.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:08:10.496 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:10.496 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:10.497 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double fracPartA = org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[intFrac],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int intVal,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:08:12.814 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:12.814 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:12.815 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double fracPartA = org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[intFrac],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double da = 2.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:08:14.896 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:14.897 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:14.897 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double fracPartA = org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[intFrac],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double result = org.apache.commons.math.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:08:17.234 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:17.234 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:17.235 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double fracPartA = org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[intFrac],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int intFrac = ((int) ((x - intVal) * 1024.0)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:08:19.461 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:19.461 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:19.462 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double fracPartB = org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[intFrac],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double result = org.apache.commons.math.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:08:21.944 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:21.944 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:21.945 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double fracPartB = org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[intFrac],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double da = 2.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:08:24.195 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:24.196 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:24.197 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double fracPartB = org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[intFrac],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int intFrac = ((int) ((x - intVal) * 1024.0)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:08:26.638 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:26.638 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:26.639 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double fracPartB = org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[intFrac],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double fracPartA = org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[intFrac],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:08:28.901 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:28.901 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:28.903 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = x - (intVal + (intFrac / 1024.0)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double result = org.apache.commons.math.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:08:31.307 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:31.307 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:31.308 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = x - (intVal + (intFrac / 1024.0)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double fracPartB = org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[intFrac],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:08:33.487 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:33.487 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:33.488 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = x - (intVal + (intFrac / 1024.0)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double db = -((da - 2.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:08:35.876 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:35.877 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:35.877 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = x - (intVal + (intFrac / 1024.0)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double da = 2.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:08:37.853 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:37.854 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:37.854 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 0.04168701738764507,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double result = org.apache.commons.math.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:08:39.927 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:39.927 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:39.928 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 0.04168701738764507,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double epsilon = x - (intVal + (intFrac / 1024.0)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:08:42.312 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:42.313 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:42.314 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 0.04168701738764507,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double db = -((da - 2.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:08:44.773 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:44.774 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:44.775 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 0.04168701738764507,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double da = 2.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Checkstyle errors.

08:08:47.266 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:47.266 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:47.267 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: boolean negative = false,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double denom = 1.0 + ya,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Checkstyle errors.

08:08:49.728 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:49.728 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:49.729 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: boolean negative = false,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double denomr = 1.0 / denom,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Checkstyle errors.

08:08:51.722 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:51.722 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:51.723 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: boolean negative = false,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ra = (ratio + temp) - temp,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:08:54.114 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:54.115 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:54.115 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: boolean negative = false,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = hiPrec[0] + hiPrec[1],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:08:56.091 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:56.091 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:56.092 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: boolean negative = false,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:08:58.508 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:08:58.508 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:08:58.509 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: boolean negative = false,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:09:00.548 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:00.548 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:00.549 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = da + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:09:03.006 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:03.007 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:03.008 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = da + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:09:05.379 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:05.379 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:05.380 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = da + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double nb = yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:09:07.806 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:07.806 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:07.807 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double db = -((da - 2.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double nb = yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:09:09.900 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:09.900 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:09.901 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double da = 2.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double nb = yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:09:12.149 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:12.149 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:12.150 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 0.04168701738764507,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double nb = yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:09:14.278 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:14.278 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:14.280 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 0.04168701738764507,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double na = ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:09:16.728 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:16.728 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:16.729 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 0.04168701738764507,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ratiob = ratio - ratioa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:09:18.966 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:18.967 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:18.968 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 0.04168701738764507,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ratioa = (ratio + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:09:21.148 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:21.148 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:21.149 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 0.04168701738764507,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ratio = na / da,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:09:23.293 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:23.293 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:23.294 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 0.04168701738764507,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double dab = da - daa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:09:25.494 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:25.494 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:25.495 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 0.04168701738764507,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double daa = (da + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:09:27.682 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:27.682 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:27.683 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 0.04168701738764507,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double db = -((da - 1.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:09:29.956 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:29.956 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:29.957 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 0.04168701738764507,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double da = 1.0 + ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:09:32.129 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:32.130 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:32.131 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 0.04168701738764507,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double nb = -((na + 1.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:09:34.626 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:34.627 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:34.628 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 0.04168701738764507,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double denomb = (-((denom - 1.0) - ya)) + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:09:36.587 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:36.587 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:36.587 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 0.04168701738764507,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yaa = (ya + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:09:38.535 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:38.536 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:38.536 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 0.04168701738764507,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = hiPrec[0] + hiPrec[1],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:09:40.918 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:40.918 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:40.919 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 0.04168701738764507,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:09:43.397 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:43.397 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:43.398 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denom = 1.0 + ya,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int i,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: Resolved multiple problems leading to inaccuracy and/or failure to compute Normal, ChiSquare and Poisson probabilities, Erf and Gamma functions.

08:09:45.490 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:45.491 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:45.492 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denom = 1.0 + ya,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double lastScaleFactor = 1.0,commit: Resolved multiple problems leading to inaccuracy and/or failure to compute Normal, ChiSquare and Poisson probabilities, Erf and Gamma functions.
}, sim: 0.171904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: Resolved multiple problems leading to inaccuracy and/or failure to compute Normal, ChiSquare and Poisson probabilities, Erf and Gamma functions.

08:09:48.006 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:48.006 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:48.007 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denom = 1.0 + ya,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean infinite = false,commit: Resolved multiple problems leading to inaccuracy and/or failure to compute Normal, ChiSquare and Poisson probabilities, Erf and Gamma functions.
}, sim: 0.171904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:09:50.127 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:50.127 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:50.129 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:09:52.519 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:52.519 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:52.520 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:09:54.953 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:54.954 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:54.955 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double db = -((da - 2.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:09:57.346 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:57.346 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:57.347 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ratiob = ratio - ratioa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:09:59.651 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:09:59.652 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:09:59.652 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double nb = -((na + 1.0) - ya),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:01.877 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:01.878 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:01.879 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = 0.04168701738764507,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:04.277 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:04.277 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:04.278 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double absAtanh,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Checkstyle errors.

08:10:06.313 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:06.313 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:06.314 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double rb = ratio - ra,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:08.637 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:08.637 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:08.638 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double absAsinh,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:10.547 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:10.547 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:10.548 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean negative = false,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:10:12.461 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:12.461 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:12.462 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:14.662 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:14.663 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:14.664 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] recip = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:17.169 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:17.169 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:17.170 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] tmp = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:19.379 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:19.379 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:19.380 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int i,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:21.743 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:21.744 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:21.744 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tempB = ((intPartA * fracPartB) + (intPartB * fracPartA)) + (intPartB * fracPartB),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tempA = intPartA * fracPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:23.822 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:23.822 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:23.823 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double tempC = tempB + tempA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tempB = ((intPartA * fracPartB) + (intPartB * fracPartA)) + (intPartB * fracPartB),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:25.857 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:25.857 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:25.858 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double result,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double tempC = tempB + tempA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:28.138 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:28.138 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:28.139 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double ra = (-1.0) + hiPrec[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double result,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:30.481 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:30.481 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:30.482 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double rb = -((ra + 1.0) - hiPrec[0]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double ra = (-1.0) + hiPrec[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:32.466 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:32.466 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:32.467 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double baseA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double rb = -((ra + 1.0) - hiPrec[0]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:34.380 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:34.380 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:34.381 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double baseB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double baseA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:36.721 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:36.721 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:36.722 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsilon,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double baseB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:38.788 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:38.788 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:38.789 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int intFrac = ((int) (x * 1024.0)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:41.290 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:41.290 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:41.291 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tempA = org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[intFrac] - 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int intFrac = ((int) (x * 1024.0)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:43.838 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:43.838 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:43.839 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tempB = org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[intFrac],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tempA = org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[intFrac] - 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:46.285 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:46.286 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:46.286 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = tempA + tempB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tempB = org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[intFrac],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:48.496 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:48.496 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:48.497 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double zb = 0.008336750013465571,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = tempA + tempB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:50.637 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:50.637 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:50.638 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = epsilon,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = 0.008336750013465571,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:52.675 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:52.675 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:52.676 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = za + zb,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = epsilon,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:54.973 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:54.973 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:54.974 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya = za * baseA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = za + zb,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:56.943 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:56.943 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:56.944 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb = -((temp - ya) - (za * baseB)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = za * baseA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:10:59.386 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:10:59.386 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:10:59.387 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double ra = (ratio + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = -((temp - ya) - (za * baseB)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:11:01.849 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:01.850 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:01.851 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double[] xs = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double ra = (ratio + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:11:04.018 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:04.019 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:04.020 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double[] ys = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] xs = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:11:06.473 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:06.473 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:06.474 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double[] facts = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] ys = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:11:08.763 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:08.764 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:08.765 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double[] as = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] facts = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:11:10.982 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:10.983 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:10.984 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = d * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] as = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:11:13.276 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:13.276 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:13.277 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = d * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double a = d * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:11:15.647 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:15.647 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:15.649 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double c = a[0] + a[1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double a = d * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:11:18.017 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:18.017 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:18.018 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double d = -((c - a[0]) - a[1]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double c = a[0] + a[1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:11:20.213 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:20.213 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:20.214 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = c * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double d = -((c - a[0]) - a[1]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:11:22.624 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:22.625 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:22.625 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = c * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:11:25.026 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:25.026 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:25.026 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = c * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double d = -((c - a[0]) - a[1]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:11:27.129 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:27.130 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:27.130 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = c * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:11:29.562 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:29.562 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:29.563 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double b = 1.0 / 4194304.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double d = -((c - a[0]) - a[1]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:11:31.629 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:31.630 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:31.631 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double b = 1.0 / 4194304.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:11:34.173 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:34.174 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:34.174 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double b = 1.0 / 4194304.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:11:36.695 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:36.695 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:36.696 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = 1.0 - b,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:11:39.273 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:39.274 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:39.274 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = 1.0 - b,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:11:41.585 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:41.585 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:41.586 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = 1.0 - b,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double b = 1.0 / 4194304.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:11:43.953 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:43.953 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:43.954 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double err = (((1.0 - (result[0] * in[0])) - (result[0] * in[1])) - 
(result[1] * in[0])) - (result[1] * in[1]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:11:46.390 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:46.390 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:46.391 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double err = (((1.0 - (result[0] * in[0])) - (result[0] * in[1])) - 
(result[1] * in[0])) - (result[1] * in[1]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double a = 1.0 - b,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:11:48.902 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:48.902 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:48.903 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double err = (((1.0 - (result[0] * in[0])) - (result[0] * in[1])) - 
(result[1] * in[0])) - (result[1] * in[1]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:11:50.959 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:50.959 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:50.961 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double[] zs = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double b = 1.0 / 4194304.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:11:53.291 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:53.291 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:53.292 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double[] zs = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double err = (((1.0 - (result[0] * in[0])) - (result[0] * in[1])) - 
(result[1] * in[0])) - (result[1] * in[1]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:11:55.423 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:55.424 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:55.424 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double[] zs = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:11:57.730 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:57.730 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:57.731 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp = result[0] + zs[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double b = 1.0 / 4194304.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:11:59.652 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:11:59.652 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:11:59.653 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp = result[0] + zs[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] zs = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:12:01.794 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:01.795 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:01.796 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp = result[0] + zs[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:12:03.948 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:03.949 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:03.950 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long bits = java.lang.Double.doubleToLongBits(x),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double a = 1.0 - b,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:12:06.268 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:06.268 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:06.269 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long bits = java.lang.Double.doubleToLongBits(x),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp = result[0] + zs[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:12:08.539 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:08.539 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:08.540 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long bits = java.lang.Double.doubleToLongBits(x),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:12:10.733 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:10.734 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:10.735 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int exp = ((int) (bits >> 52)) - 1023,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double a = 1.0 - b,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:12:12.888 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:12.888 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:12.889 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int exp = ((int) (bits >> 52)) - 1023,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp = result[0] + zs[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:12:15.044 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:15.044 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:15.045 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int exp = ((int) (bits >> 52)) - 1023,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:12:17.323 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:17.323 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:17.324 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int exp = ((int) (bits >> 52)) - 1023,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long bits = java.lang.Double.doubleToLongBits(x),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:12:19.639 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:19.639 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:19.640 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = x - 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double err = (((1.0 - (result[0] * in[0])) - (result[0] * in[1])) - 
(result[1] * in[0])) - (result[1] * in[1]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:12:21.763 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:21.763 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:21.764 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = x - 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long bits = java.lang.Double.doubleToLongBits(x),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:12:24.230 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:24.231 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:24.232 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = x - 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:12:26.576 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:26.576 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:26.578 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = x - 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exp = ((int) (bits >> 52)) - 1023,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:12:28.635 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:28.635 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:28.636 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xb = (xa - x) + 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double err = (((1.0 - (result[0] * in[0])) - (result[0] * in[1])) - 
(result[1] * in[0])) - (result[1] * in[1]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:12:31.007 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:31.007 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:31.008 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xb = (xa - x) + 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exp = ((int) (bits >> 52)) - 1023,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:12:33.053 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:33.053 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:33.054 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xb = (xa - x) + 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:12:35.560 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:35.560 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:35.561 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xb = (xa - x) + 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xa = x - 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:12:37.932 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:37.932 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:37.933 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp = xa * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] zs = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:12:40.038 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:40.038 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:40.039 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp = xa * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xa = x - 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:12:42.021 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:42.021 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:42.022 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp = xa * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:12:44.382 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:44.382 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:44.384 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double aa = (xa + tmp) - tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] zs = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:12:46.405 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:46.405 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:46.406 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double aa = (xa + tmp) - tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xa = x - 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:12:48.856 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:48.856 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:48.857 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double aa = (xa + tmp) - tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:12:51.095 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:51.096 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:51.096 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double aa = (xa + tmp) - tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xb = (xa - x) + 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:12:53.388 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:53.388 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:53.389 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ab = xa - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp = result[0] + zs[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:12:55.521 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:55.522 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:55.523 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ab = xa - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xb = (xa - x) + 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:12:57.759 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:57.760 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:57.761 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ab = xa - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:12:59.889 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:12:59.890 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:12:59.891 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ab = xa - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double aa = (xa + tmp) - tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:13:02.136 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:02.137 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:02.137 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:13:04.098 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:04.098 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:04.099 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] lnm = org.apache.commons.math.util.FastMath.LN_MANT[((int) ((bits & 0xffc0000000000L) >> 42))],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Unnecessary casts
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:13:06.044 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:06.045 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:06.046 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] lnm = org.apache.commons.math.util.FastMath.LN_MANT[((int) ((bits & 0xffc0000000000L) >> 42))],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Unnecessary casts

08:13:08.202 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:08.203 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:08.203 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double lnza = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:13:10.376 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:10.377 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:10.378 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double lnza = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] lnm = org.apache.commons.math.util.FastMath.LN_MANT[((int) ((bits & 0xffc0000000000L) >> 42))],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Unnecessary casts

08:13:12.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:12.345 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:12.346 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double lnza = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:13:14.619 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:14.619 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:14.620 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double lnzb = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] lnm = org.apache.commons.math.util.FastMath.LN_MANT[((int) ((bits & 0xffc0000000000L) >> 42))],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Unnecessary casts

08:13:16.735 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:16.735 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:16.736 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double lnzb = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:13:19.068 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:19.068 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:19.069 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double lnzb = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double lnza = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:13:21.202 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:21.203 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:21.203 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp = epsilon * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double lnza = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: Unnecessary casts

08:13:23.135 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:23.135 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:23.136 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp = epsilon * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:13:25.592 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:25.592 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:25.593 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double aa = (epsilon + tmp) - tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double lnza = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Unnecessary casts

08:13:27.657 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:27.657 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:27.658 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double aa = (epsilon + tmp) - tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:13:30.102 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:30.103 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:30.103 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double aa = (epsilon + tmp) - tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double lnzb = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:13:32.545 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:32.545 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:32.546 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ab = epsilon - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double lnzb = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Unnecessary casts

08:13:34.574 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:34.575 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:34.575 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ab = epsilon - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:13:36.635 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:36.635 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:36.636 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ab = epsilon - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double aa = (epsilon + tmp) - tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:13:38.995 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:38.995 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:38.996 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double lnzb = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Unnecessary casts

08:13:41.458 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:41.458 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:41.459 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:13:43.560 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:43.560 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:43.561 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ab = epsilon - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:13:45.924 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:45.924 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:45.925 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xb = ab,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double aa = (epsilon + tmp) - tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Unnecessary casts

08:13:48.444 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:48.444 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:48.445 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xb = ab,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:13:50.607 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:50.608 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:50.609 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xb = ab,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xa = aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed checkstyle and findbugs warnings
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:13:53.108 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:53.109 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:53.110 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double numer = bits & 0x3ffffffffffL,commit: fixed checkstyle and findbugs warnings
}, sim: 0.048151
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double aa = (epsilon + tmp) - tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed checkstyle and findbugs warnings
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:13:55.393 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:55.393 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:55.394 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double numer = bits & 0x3ffffffffffL,commit: fixed checkstyle and findbugs warnings
}, sim: 0.048151
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] lnm = org.apache.commons.math.util.FastMath.LN_MANT[((int) ((bits & 0xffc0000000000L) >> 42))],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed checkstyle and findbugs warnings
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:13:57.604 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:57.604 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:57.605 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double numer = bits & 0x3ffffffffffL,commit: fixed checkstyle and findbugs warnings
}, sim: 0.048151
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed checkstyle and findbugs warnings
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:13:59.842 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:13:59.842 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:13:59.843 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double numer = bits & 0x3ffffffffffL,commit: fixed checkstyle and findbugs warnings
}, sim: 0.048151
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:14:01.942 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:01.943 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:01.944 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denom = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L),commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double aa = (epsilon + tmp) - tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:14:04.041 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:04.041 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:04.042 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denom = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L),commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xb = ab,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:14:06.087 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:06.087 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:06.088 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denom = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L),commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp = epsilon * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: Unnecessary casts

08:14:08.014 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:08.014 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:08.015 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denom = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L),commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:14:10.000 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:10.001 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:10.002 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double aa = (epsilon + tmp) - tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Unnecessary casts

08:14:12.288 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:12.288 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:12.289 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:14:14.386 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:14.387 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:14.388 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xa = aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:14:16.857 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:16.857 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:16.858 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xb = ab,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:14:19.220 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:19.220 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:19.222 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ab = epsilon - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Unnecessary casts

08:14:21.400 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:21.401 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:21.402 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:14:23.833 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:23.833 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:23.834 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xb = ab,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:14:25.829 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:25.829 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:25.830 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:14:28.313 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:28.313 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:28.314 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double a = org.apache.commons.math.util.FastMath.LN_2_A * exp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ab = epsilon - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:14:30.309 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:30.310 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:30.311 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double a = org.apache.commons.math.util.FastMath.LN_2_A * exp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant

08:14:32.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:32.740 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:32.741 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double a = org.apache.commons.math.util.FastMath.LN_2_A * exp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double denom = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L),commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Unnecessary casts

08:14:34.676 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:34.676 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:34.677 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double a = org.apache.commons.math.util.FastMath.LN_2_A * exp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:14:36.701 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:36.701 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:36.702 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xa = aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:14:39.037 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:39.037 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:39.038 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double a = org.apache.commons.math.util.FastMath.LN_2_A * exp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant

08:14:41.011 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:41.011 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:41.012 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double denom = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L),commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Unnecessary casts

08:14:43.117 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:43.117 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:43.118 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed checkstyle and findbugs warnings
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:14:45.481 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:45.481 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:45.482 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double numer = bits & 0x3ffffffffffL,commit: fixed checkstyle and findbugs warnings
}, sim: 0.048151
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double a = d * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:14:47.570 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:47.571 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:47.572 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp = xa * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp = epsilon * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant

08:14:49.785 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:49.785 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:49.786 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp = xa * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double denom = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L),commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:14:51.933 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:51.934 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:51.934 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denom = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L),commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:14:54.222 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:54.223 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:54.224 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denom = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L),commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ab = xa - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Unnecessary casts
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:14:56.178 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:56.178 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:56.179 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ab = xa - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:14:58.119 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:14:58.119 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:14:58.120 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ab = xa - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:00.310 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:00.310 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:00.311 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double a = org.apache.commons.math.util.FastMath.LN_2_A * exp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ab = xa - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:02.488 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:02.488 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:02.489 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ab = xa - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:04.425 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:04.425 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:04.426 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ab = xa - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:06.411 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:06.411 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:06.412 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xb = ab,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ab = xa - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:08.863 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:08.863 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:08.864 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ab = xa - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:11.265 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:11.265 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:11.266 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ab = xa - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ab = epsilon - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:13.351 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:13.351 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:13.353 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ab = xa - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double aa = (epsilon + tmp) - tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:15.751 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:15.752 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:15.752 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ab = xa - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double lnza = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: fixed checkstyle and findbugs warnings

08:15:17.808 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:17.808 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:17.809 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ab = xa - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double numer = bits & 0x3ffffffffffL,commit: fixed checkstyle and findbugs warnings
}, sim: 0.048151
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:20.210 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:20.210 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:20.211 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ab = xa - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:22.247 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:22.247 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:22.248 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ab = xa - aa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed checkstyle and findbugs warnings
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:24.283 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:24.283 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:24.284 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double numer = bits & 0x3ffffffffffL,commit: fixed checkstyle and findbugs warnings
}, sim: 0.048151
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tempA = intPartA * fracPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:15:26.723 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:26.724 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:26.725 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = d * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp = epsilon * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:15:28.633 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:28.634 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:28.634 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = d * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp = xa * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant

08:15:30.586 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:30.587 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:30.587 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = d * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double denom = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L),commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:15:32.908 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:32.909 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:32.910 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = d * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:35.171 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:35.171 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:35.172 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = d * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tempA = intPartA * fracPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:37.536 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:37.536 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:37.538 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = d * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tempB = ((intPartA * fracPartB) + (intPartB * fracPartA)) + (intPartB * fracPartB),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:39.917 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:39.917 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:39.918 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = d * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double tempC = tempB + tempA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:42.078 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:42.079 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:42.079 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = d * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double result,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:44.458 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:44.458 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:44.459 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = d * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double ra = (-1.0) + hiPrec[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:46.589 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:46.589 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:46.590 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = d * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double rb = -((ra + 1.0) - hiPrec[0]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:48.872 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:48.872 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:48.875 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = d * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double baseA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:51.096 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:51.097 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:51.098 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = d * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double baseB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:53.278 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:53.279 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:53.279 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = d * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:55.500 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:55.501 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:55.501 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = d * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tempA = org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[intFrac] - 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:57.657 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:57.657 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:57.658 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = d * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = epsilon,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:15:59.578 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:15:59.579 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:15:59.580 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = d * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] as = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:16:01.706 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:01.706 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:01.707 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = d * 9.313225746154785E-10,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double a = d * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:16:03.871 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:03.871 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:03.872 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double d = -((c - a) - lnm[0]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double c = a + lnm[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:16:05.985 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:05.985 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:05.986 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double d = -((c - a) - lnm[0]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:16:07.951 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:07.951 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:07.952 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double d = -((c - a) - lnm[0]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:16:09.885 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:09.886 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:09.886 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double c = a + lnm[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:16:12.145 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:12.145 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:12.146 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpb = -((xpa - 1.0) - x),commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double c = a + lnm[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.

08:16:14.262 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:14.262 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:14.263 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpb = -((xpa - 1.0) - x),commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:16:16.259 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:16.260 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:16.261 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double c = a + lnm[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:16:18.730 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:18.730 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:18.731 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double d = -((c - a) - lnm[0]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:16:20.665 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:20.666 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:20.666 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double fx1 = xpb / xpa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double c = a + lnm[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:16:23.009 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:23.009 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:23.010 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double fx1 = xpb / xpa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:16:25.061 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:25.061 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:25.062 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double fx1 = xpb / xpa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double d = -((c - a) - lnm[0]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:16:27.162 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:27.163 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:27.163 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsilon = (0.5 * fx1) + 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double d = -((c - a) - lnm[0]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:16:29.485 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:29.485 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:29.486 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsilon = (0.5 * fx1) + 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:16:31.596 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:31.597 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:31.598 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsilon = (0.5 * fx1) + 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double fx1 = xpb / xpa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:16:33.911 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:33.911 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:33.912 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double y = (x * 0.333333333333333) - 0.5,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double d = -((c - a) - lnm[0]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:16:36.042 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:36.043 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:36.043 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double y = (x * 0.333333333333333) - 0.5,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (0.5 * fx1) + 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:16:38.359 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:38.359 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:38.360 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double y = (x * 0.333333333333333) - 0.5,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:16:40.297 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:40.297 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:40.298 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double[] hiPrec = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double fx1 = xpb / xpa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:16:42.267 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:42.267 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:42.268 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double[] hiPrec = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double y = (x * 0.333333333333333) - 0.5,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:16:44.442 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:44.442 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:44.443 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double[] hiPrec = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:16:46.632 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:46.632 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:46.633 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double fx1 = xpb / xpa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:16:48.665 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:48.665 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:48.666 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] hiPrec = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:16:50.951 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:50.951 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:50.952 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:16:53.118 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:53.118 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:53.119 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double tmp = hiPrec[0] * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (0.5 * fx1) + 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:16:55.037 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:55.037 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:55.038 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double tmp = hiPrec[0] * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:16:57.380 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:57.381 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:57.382 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double tmp = hiPrec[0] * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:16:59.452 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:16:59.453 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:16:59.453 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lna = (hiPrec[0] + tmp) - tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (0.5 * fx1) + 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:17:01.840 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:01.841 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:01.842 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lna = (hiPrec[0] + tmp) - tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:17:03.868 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:03.868 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:03.869 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lna = (hiPrec[0] + tmp) - tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] hiPrec = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:17:06.281 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:06.281 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:06.282 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lnb = (hiPrec[0] - lna) + hiPrec[1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double y = (x * 0.333333333333333) - 0.5,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:17:08.249 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:08.249 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:08.250 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lnb = (hiPrec[0] - lna) + hiPrec[1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:17:10.211 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:10.212 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:10.213 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lnb = (hiPrec[0] - lna) + hiPrec[1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lna = (hiPrec[0] + tmp) - tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:17:12.162 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:12.162 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:12.163 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double rln10a = 0.4342944622039795,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double y = (x * 0.333333333333333) - 0.5,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:17:14.580 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:14.580 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:14.581 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double rln10a = 0.4342944622039795,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:17:16.599 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:16.599 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:16.600 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double rln10a = 0.4342944622039795,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lna = (hiPrec[0] + tmp) - tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:17:19.031 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:19.032 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:19.032 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double rln10a = 0.4342944622039795,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lnb = (hiPrec[0] - lna) + hiPrec[1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:17:21.151 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:21.151 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:21.152 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double rln10b = 1.9699272335463627E-8,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] hiPrec = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:17:23.508 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:23.508 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:23.509 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double rln10b = 1.9699272335463627E-8,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:17:25.585 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:25.585 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:25.586 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double rln10b = 1.9699272335463627E-8,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lnb = (hiPrec[0] - lna) + hiPrec[1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:17:27.850 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:27.850 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:27.851 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double rln10b = 1.9699272335463627E-8,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double rln10a = 0.4342944622039795,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:17:29.978 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:29.979 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:29.979 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double[] lns = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] hiPrec = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:17:32.245 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:32.245 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:32.246 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double[] lns = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double rln10b = 1.9699272335463627E-8,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:17:34.295 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:34.295 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:34.296 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double[] lns = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:17:36.749 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:36.749 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:36.750 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double[] lns = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:17:38.663 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:38.663 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:38.664 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long yi = ((long) (y)),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lna = (hiPrec[0] + tmp) - tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:17:40.905 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:40.905 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:40.906 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long yi = ((long) (y)),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double fx1 = xpb / xpa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:17:43.143 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:43.143 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:43.144 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long yi = ((long) (y)),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double c = a + lnm[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.

08:17:45.436 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:45.436 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:45.437 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long yi = ((long) (y)),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xpb = -((xpa - 1.0) - x),commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.

08:17:47.551 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:47.551 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:47.552 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long yi = ((long) (y)),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:17:49.838 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:49.838 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:49.839 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: fixed errors with infinities added asin/acos

08:17:51.897 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:51.897 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:51.898 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp1 = y * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:17:53.801 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:53.801 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:53.801 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp1 = y * 9.313225746154785E-10,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = y * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:17:55.698 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:55.698 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:55.699 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp1 = y * 9.313225746154785E-10,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:17:58.065 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:17:58.066 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:17:58.066 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp1 = y * 9.313225746154785E-10,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = y * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:18:00.084 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:00.084 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:00.085 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp2 = tmp1 * 9.313225746154785E-10,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = y * 9.313225746154785E-10,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:18:02.545 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:02.545 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:02.546 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp2 = tmp1 * 9.313225746154785E-10,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = y * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: fixed errors with infinities added asin/acos

08:18:04.631 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:04.631 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:04.632 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = y * 9.313225746154785E-10,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:18:07.089 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:07.089 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:07.090 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = y * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: fixed errors with infinities added asin/acos

08:18:09.103 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:09.104 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:09.105 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp2 = tmp1 * 9.313225746154785E-10,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: fixed errors with infinities added asin/acos

08:18:11.448 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:11.449 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:11.450 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double lna = lns[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp2 = tmp1 * 9.313225746154785E-10,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:18:13.443 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:13.443 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:13.444 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double lna = lns[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = y * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:18:16.186 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:16.187 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:16.188 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double lna = lns[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: fixed errors with infinities added asin/acos

08:18:18.349 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:18.349 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:18.350 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double lnb = lns[1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp2 = tmp1 * 9.313225746154785E-10,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:18:20.737 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:20.737 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:20.738 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double lnb = lns[1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:18:22.898 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:22.899 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:22.900 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double lnb = lns[1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double lna = lns[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:18:25.143 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:25.143 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:25.144 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp1 = lna * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double lna = lns[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:18:27.303 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:27.304 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:27.305 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp1 = lna * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:18:29.548 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:29.549 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:29.550 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp1 = lna * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = y * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:18:32.032 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:32.032 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:32.033 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp2 = (lna + tmp1) - tmp1,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double lna = lns[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:18:33.971 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:33.972 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:33.972 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp2 = (lna + tmp1) - tmp1,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = y * 9.313225746154785E-10,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:18:36.363 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:36.363 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:36.364 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp2 = (lna + tmp1) - tmp1,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp2 = tmp1 * 9.313225746154785E-10,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:18:38.450 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:38.450 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:38.452 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double aa = lna * ya,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double lna = lns[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:18:40.824 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:40.824 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:40.825 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double aa = lna * ya,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = y * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:18:43.112 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:43.112 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:43.113 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double aa = lna * ya,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:18:45.247 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:45.248 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:45.248 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double aa = lna * ya,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double lnb = lns[1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:18:47.194 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:47.195 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:47.195 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double ab = ((lna * yb) + (lnb * ya)) + (lnb * yb),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double lna = lns[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:18:49.149 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:49.149 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:49.151 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double ab = ((lna * yb) + (lnb * ya)) + (lnb * yb),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:18:51.613 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:51.613 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:51.614 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double ab = ((lna * yb) + (lnb * ya)) + (lnb * yb),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double aa = lna * ya,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:18:53.647 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:53.647 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:53.648 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 1.0 / 120.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double lnb = lns[1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:18:56.028 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:56.028 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:56.028 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 1.0 / 120.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:18:58.043 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:18:58.043 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:18:58.044 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 1.0 / 120.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double ab = ((lna * yb) + (lnb * ya)) + (lnb * yb),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:19:00.020 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:00.020 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:00.021 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double result = org.apache.commons.math.util.FastMath.exp(lna, z, null),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double lnb = lns[1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:19:02.511 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:02.511 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:02.512 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double result = org.apache.commons.math.util.FastMath.exp(lna, z, null),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:19:04.571 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:04.572 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:04.572 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double result = org.apache.commons.math.util.FastMath.exp(lna, z, null),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double ab = ((lna * yb) + (lnb * ya)) + (lnb * yb),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:19:07.050 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:07.050 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:07.051 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double result = org.apache.commons.math.util.FastMath.exp(lna, z, null),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = 1.0 / 120.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:19:09.166 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:09.167 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:09.168 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] x = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double aa = lna * ya,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:19:11.476 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:11.477 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:11.477 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] x = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:19:13.607 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:13.608 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:13.609 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] x = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = 1.0 / 120.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:19:15.875 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:15.875 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:15.876 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] x = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double result = org.apache.commons.math.util.FastMath.exp(lna, z, null),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:19:17.901 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:17.901 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:17.902 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] x2 = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double aa = lna * ya,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:19:20.015 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:20.015 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:20.016 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] x2 = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] x = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:19:22.120 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:22.120 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:22.120 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] x2 = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = y * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:19:24.098 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:24.099 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:24.099 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] x2 = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:19:26.173 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:26.173 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:26.174 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] y = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double ab = ((lna * yb) + (lnb * ya)) + (lnb * yb),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:19:28.352 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:28.353 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:28.354 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] y = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] x2 = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:19:30.358 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:30.358 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:30.359 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] y = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = y * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:19:32.299 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:32.299 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:32.300 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] y = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:19:34.355 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:34.355 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:34.356 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long yi = ((long) (y)),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.

08:19:36.815 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:36.815 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:36.816 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:19:39.019 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:39.019 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:39.020 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double tmp = hiPrec[0] * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = lna * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:19:41.231 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:41.231 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:41.232 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double tmp = hiPrec[0] * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = y * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:19:43.165 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:43.166 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:43.167 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double tmp = hiPrec[0] * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] y = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:19:45.547 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:45.548 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:45.548 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double tmp = hiPrec[0] * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:19:47.588 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:47.588 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:47.589 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:19:49.521 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:49.521 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:49.522 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] y = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:19:51.490 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:51.490 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:51.491 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] y = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:19:54.000 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:54.001 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:54.002 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] y = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] lns = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:19:55.983 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:55.983 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:55.984 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] x2 = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] lns = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:19:58.017 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:19:58.017 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:19:58.018 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] x = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] lns = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:20:00.387 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:00.387 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:00.388 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double result = org.apache.commons.math.util.FastMath.exp(lna, z, null),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] lns = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:20:02.529 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:02.530 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:02.530 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 1.0 / 120.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] lns = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:20:04.908 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:04.909 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:04.910 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double ab = ((lna * yb) + (lnb * ya)) + (lnb * yb),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] lns = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:20:07.082 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:07.082 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:07.083 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double aa = lna * ya,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] lns = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:20:09.306 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:09.306 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:09.307 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double lnb = lns[1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] lns = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:20:11.389 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:11.389 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:11.390 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double[] lns = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double lna = lns[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: fixed errors with infinities added asin/acos

08:20:13.793 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:13.793 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:13.794 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double[] lns = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp2 = (lna + tmp1) - tmp1,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:20:15.983 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:15.984 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:15.986 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp2 = (lna + tmp1) - tmp1,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double rln10b = 1.9699272335463627E-8,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:20:18.251 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:18.251 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:18.252 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp2 = (lna + tmp1) - tmp1,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double rln10a = 0.4342944622039795,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:20:20.474 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:20.475 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:20.476 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp2 = (lna + tmp1) - tmp1,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lnb = (hiPrec[0] - lna) + hiPrec[1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:20:22.702 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:22.702 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:22.703 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp2 = (lna + tmp1) - tmp1,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lna = (hiPrec[0] + tmp) - tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:20:25.104 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:25.104 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:25.105 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp2 = (lna + tmp1) - tmp1,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] hiPrec = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:20:27.178 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:27.178 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:27.179 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp2 = (lna + tmp1) - tmp1,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double y = (x * 0.333333333333333) - 0.5,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:20:29.668 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:29.668 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:29.669 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp2 = (lna + tmp1) - tmp1,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (0.5 * fx1) + 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:20:31.850 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:31.850 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:31.851 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp2 = (lna + tmp1) - tmp1,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double fx1 = xpb / xpa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:20:34.103 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:34.104 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:34.104 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp2 = (lna + tmp1) - tmp1,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double d = -((c - a) - lnm[0]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:20:36.031 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:36.031 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:36.032 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp2 = (lna + tmp1) - tmp1,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double c = a + lnm[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.

08:20:38.348 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:38.348 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:38.349 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp2 = (lna + tmp1) - tmp1,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed checkstyle and findbugs warnings

08:20:40.452 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:40.452 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:40.453 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long yi = ((long) (y)),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double numer = bits & 0x3ffffffffffL,commit: fixed checkstyle and findbugs warnings
}, sim: 0.048151
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:20:42.361 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:42.362 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:42.362 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp = epsilon * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = lna * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:20:44.815 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:44.815 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:44.816 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp = epsilon * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = y * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:20:46.862 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:46.863 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:46.864 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp = epsilon * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:20:49.288 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:49.288 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:49.289 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp = epsilon * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double tmp = hiPrec[0] * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:20:51.419 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:51.419 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:51.420 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp = xa * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:20:53.804 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:53.804 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:53.805 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:20:55.883 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:55.883 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:55.884 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double a = d * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant

08:20:58.301 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:20:58.301 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:20:58.302 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double denom = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L),commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: Unnecessary casts

08:21:00.342 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:00.342 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:00.343 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: Unnecessary casts

08:21:02.858 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:02.858 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:02.860 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: Unnecessary casts

08:21:04.803 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:04.804 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:04.805 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Unnecessary casts

08:21:06.867 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:06.867 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:06.868 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] y = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:09.213 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:09.213 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:09.214 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] y = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:11.156 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:11.156 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:11.157 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] x2 = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:13.334 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:13.334 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:13.335 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] x = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:15.665 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:15.666 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:15.667 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double result = org.apache.commons.math.util.FastMath.exp(lna, z, null),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:17.917 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:17.917 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:17.918 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double z = 1.0 / 120.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:20.042 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:20.043 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:20.044 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double ab = ((lna * yb) + (lnb * ya)) + (lnb * yb),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:22.239 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:22.240 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:22.240 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double aa = lna * ya,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:24.448 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:24.448 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:24.449 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double lnb = lns[1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:26.455 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:26.456 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:26.456 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double lna = lns[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:28.445 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:28.445 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:28.446 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] lns = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:30.807 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:30.807 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:30.808 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double rln10b = 1.9699272335463627E-8,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:32.910 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:32.910 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:32.911 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lnb = (hiPrec[0] - lna) + hiPrec[1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:35.325 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:35.325 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:35.326 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (0.5 * fx1) + 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: fixed errors with infinities added asin/acos

08:21:37.363 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:37.363 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:37.364 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = y * 9.313225746154785E-10,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.

08:21:39.310 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:39.311 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:39.312 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xpb = -((xpa - 1.0) - x),commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:41.754 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:41.754 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:41.755 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double d = -((c - a) - lnm[0]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:43.726 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:43.726 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:43.727 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double b = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double c = a + lnm[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:46.335 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:46.335 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:46.336 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpb = -((xpa - 1.0) - x),commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double a = org.apache.commons.math.util.FastMath.LN_2_A * exp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:48.287 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:48.288 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:48.289 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpb = -((xpa - 1.0) - x),commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][1],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:50.860 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:50.860 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:50.861 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpb = -((xpa - 1.0) - x),commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xb = ab,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:52.831 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:52.832 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:52.833 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpb = -((xpa - 1.0) - x),commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double lnzb = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:55.362 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:55.363 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:55.363 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpb = -((xpa - 1.0) - x),commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xa = x - 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:57.387 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:57.387 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:57.388 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpb = -((xpa - 1.0) - x),commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double ra = (ratio + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:21:59.741 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:21:59.741 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:21:59.742 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpb = -((xpa - 1.0) - x),commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:22:01.885 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:01.885 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:01.886 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpb = -((xpa - 1.0) - x),commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double result,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:22:04.347 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:04.347 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:04.348 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpb = -((xpa - 1.0) - x),commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tempB = ((intPartA * fracPartB) + (intPartB * fracPartA)) + (intPartB * fracPartB),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:22:06.311 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:06.312 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:06.312 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpb = -((xpa - 1.0) - x),commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tempA = intPartA * fracPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: fixed checkstyle and findbugs warnings

08:22:08.507 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:08.507 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:08.508 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpb = -((xpa - 1.0) - x),commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double numer = bits & 0x3ffffffffffL,commit: fixed checkstyle and findbugs warnings
}, sim: 0.048151
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:22:10.691 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:10.691 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:10.692 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long yi = ((long) (y)),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = ya + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:22:12.662 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:12.662 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:12.663 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long yi = ((long) (y)),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int intVal,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:22:14.940 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:14.940 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:14.941 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long yi = ((long) (y)),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] recip = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: Checkstyle errors.

08:22:17.111 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:17.111 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:17.112 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long yi = ((long) (y)),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double rb = ratio - ra,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:22:19.397 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:19.397 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:19.398 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long yi = ((long) (y)),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int i,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:22:21.527 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:21.527 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:21.528 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long yi = ((long) (y)),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:22:23.881 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:23.882 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:23.883 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = lna * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:22:26.002 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:26.002 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:26.004 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = y * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:22:28.358 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:28.358 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:28.359 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp = epsilon * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant

08:22:30.411 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:30.411 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:30.412 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double denom = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L),commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:22:32.408 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:32.408 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:32.409 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:22:34.823 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:34.823 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:34.824 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double a = d * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:22:36.795 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:36.795 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:36.796 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:22:38.747 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:38.748 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:38.749 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:22:41.258 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:41.258 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:41.259 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp1 = y * 9.313225746154785E-10,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:22:43.218 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:43.219 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:43.219 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp2 = tmp1 * 9.313225746154785E-10,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:22:45.552 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:45.552 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:45.553 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp2 = (lna + tmp1) - tmp1,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:22:47.650 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:47.650 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:47.651 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:22:50.073 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:50.073 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:50.074 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpb = -((xpa - 1.0) - x),commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed checkstyle and findbugs warnings
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:22:52.059 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:52.060 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:52.061 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double numer = bits & 0x3ffffffffffL,commit: fixed checkstyle and findbugs warnings
}, sim: 0.048151
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed checkstyle and findbugs warnings
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:22:54.426 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:54.426 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:54.427 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double numer = bits & 0x3ffffffffffL,commit: fixed checkstyle and findbugs warnings
}, sim: 0.048151
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int i,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:22:56.424 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:56.424 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:56.425 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int i,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tempA = intPartA * fracPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:22:58.585 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:22:58.585 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:22:58.586 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tempA = intPartA * fracPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] tmp = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:23:00.837 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:00.838 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:00.838 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tempA = intPartA * fracPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] recip = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:23:02.962 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:02.963 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:02.964 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tempA = intPartA * fracPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:23:05.166 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:05.166 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:05.167 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tempA = intPartA * fracPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean negative = false,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:23:07.112 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:07.112 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:07.113 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tempA = intPartA * fracPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double absAsinh,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:23:09.360 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:09.360 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:09.361 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tempA = intPartA * fracPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double a2 = a * a,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:23:11.559 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:11.560 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:11.560 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tempA = intPartA * fracPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double absAtanh,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:23:13.780 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:13.780 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:13.780 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tempA = intPartA * fracPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double intPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:23:15.973 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:15.974 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:15.974 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tempA = intPartA * fracPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double intPartB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:23:18.281 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:18.281 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:18.282 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tempA = intPartA * fracPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int intVal,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:23:20.427 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:20.427 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:20.428 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tempA = intPartA * fracPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double result = org.apache.commons.math.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:23:22.363 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:22.363 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:22.365 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tempA = intPartA * fracPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double epsilon = x - (intVal + (intFrac / 1024.0)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:23:24.707 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:24.707 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:24.708 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tempA = intPartA * fracPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double recipa = (recip + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:23:26.760 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:26.760 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:26.761 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tempA = intPartA * fracPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = -((ya - hiPrec[0]) - hiPrec[1]),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:23:29.167 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:29.168 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:29.168 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tempA = intPartA * fracPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:23:31.217 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:31.218 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:31.218 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tempA = intPartA * fracPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = 0.04168701738764507,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:23:33.147 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:33.148 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:33.148 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tempB = ((intPartA * fracPartB) + (intPartB * fracPartA)) + (intPartB * fracPartB),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:23:35.655 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:35.655 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:35.656 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double tempC = tempB + tempA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:23:37.696 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:37.696 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:37.697 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double ra = (-1.0) + hiPrec[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:23:40.194 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:40.194 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:40.195 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:23:42.137 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:42.138 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:42.138 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = za * baseA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:23:44.585 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:44.585 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:44.586 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long bits = java.lang.Double.doubleToLongBits(x),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:23:46.483 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:46.484 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:46.484 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double aa = lna * ya,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:23:48.457 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:48.457 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:48.458 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] y = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:23:50.808 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:50.808 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:50.810 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:23:52.874 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:52.874 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:52.875 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: Unnecessary casts

08:23:54.837 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:54.837 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:54.838 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Unnecessary casts
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:23:57.237 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:57.237 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:57.238 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = hiPrec[0] + hiPrec[1],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Unnecessary casts
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:23:59.178 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:23:59.179 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:23:59.180 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = -((ya - hiPrec[0]) - hiPrec[1]),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Unnecessary casts
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:24:01.109 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:01.110 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:01.110 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yab = ya - yaa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Unnecessary casts
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:24:03.392 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:03.392 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:03.393 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = ya + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Unnecessary casts
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:24:05.420 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:05.420 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:05.421 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = na + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Unnecessary casts
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:24:07.354 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:07.354 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:07.355 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double na = ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Unnecessary casts
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:24:09.659 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:09.659 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:09.660 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = da + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Unnecessary casts
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:24:11.792 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:11.793 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:11.793 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Unnecessary casts
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:24:14.125 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:14.125 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:14.126 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:24:16.176 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:16.176 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:16.177 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:24:18.109 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:18.109 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:18.111 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant

08:24:20.434 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:20.434 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:20.435 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double denom = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L),commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:24:22.489 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:22.489 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:22.490 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double[] result = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:24:24.503 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:24.503 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:24.504 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double x = i / 8.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] result = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:24:26.986 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:26.986 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:26.987 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] xs = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double x = i / 8.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:24:28.986 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:28.986 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:28.987 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] ys = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] xs = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:24:31.389 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:31.389 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:31.390 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] as = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] ys = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:24:33.300 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:33.300 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:33.301 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] bs = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] as = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:24:35.302 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:35.302 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:35.303 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] temps = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] bs = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:24:37.690 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:37.690 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:37.691 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double x2 = x * x,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] temps = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:24:39.616 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:39.616 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:39.617 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double p = 2.7553817452272217E-6,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double x2 = x * x,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:24:41.587 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:41.588 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:41.588 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double p = 2.479773539153719E-5,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double p = 2.7553817452272217E-6,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:24:44.003 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:44.003 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:44.004 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int idx = ((int) ((xa * 8.0) + 0.5)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double p = 2.479773539153719E-5,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:24:45.926 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:45.927 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:45.928 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int idx = ((int) ((xa * 8.0) + 0.5)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Typo in constant name

08:24:48.148 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:48.148 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:48.149 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double sintA = org.apache.commons.math.util.FastMath.SINE_TABLE_A[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:24:50.417 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:50.417 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:50.418 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double sintA = org.apache.commons.math.util.FastMath.SINE_TABLE_A[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] bs = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:24:52.664 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:52.664 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:52.666 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double sintA = org.apache.commons.math.util.FastMath.SINE_TABLE_A[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double p = 2.479773539153719E-5,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Typo in constant name

08:24:54.847 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:54.848 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:54.849 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double sintA = org.apache.commons.math.util.FastMath.SINE_TABLE_A[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:24:57.024 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:57.024 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:57.026 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double sintA = org.apache.commons.math.util.FastMath.SINE_TABLE_A[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int idx = ((int) ((xa * 8.0) + 0.5)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:24:59.234 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:24:59.234 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:24:59.235 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double sintB = org.apache.commons.math.util.FastMath.SINE_TABLE_B[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] temps = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:25:01.351 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:01.351 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:01.352 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double sintB = org.apache.commons.math.util.FastMath.SINE_TABLE_B[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int idx = ((int) ((xa * 8.0) + 0.5)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Typo in constant name

08:25:03.576 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:03.576 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:03.577 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double sintB = org.apache.commons.math.util.FastMath.SINE_TABLE_B[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:25:05.491 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:05.491 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:05.492 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double sintB = org.apache.commons.math.util.FastMath.SINE_TABLE_B[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double sintA = org.apache.commons.math.util.FastMath.SINE_TABLE_A[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:25:07.415 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:07.415 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:07.416 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double costA = org.apache.commons.math.util.FastMath.COSINE_TABLE_A[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] temps = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:25:09.736 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:09.737 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:09.738 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double costA = org.apache.commons.math.util.FastMath.COSINE_TABLE_A[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int idx = ((int) ((xa * 8.0) + 0.5)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:25:11.841 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:11.841 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:11.842 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double costA = org.apache.commons.math.util.FastMath.COSINE_TABLE_A[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double sintB = org.apache.commons.math.util.FastMath.SINE_TABLE_B[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Typo in constant name

08:25:13.771 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:13.772 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:13.772 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double costA = org.apache.commons.math.util.FastMath.COSINE_TABLE_A[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:25:15.710 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:15.711 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:15.712 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double costB = org.apache.commons.math.util.FastMath.COSINE_TABLE_B[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double x2 = x * x,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:25:17.665 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:17.666 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:17.667 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double costB = org.apache.commons.math.util.FastMath.COSINE_TABLE_B[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double sintA = org.apache.commons.math.util.FastMath.SINE_TABLE_A[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:25:20.116 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:20.116 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:20.117 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double costB = org.apache.commons.math.util.FastMath.COSINE_TABLE_B[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double costA = org.apache.commons.math.util.FastMath.COSINE_TABLE_A[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Typo in constant name

08:25:22.143 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:22.143 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:22.144 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double costB = org.apache.commons.math.util.FastMath.COSINE_TABLE_B[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:25:24.582 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:24.583 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:24.583 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sinEpsB = org.apache.commons.math.util.FastMath.polySine(epsilon),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double sinEpsA = epsilon,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:25:26.514 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:26.515 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:26.515 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double cosEpsA = 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double sinEpsB = org.apache.commons.math.util.FastMath.polySine(epsilon),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:25:28.437 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:28.437 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:28.438 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double cosEpsB = org.apache.commons.math.util.FastMath.polyCosine(epsilon),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double cosEpsA = 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:25:30.913 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:30.913 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:30.914 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double cosEpsB = org.apache.commons.math.util.FastMath.polyCosine(epsilon),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:25:32.896 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:32.896 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:32.897 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp2 = (sinEpsA + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:25:34.940 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:34.940 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:34.941 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp2 = (sinEpsA + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double cosEpsA = 1.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:25:37.181 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:37.181 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:37.182 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp2 = (sinEpsA + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:25:39.126 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:39.127 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:39.128 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp2 = (sinEpsA + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double cosEpsB = org.apache.commons.math.util.FastMath.polyCosine(epsilon),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:25:41.326 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:41.326 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:41.328 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double a = 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double cosEpsB = org.apache.commons.math.util.FastMath.polyCosine(epsilon),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:25:43.554 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:43.554 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:43.555 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double a = 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:25:45.730 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:45.730 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:45.731 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double a = 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp2 = (sinEpsA + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:25:47.976 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:47.976 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:47.978 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double b = 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double cosEpsB = org.apache.commons.math.util.FastMath.polyCosine(epsilon),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:25:50.175 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:50.175 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:50.176 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double b = 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double a = 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:25:52.342 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:52.342 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:52.343 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double b = 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:25:54.321 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:54.321 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:54.322 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double t = sintA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp2 = (sinEpsA + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:25:56.732 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:56.732 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:56.733 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double t = sintA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double b = 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:25:58.729 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:25:58.730 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:25:58.731 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double t = sintA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:26:01.044 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:01.045 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:01.045 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double c = a + t,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp2 = (sinEpsA + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:26:03.167 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:03.167 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:03.168 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double c = a + t,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double t = sintA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:26:05.247 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:05.247 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:05.248 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double c = a + t,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:26:07.655 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:07.655 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:07.656 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double d = -((c - a) - t),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double a = 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:26:09.618 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:09.618 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:09.619 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double d = -((c - a) - t),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double c = a + t,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:26:12.068 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:12.068 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:12.069 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double d = -((c - a) - t),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:26:14.035 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:14.035 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:14.036 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double pi2a = 1.5707963267948966,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double a = 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:26:16.430 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:16.430 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:16.431 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double pi2a = 1.5707963267948966,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double c = a + t,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:26:18.498 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:18.499 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:18.500 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double pi2a = 1.5707963267948966,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:26:20.555 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:20.556 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:20.556 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double pi2a = 1.5707963267948966,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double d = -((c - a) - t),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:26:22.987 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:22.987 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:22.988 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double pi2b = 6.123233995736766E-17,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double b = 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:26:25.010 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:25.011 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:25.011 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double pi2b = 6.123233995736766E-17,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double d = -((c - a) - t),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:26:27.394 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:27.394 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:27.395 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double pi2b = 6.123233995736766E-17,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:26:29.328 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:29.328 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:29.329 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double pi2b = 6.123233995736766E-17,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pi2a = 1.5707963267948966,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:26:31.256 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:31.257 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:31.258 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = pi2a - xa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double b = 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:26:33.314 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:33.314 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:33.315 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = pi2a - xa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pi2a = 1.5707963267948966,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:26:35.568 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:35.568 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:35.569 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = pi2a - xa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:26:37.554 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:37.554 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:37.555 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double a = pi2a - xa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pi2b = 6.123233995736766E-17,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:26:39.758 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:39.758 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:39.759 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double b = -((a - pi2a) + xa),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double t = sintA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:26:42.010 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:42.010 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:42.011 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double b = -((a - pi2a) + xa),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pi2b = 6.123233995736766E-17,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:26:43.936 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:43.936 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:43.937 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double b = -((a - pi2a) + xa),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:26:46.144 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:46.145 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:46.146 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double b = -((a - pi2a) + xa),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double a = pi2a - xa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:26:48.254 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:48.254 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:48.255 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double t = sintA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:26:50.208 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:50.208 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:50.209 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pi2b = 6.123233995736766E-17,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:26:52.623 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:52.623 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:52.624 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double b = -((a - pi2a) + xa),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:26:54.591 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:54.591 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:54.592 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:26:56.519 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:56.520 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:56.521 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sina = a + b,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double c = a + t,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:26:58.507 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:26:58.507 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:26:58.508 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sina = a + b,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double a = pi2a - xa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:27:00.909 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:00.909 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:00.910 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sina = a + b,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:02.938 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:02.939 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:02.939 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sina = a + b,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double b = -((a - pi2a) + xa),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:05.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:05.345 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:05.345 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sinEpsA = epsilon,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:07.347 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:07.347 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:07.348 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sinEpsA = epsilon,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] result = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:09.318 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:09.318 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:09.319 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sinEpsA = epsilon,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] xs = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:11.792 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:11.792 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:11.793 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sinEpsA = epsilon,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] temps = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:13.836 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:13.836 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:13.837 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sinEpsA = epsilon,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double costB = org.apache.commons.math.util.FastMath.COSINE_TABLE_B[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Typo in constant name

08:27:16.140 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:16.141 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:16.141 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sinEpsA = epsilon,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:27:18.169 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:18.169 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:18.170 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:27:20.086 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:20.087 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:20.087 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:22.444 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:22.444 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:22.445 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double b = -((a - pi2a) + xa),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:24.475 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:24.476 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:24.477 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double sina = a + b,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:26.556 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:26.556 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:26.557 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double cosa = a + b,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double sinb = -((sina - a) - b),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:28.788 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:28.788 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:28.789 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double cosb = -((cosa - a) - b),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double cosa = a + b,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:30.705 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:30.706 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:30.707 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double cosb = -((cosa - a) - b),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:33.013 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:33.013 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:33.014 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double est = sina / cosa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:35.087 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:35.087 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:35.088 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double esta = (est + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double est = sina / cosa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:37.290 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:37.290 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:37.291 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double estb = est - esta,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double esta = (est + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:39.505 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:39.505 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:39.506 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double cosaa = (cosa + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double estb = est - esta,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:41.464 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:41.465 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:41.466 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double cosab = cosa - cosaa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double cosaa = (cosa + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:43.863 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:43.864 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:43.864 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double err = ((((sina - (esta * cosaa)) - (esta * cosab)) - (estb * cosaa)) - (estb * cosab)) / cosa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double cosab = cosa - cosaa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:45.851 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:45.851 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:45.852 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xbadj = xb + ((est * est) * xb),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double err = ((((sina - (esta * cosaa)) - (esta * cosab)) - (estb * cosaa)) - (estb * cosab)) / cosa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:47.786 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:47.786 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:47.787 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long inbits = java.lang.Double.doubleToLongBits(x),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xbadj = xb + ((est * est) * xb),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:50.173 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:50.174 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:50.174 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int exponent = ((int) ((inbits >> 52) & 0x7ff)) - 1023,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long inbits = java.lang.Double.doubleToLongBits(x),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:52.195 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:52.196 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:52.197 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long shpi0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exponent = ((int) ((inbits >> 52) & 0x7ff)) - 1023,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:54.654 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:54.654 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:54.655 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long shpiA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long shpi0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:56.680 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:56.680 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:56.681 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long shpiB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long shpiA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:27:58.635 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:27:58.635 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:27:58.636 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int idx = exponent >> 6,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long shpiB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:01.091 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:01.091 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:01.092 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int shift = exponent - (idx << 6),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int idx = exponent >> 6,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:03.037 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:03.037 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:03.038 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long a = inbits >>> 32,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int shift = exponent - (idx << 6),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:05.164 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:05.164 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:05.165 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long b = inbits & 0xffffffffL,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long a = inbits >>> 32,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:07.114 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:07.114 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:07.115 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long c = shpiA >>> 32,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long b = inbits & 0xffffffffL,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:09.612 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:09.612 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:09.613 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long d = shpiA & 0xffffffffL,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long c = shpiA >>> 32,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:11.539 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:11.539 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:11.540 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long ac = a * c,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long d = shpiA & 0xffffffffL,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:13.666 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:13.666 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:13.667 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long bd = b * d,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long ac = a * c,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:15.955 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:15.955 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:15.955 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long bc = b * c,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long bd = b * d,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:18.029 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:18.029 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:18.030 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long ad = a * d,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long bc = b * c,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:20.353 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:20.353 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:20.354 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long prodB = bd + (ad << 32),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long ad = a * d,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:22.278 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:22.279 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:22.279 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long prodA = ac + (ad >>> 32),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long prodB = bd + (ad << 32),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:24.445 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:24.445 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:24.446 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: boolean bita = (bd & 0x8000000000000000L) != 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long prodA = ac + (ad >>> 32),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:29.509 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:29.509 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:29.510 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: boolean bitb = (ad & 0x80000000L) != 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean bita = (bd & 0x8000000000000000L) != 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:31.761 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:31.761 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:31.762 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: boolean bitsum = (prodB & 0x8000000000000000L) != 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean bitb = (ad & 0x80000000L) != 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:33.981 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:33.982 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:33.983 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int intPart = ((int) (prodA >>> 62)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean bitsum = (prodB & 0x8000000000000000L) != 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:36.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:36.344 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:36.345 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long prod2B = bd + (ad << 32),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int intPart = ((int) (prodA >>> 62)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:38.619 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:38.619 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:38.620 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long prod2A = ac + (ad >>> 32),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long prod2B = bd + (ad << 32),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:40.848 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:40.848 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:40.850 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmpA = (prod2A >>> 12) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long prod2A = ac + (ad >>> 32),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant

08:28:43.110 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:43.110 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:43.111 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmpB = ((((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / org.apache.commons.math.util.FastMath.TWO_POWER_52) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmpA = (prod2A >>> 12) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant

08:28:45.269 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:45.269 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:45.270 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sumA = tmpA + tmpB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmpB = ((((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / org.apache.commons.math.util.FastMath.TWO_POWER_52) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:47.233 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:47.234 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:47.235 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sinb = -((sina - a) - b),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:49.161 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:49.162 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:49.162 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sinb = -((sina - a) - b),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] result = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:51.650 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:51.650 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:51.652 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sinb = -((sina - a) - b),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] xs = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:53.627 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:53.627 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:53.628 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sinb = -((sina - a) - b),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] temps = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:55.548 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:55.548 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:55.549 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sinb = -((sina - a) - b),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double costB = org.apache.commons.math.util.FastMath.COSINE_TABLE_B[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Typo in constant name

08:28:57.904 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:57.904 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:57.905 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sinb = -((sina - a) - b),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:28:59.982 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:59.982 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:59.983 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sinb = -((sina - a) - b),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double t = sintA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:29:02.334 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:02.335 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:02.336 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sinb = -((sina - a) - b),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pi2b = 6.123233995736766E-17,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:29:04.382 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:04.382 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:04.383 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sinb = -((sina - a) - b),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double b = -((a - pi2a) + xa),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:29:06.301 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:06.301 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:06.302 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sinb = -((sina - a) - b),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double sina = a + b,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant

08:29:08.416 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:08.416 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:08.417 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmpB = ((((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / org.apache.commons.math.util.FastMath.TWO_POWER_52) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Typo in constant name

08:29:10.638 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:10.639 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:10.640 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double cosa = a + b,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Typo in constant name

08:29:12.540 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:12.540 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:12.541 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double cosb = -((cosa - a) - b),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Typo in constant name

08:29:14.437 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:14.438 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:14.439 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Typo in constant name

08:29:16.579 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:16.579 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:16.580 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double est = sina / cosa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Typo in constant name

08:29:18.756 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:18.757 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:18.758 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double esta = (est + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Typo in constant name

08:29:20.673 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:20.673 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:20.674 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double estb = est - esta,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Typo in constant name

08:29:22.566 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:22.566 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:22.567 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double cosaa = (cosa + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Typo in constant name

08:29:24.468 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:24.468 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:24.469 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double cosab = cosa - cosaa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:29:26.366 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:26.366 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:26.367 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double err = ((((sina - (esta * cosaa)) - (esta * cosab)) - (estb * cosaa)) - (estb * cosab)) / cosa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:29:28.405 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:28.405 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:28.406 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xbadj = xb + ((est * est) * xb),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:29:30.611 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:30.611 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:30.612 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exponent = ((int) ((inbits >> 52) & 0x7ff)) - 1023,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:29:32.638 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:32.639 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:32.640 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int idx = exponent >> 6,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:29:34.549 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:34.550 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:34.550 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long bc = b * c,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:29:36.450 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:36.450 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:36.451 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean bitsum = (prodB & 0x8000000000000000L) != 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:29:38.394 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:38.394 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:38.395 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long prod2A = ac + (ad >>> 32),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant

08:29:40.333 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:40.333 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:40.334 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmpB = ((((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / org.apache.commons.math.util.FastMath.TWO_POWER_52) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant

08:29:42.269 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:42.270 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:42.271 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmpA = (prod2A >>> 12) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:29:44.170 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:44.170 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:44.171 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmpA = (prod2A >>> 12) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant

08:29:46.244 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:46.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:46.245 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmpB = ((((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / org.apache.commons.math.util.FastMath.TWO_POWER_52) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:29:48.387 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:48.387 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:48.388 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sumB = -((sumA - tmpA) - tmpB),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double sumA = tmpA + tmpB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:29:50.457 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:50.458 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:50.459 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int quadrant = 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double sumB = -((sumA - tmpA) - tmpB),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:29:52.371 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:52.371 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:52.372 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int quadrant = 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:29:54.287 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:54.287 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:54.288 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xb = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:29:56.225 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:56.225 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:56.227 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] reduceResults = new double[3],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xb = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:29:58.165 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:29:58.165 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:29:58.166 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int k = ((int) (xa * 0.6366197723675814)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] reduceResults = new double[3],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:00.073 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:00.073 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:00.074 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double remA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int k = ((int) (xa * 0.6366197723675814)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:01.968 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:01.968 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:01.969 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double remB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double remA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:03.974 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:03.974 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:03.975 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double a = (-k) * 1.570796251296997,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double remB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:05.864 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:05.864 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:05.865 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double b = remA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double a = (-k) * 1.570796251296997,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:07.754 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:07.754 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:07.755 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = x,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double b = remA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:09.646 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:09.646 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:09.647 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xb = 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xa = x,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:11.543 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:11.543 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:11.544 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int idx,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xb = 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:13.490 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:13.491 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:13.492 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = 1.0 / xa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int idx,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:15.532 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:15.532 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:15.533 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsA = xa - org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = 1.0 / xa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:17.585 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:17.585 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:17.586 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsB = -((epsA - xa) + org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsA = xa - org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:19.587 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:19.587 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:19.588 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = epsA + epsB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsB = -((epsA - xa) + org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:21.526 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:21.526 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:21.527 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya = (xa + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = epsA + epsB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:23.553 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:23.553 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:23.554 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb = (xb + xa) - ya,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = (xa + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:25.531 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:25.531 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:25.532 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denom = 1.0 / (1.0 + ((xa + xb) * (org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx] + org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx]))),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = (xb + xa) - ya,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:27.483 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:27.483 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:27.484 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp2 = xa * org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double denom = 1.0 / (1.0 + ((xa + xb) * (org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx] + org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx]))),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:29.406 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:29.407 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:29.407 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = 1.0 + temp2,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp2 = xa * org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:31.795 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:31.795 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:31.796 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double zb = -((za - 1.0) - temp2),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = 1.0 + temp2,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:33.816 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:33.816 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:33.817 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double yaa = (ya + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = -((za - 1.0) - temp2),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:35.775 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:35.775 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:35.776 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double yab = ya - yaa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double yaa = (ya + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:38.173 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:38.174 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:38.175 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double zaa = (za + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double yab = ya - yaa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:40.137 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:40.137 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:40.138 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double zab = za - zaa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double zaa = (za + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:42.039 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:42.039 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:42.040 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsA2 = epsA * epsA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double zab = za - zaa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:43.962 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:43.962 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:43.963 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double resultb,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsA2 = epsA * epsA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:46.107 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:46.107 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:46.108 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = org.apache.commons.math.util.FastMath.EIGHTHS[idx] + ya,commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double resultb,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: Typo in constant name

08:30:48.340 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:48.340 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:48.341 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double zb = -((za - org.apache.commons.math.util.FastMath.EIGHTHS[idx]) - ya),commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = org.apache.commons.math.util.FastMath.EIGHTHS[idx] + ya,commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Typo in constant name

08:30:50.228 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:50.229 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:50.230 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double pia = 1.5707963267948966 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = -((za - org.apache.commons.math.util.FastMath.EIGHTHS[idx]) - ya),commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:52.117 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:52.117 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:52.118 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double pib = 6.123233995736766E-17 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pia = 1.5707963267948966 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:54.041 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:54.041 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:54.042 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = x * y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pib = 6.123233995736766E-17 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:55.948 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:55.948 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:55.949 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double invx = 1.0 / x,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = x * y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:30:58.110 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:58.110 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:58.111 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double invy = 1.0 / y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double invx = 1.0 / x,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:00.240 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:00.240 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:00.241 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double r = y / x,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double invy = 1.0 / y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:02.155 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:02.155 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:02.156 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double r = y / x,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = x * y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:04.107 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:04.107 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:04.108 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double r = y / x,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pib = 6.123233995736766E-17 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:06.039 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:06.039 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:06.040 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double r = y / x,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pia = 1.5707963267948966 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:08.044 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:08.050 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:08.051 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ra = org.apache.commons.math.util.FastMath.doubleHighPart(r),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = x * y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:10.378 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:10.378 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:10.379 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ra = org.apache.commons.math.util.FastMath.doubleHighPart(r),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pia = 1.5707963267948966 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:31:12.444 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:12.444 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:12.445 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ra = org.apache.commons.math.util.FastMath.doubleHighPart(r),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double r = y / x,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:14.413 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:14.413 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:14.414 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double rb = r - ra,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pib = 6.123233995736766E-17 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:16.772 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:16.772 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:16.773 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double rb = r - ra,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double invx = 1.0 / x,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:18.744 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:18.745 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:18.746 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double rb = r - ra,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double invy = 1.0 / y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:20.742 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:20.742 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:20.743 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = x * y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:22.719 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:22.719 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:22.720 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pia = 1.5707963267948966 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:31:25.154 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:25.154 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:25.155 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ra = org.apache.commons.math.util.FastMath.doubleHighPart(r),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:27.122 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:27.122 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:27.123 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xb = x - xa,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pib = 6.123233995736766E-17 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:31:29.065 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:29.066 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:29.067 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xb = x - xa,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:31.562 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:31.562 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:31.563 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xb = x - xa,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pia = 1.5707963267948966 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:33.498 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:33.499 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:33.500 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pib = 6.123233995736766E-17 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:31:35.604 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:35.604 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:35.605 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:37.929 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:37.929 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:37.931 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pia = 1.5707963267948966 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:31:40.022 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:40.023 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:40.024 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double xb = x - xa,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:42.324 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:42.324 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:42.325 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pia = 1.5707963267948966 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:44.463 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:44.463 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:44.464 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double invx = 1.0 / x,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:46.766 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:46.766 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:46.767 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double rb = r - ra,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:48.734 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:48.734 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:48.735 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = x * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pib = 6.123233995736766E-17 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:50.985 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:50.985 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:50.986 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = x * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double invy = 1.0 / y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:53.040 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:53.040 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:53.041 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = x * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:31:55.018 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:55.018 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:55.019 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xa = (x + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pib = 6.123233995736766E-17 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:31:57.282 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:57.282 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:57.283 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xa = (x + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double xb = x - xa,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:31:59.371 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:59.371 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:59.372 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xa = (x + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ra = org.apache.commons.math.util.FastMath.doubleHighPart(r),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:32:01.313 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:01.313 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:01.314 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xa = (x + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double r = y / x,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:32:03.670 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:03.670 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:03.671 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya = xa * xa,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pib = 6.123233995736766E-17 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:32:05.747 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:05.747 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:05.748 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya = xa * xa,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:32:08.116 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:08.117 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:08.118 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya = xa * xa,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double r = y / x,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:32:10.183 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:10.184 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:10.185 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya = xa * xa,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double xa = (x + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:32:12.529 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:12.529 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:12.530 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb = ((xa * xb) * 2.0) + (xb * xb),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pia = 1.5707963267948966 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:32:14.553 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:14.553 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:14.554 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb = ((xa * xb) * 2.0) + (xb * xb),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ra = org.apache.commons.math.util.FastMath.doubleHighPart(r),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:32:16.574 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:16.575 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:16.576 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb = ((xa * xb) * 2.0) + (xb * xb),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = xa * xa,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:32:18.989 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:18.989 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:18.990 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb = ((xa * xb) * 2.0) + (xb * xb),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double r = y / x,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:32:20.908 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:20.908 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:20.909 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = 1.0 + ya,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pia = 1.5707963267948966 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:32:22.828 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:22.829 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:22.829 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = 1.0 + ya,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ra = org.apache.commons.math.util.FastMath.doubleHighPart(r),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:32:24.735 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:24.735 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:24.736 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = 1.0 + ya,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = ((xa * xb) * 2.0) + (xb * xb),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:32:26.836 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:26.836 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:26.836 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = 1.0 + ya,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double r = y / x,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:32:29.077 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:29.077 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:29.078 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double y,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = -((za - 1.0) - ya),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:32:30.966 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:30.966 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:30.967 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double dx = zb / (2.0 * y),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double y,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:32:32.876 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:32.877 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:32.878 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double r = x / y,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double dx = zb / (2.0 * y),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:32:34.783 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:34.783 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:34.784 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ra = (r + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double r = x / y,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:32:36.720 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:36.720 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:36.721 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double y = org.apache.commons.math.util.FastMath.sqrt(za),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ra = (r + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:32:38.812 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:38.813 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:38.813 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double r = y / x,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double y = org.apache.commons.math.util.FastMath.sqrt(za),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: fixed errors with infinities added asin/acos

08:32:40.858 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:40.858 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:40.859 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: boolean subnormal = false,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double r = y / x,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:32:42.971 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:42.971 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:42.972 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int exp3 = exponent / 3,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean subnormal = false,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:32:44.899 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:44.900 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:44.901 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double p2 = java.lang.Double.longBitsToDouble((inbits & 0x8000000000000000L) | 
(((long) ((exp3 + 1023) & 0x7ff)) << 52)),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exp3 = exponent / 3,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: fixed errors with infinities added asin/acos

08:32:46.854 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:46.854 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:46.855 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double p2 = java.lang.Double.longBitsToDouble((inbits & 0x8000000000000000L) | 
(((long) ((exp3 + 1023) & 0x7ff)) << 52)),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ra = (r + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: fixed errors with infinities added asin/acos

08:32:49.221 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:49.221 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:49.222 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double p2 = java.lang.Double.longBitsToDouble((inbits & 0x8000000000000000L) | 
(((long) ((exp3 + 1023) & 0x7ff)) << 52)),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double dx = zb / (2.0 * y),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: fixed errors with infinities added asin/acos

08:32:51.215 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:51.215 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:51.216 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double p2 = java.lang.Double.longBitsToDouble((inbits & 0x8000000000000000L) | 
(((long) ((exp3 + 1023) & 0x7ff)) << 52)),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double y,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: fixed errors with infinities added asin/acos

08:32:53.128 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:53.128 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:53.129 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double p2 = java.lang.Double.longBitsToDouble((inbits & 0x8000000000000000L) | 
(((long) ((exp3 + 1023) & 0x7ff)) << 52)),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = -((za - 1.0) - ya),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: fixed errors with infinities added asin/acos

08:32:55.393 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:55.393 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:55.395 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double mant = java.lang.Double.longBitsToDouble((inbits & 0xfffffffffffffL) | 0x3ff0000000000000L),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ra = (r + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:32:57.460 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:57.460 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:57.461 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double mant = java.lang.Double.longBitsToDouble((inbits & 0xfffffffffffffL) | 0x3ff0000000000000L),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean subnormal = false,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:32:59.428 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:59.428 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:59.429 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double mant = java.lang.Double.longBitsToDouble((inbits & 0xfffffffffffffL) | 0x3ff0000000000000L),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exp3 = exponent / 3,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: fixed errors with infinities added asin/acos

08:33:01.795 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:01.796 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:01.797 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double est = -0.010714690733195933,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ra = (r + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:33:03.956 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:03.956 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:03.957 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double est = -0.010714690733195933,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean subnormal = false,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:33:05.957 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:05.957 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:05.958 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double est = -0.010714690733195933,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double mant = java.lang.Double.longBitsToDouble((inbits & 0xfffffffffffffL) | 0x3ff0000000000000L),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: fixed errors with infinities added asin/acos

08:33:08.361 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:08.361 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:08.362 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xs = x / ((p2 * p2) * p2),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double y = org.apache.commons.math.util.FastMath.sqrt(za),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: fixed errors with infinities added asin/acos

08:33:10.312 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:10.313 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:10.314 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xs = x / ((p2 * p2) * p2),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double dx = zb / (2.0 * y),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: fixed errors with infinities added asin/acos

08:33:12.736 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:12.736 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:12.737 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xs = x / ((p2 * p2) * p2),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = -((za - 1.0) - ya),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: Checkstyle errors.

08:33:14.797 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:14.797 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:14.798 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xs = x / ((p2 * p2) * p2),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double p2 = java.lang.Double.longBitsToDouble((inbits & 0x8000000000000000L) | 
(((long) ((exp3 + 1023) & 0x7ff)) << 52)),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: fixed errors with infinities added asin/acos

08:33:17.083 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:17.084 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:17.085 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = est * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ra = (r + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:33:19.250 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:19.250 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:19.251 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = est * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exp3 = exponent / 3,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:33:21.417 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:21.417 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:21.418 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = est * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double est = -0.010714690733195933,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: fixed errors with infinities added asin/acos

08:33:23.606 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:23.607 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:23.608 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya = (est + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double y = org.apache.commons.math.util.FastMath.sqrt(za),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:33:25.774 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:25.774 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:25.775 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya = (est + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double mant = java.lang.Double.longBitsToDouble((inbits & 0xfffffffffffffL) | 0x3ff0000000000000L),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:33:28.058 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:28.058 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:28.059 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya = (est + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = est * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:33:30.246 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:30.246 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:30.247 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya = (est + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double est = -0.010714690733195933,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: fixed errors with infinities added asin/acos

08:33:32.530 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:32.530 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:32.531 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb = est - ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double y = org.apache.commons.math.util.FastMath.sqrt(za),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:33:34.674 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:34.674 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:34.675 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb = est - ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double mant = java.lang.Double.longBitsToDouble((inbits & 0xfffffffffffffL) | 0x3ff0000000000000L),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:33:36.885 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:36.885 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:36.886 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb = est - ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = (est + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:33:39.067 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:39.067 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:39.068 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb = est - ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = est * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: fixed errors with infinities added asin/acos

08:33:41.262 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:41.262 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:41.263 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = ya * ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double r = y / x,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:33:43.219 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:43.220 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:43.221 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = ya * ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double est = -0.010714690733195933,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:33:45.640 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:45.641 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:45.642 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = ya * ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = est - ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:33:47.863 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:47.863 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:47.864 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = ya * ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = est * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: fixed errors with infinities added asin/acos

08:33:50.230 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:50.230 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:50.231 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double p2 = java.lang.Double.longBitsToDouble((inbits & 0x8000000000000000L) | 
(((long) ((exp3 + 1023) & 0x7ff)) << 52)),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double xa = (x + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:33:52.312 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:52.312 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:52.313 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = x * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = est * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:33:54.731 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:54.731 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:54.732 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = x * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = ya * ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:33:56.770 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:56.770 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:56.771 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = ya * ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:33:59.283 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:59.283 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:59.284 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb = est - ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:34:01.296 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:01.296 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:01.297 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya = (est + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:34:03.253 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:03.254 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:03.255 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double est = -0.010714690733195933,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:34:05.758 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:05.758 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:05.759 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double mant = java.lang.Double.longBitsToDouble((inbits & 0xfffffffffffffL) | 0x3ff0000000000000L),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:34:07.752 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:07.752 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:07.753 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int exp3 = exponent / 3,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:34:10.254 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:10.254 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:10.255 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: boolean subnormal = false,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: fixed errors with infinities added asin/acos

08:34:12.237 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:12.237 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:12.238 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double r = y / x,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:34:14.695 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:14.695 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:14.696 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double r = y / x,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double rb = r - ra,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:34:16.659 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:16.659 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:16.660 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double r = y / x,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double invy = 1.0 / y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:34:18.911 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:18.911 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:18.913 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double r = y / x,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double invx = 1.0 / x,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:34:21.035 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:21.035 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:21.036 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double r = y / x,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = x * y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:34:23.104 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:23.105 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:23.105 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double r = y / x,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pib = 6.123233995736766E-17 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:34:25.438 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:25.438 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:25.440 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double r = y / x,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pia = 1.5707963267948966 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:34:27.596 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:27.596 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:27.597 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double r = y / x,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:34:29.919 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:29.919 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:29.920 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double r = y / x,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double xb = x - xa,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:34:31.892 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:31.893 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:31.894 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double r = y / x,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:34:34.345 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:34.345 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:34.346 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double r = y / x,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double r = y / x,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:34:36.253 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:36.253 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:36.254 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double r = y / x,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double xa = (x + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:34:38.314 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:38.314 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:38.315 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double r = y / x,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = ((xa * xb) * 2.0) + (xb * xb),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:34:40.681 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:40.681 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:40.683 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double r = y / x,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = 1.0 + ya,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:34:42.606 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:42.606 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:42.607 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = 1.0 + ya,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double y = org.apache.commons.math.util.FastMath.sqrt(za),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:34:44.903 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:44.903 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:44.904 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = 1.0 + ya,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ra = (r + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:34:46.977 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:46.977 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:46.978 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = 1.0 + ya,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double dx = zb / (2.0 * y),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: Checkstyle errors.

08:34:48.974 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:48.975 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:48.976 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = 1.0 + ya,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double p2 = java.lang.Double.longBitsToDouble((inbits & 0x8000000000000000L) | 
(((long) ((exp3 + 1023) & 0x7ff)) << 52)),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:34:51.288 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:51.288 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:51.290 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = 1.0 + ya,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = -((za - 1.0) - ya),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: Checkstyle errors.

08:34:53.361 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:53.362 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:53.363 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = 1.0 + ya,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double xs = x / ((p2 * p2) * p2),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: fixed errors with infinities added asin/acos

08:34:55.389 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:55.390 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:55.391 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xs = x / ((p2 * p2) * p2),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = ((xa * xb) * 2.0) + (xb * xb),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: fixed errors with infinities added asin/acos

08:34:57.926 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:57.927 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:57.928 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xs = x / ((p2 * p2) * p2),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = xa * xa,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: fixed errors with infinities added asin/acos

08:34:59.919 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:59.920 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:59.920 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xs = x / ((p2 * p2) * p2),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double xa = (x + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:35:02.404 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:02.404 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:02.406 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double p2 = java.lang.Double.longBitsToDouble((inbits & 0x8000000000000000L) | 
(((long) ((exp3 + 1023) & 0x7ff)) << 52)),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double sumA = tmpA + tmpB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:35:04.402 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:04.403 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:04.403 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double zb = -((za - org.apache.commons.math.util.FastMath.EIGHTHS[idx]) - ya),commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = est * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:35:06.802 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:06.802 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:06.804 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double zb = -((za - org.apache.commons.math.util.FastMath.EIGHTHS[idx]) - ya),commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = x * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:35:08.934 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:08.934 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:08.935 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double zb = -((za - org.apache.commons.math.util.FastMath.EIGHTHS[idx]) - ya),commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = est - ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:35:11.431 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:11.432 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:11.433 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double zb = -((za - org.apache.commons.math.util.FastMath.EIGHTHS[idx]) - ya),commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exp3 = exponent / 3,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:35:13.360 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:13.361 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:13.361 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double zb = -((za - org.apache.commons.math.util.FastMath.EIGHTHS[idx]) - ya),commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pia = 1.5707963267948966 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:35:15.670 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:15.670 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:15.671 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double zb = -((za - org.apache.commons.math.util.FastMath.EIGHTHS[idx]) - ya),commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double invy = 1.0 / y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:35:17.861 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:17.861 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:17.862 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double zb = -((za - org.apache.commons.math.util.FastMath.EIGHTHS[idx]) - ya),commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:35:19.956 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:19.956 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:19.958 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double zb = -((za - org.apache.commons.math.util.FastMath.EIGHTHS[idx]) - ya),commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean subnormal = false,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Typo in constant name

08:35:22.333 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:22.333 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:22.334 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = org.apache.commons.math.util.FastMath.EIGHTHS[idx] + ya,commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:35:24.455 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:24.455 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:24.456 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double resultb,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:35:26.714 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:26.714 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:26.715 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double rb = r - ra,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double resultb,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:35:28.618 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:28.619 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:28.620 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double invy = 1.0 / y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double resultb,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:35:30.826 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:30.826 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:30.827 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double invx = 1.0 / x,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double resultb,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:35:32.968 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:32.968 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:32.969 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = x * y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double resultb,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:35:34.919 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:34.920 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:34.920 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double pib = 6.123233995736766E-17 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double resultb,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:35:36.837 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:36.838 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:36.839 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double pia = 1.5707963267948966 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double resultb,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:35:39.258 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:39.259 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:39.260 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double resultb,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:35:41.218 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:41.218 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:41.219 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsA2 = epsA * epsA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:35:43.575 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:43.575 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:43.576 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double zab = za - zaa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:35:45.665 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:45.665 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:45.667 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double zaa = (za + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:35:47.761 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:47.762 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:47.763 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double yab = ya - yaa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:35:50.242 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:50.243 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:50.244 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double yaa = (ya + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:35:52.216 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:52.216 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:52.217 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = -((za - 1.0) - temp2),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:35:54.838 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:54.838 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:54.839 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = 1.0 + temp2,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:35:56.839 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:56.839 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:56.840 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp2 = xa * org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:35:59.119 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:59.119 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:59.120 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double denom = 1.0 / (1.0 + ((xa + xb) * (org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx] + org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx]))),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:36:01.316 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:01.316 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:01.317 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = (xa + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:36:03.409 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:03.410 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:03.411 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = 1.0 / xa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:36:05.799 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:05.799 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:05.800 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int k = ((int) (xa * 0.6366197723675814)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:36:07.923 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:07.923 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:07.924 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:36:10.224 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:10.225 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:10.226 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double sumB = -((sumA - tmpA) - tmpB),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:36:12.154 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:12.155 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:12.161 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double sumA = tmpA + tmpB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:36:14.582 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:14.582 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:14.583 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp2 = (za + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = ((ya * yb) * 2.0) + (yb * yb),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:36:16.547 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:16.547 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:16.548 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double na = xs - za,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp2 = (za + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:36:18.598 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:18.598 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:18.599 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double nb = -((na - xs) + za),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double na = xs - za,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:36:20.950 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:20.950 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:20.951 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double facta = 0.01745329052209854,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double nb = -((na - xs) + za),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:36:22.985 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:22.985 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:22.986 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double facta = 0.01745329052209854,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double na = xs - za,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:36:25.321 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:25.321 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:25.322 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double facta = 0.01745329052209854,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp2 = (za + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:36:27.375 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:27.376 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:27.377 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double facta = 0.01745329052209854,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = ((ya * yb) * 2.0) + (yb * yb),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:36:29.674 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:29.674 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:29.675 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double factb = 1.997844754509471E-9,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp2 = (za + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:36:31.748 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:31.748 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:31.749 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double factb = 1.997844754509471E-9,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = ((ya * yb) * 2.0) + (yb * yb),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:36:33.743 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:33.743 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:33.744 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double factb = 1.997844754509471E-9,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double facta = 0.01745329052209854,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplify code by using doubleHighPart
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:36:36.015 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:36.015 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:36.016 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: Simplify code by using doubleHighPart
}, sim: 0.114586
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp2 = (za + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplify code by using doubleHighPart
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:36:38.076 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:38.076 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:38.077 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: Simplify code by using doubleHighPart
}, sim: 0.114586
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double factb = 1.997844754509471E-9,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplify code by using doubleHighPart
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:36:40.486 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:40.487 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:40.488 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: Simplify code by using doubleHighPart
}, sim: 0.114586
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double facta = 0.01745329052209854,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:36:42.561 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:42.561 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:42.564 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xb = x - xa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = ((ya * yb) * 2.0) + (yb * yb),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:36:44.793 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:44.793 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:44.794 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xb = x - xa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double facta = 0.01745329052209854,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:36:47.028 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:47.028 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:47.029 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xb = x - xa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double factb = 1.997844754509471E-9,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Ensure correct sign when toRadians() returns zero [Not needed for toDegrees() as the calculation does not underflow]
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:36:49.015 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:49.016 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:49.016 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta),commit: Ensure correct sign when toRadians() returns zero [Not needed for toDegrees() as the calculation does not underflow]
}, sim: 0.194951
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = ((ya * yb) * 2.0) + (yb * yb),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Ensure correct sign when toRadians() returns zero [Not needed for toDegrees() as the calculation does not underflow]
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:36:51.492 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:51.492 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:51.493 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta),commit: Ensure correct sign when toRadians() returns zero [Not needed for toDegrees() as the calculation does not underflow]
}, sim: 0.194951
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double factb = 1.997844754509471E-9,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Ensure correct sign when toRadians() returns zero [Not needed for toDegrees() as the calculation does not underflow]
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:36:53.437 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:53.437 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:53.438 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta),commit: Ensure correct sign when toRadians() returns zero [Not needed for toDegrees() as the calculation does not underflow]
}, sim: 0.194951
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double facta = 0.01745329052209854,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Ensure correct sign when toRadians() returns zero [Not needed for toDegrees() as the calculation does not underflow]
, ingredientB: Simplify code by using doubleHighPart

08:36:55.874 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:55.875 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:55.876 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta),commit: Ensure correct sign when toRadians() returns zero [Not needed for toDegrees() as the calculation does not underflow]
}, sim: 0.194951
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: Simplify code by using doubleHighPart
}, sim: 0.114586
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:36:57.828 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:57.828 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:57.829 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double facta = 57.2957763671875,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xb = x - xa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:36:59.859 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:59.859 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:59.860 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double facta = 57.2957763671875,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double na = xs - za,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:37:02.184 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:02.184 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:02.185 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double facta = 57.2957763671875,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp2 = (za + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:37:04.195 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:04.195 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:04.196 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double facta = 57.2957763671875,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = ((ya * yb) * 2.0) + (yb * yb),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:37:06.518 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:06.518 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:06.519 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double factb = 3.145894820876798E-6,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double facta = 57.2957763671875,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:37:08.585 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:08.585 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:08.586 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double factb = 3.145894820876798E-6,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double na = xs - za,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:37:10.723 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:10.723 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:10.724 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double factb = 3.145894820876798E-6,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp2 = (za + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:37:12.955 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:12.955 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:12.956 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double factb = 3.145894820876798E-6,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = ((ya * yb) * 2.0) + (yb * yb),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:37:14.901 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:14.901 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:14.902 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long bits = java.lang.Double.doubleToLongBits(d),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double facta = 57.2957763671875,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:37:17.114 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:17.114 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:17.115 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long bits = java.lang.Double.doubleToLongBits(d),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp2 = (za + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:37:19.375 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:19.376 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:19.376 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long bits = java.lang.Double.doubleToLongBits(d),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = ((ya * yb) * 2.0) + (yb * yb),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:37:21.568 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:21.569 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:21.570 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long bits = java.lang.Double.doubleToLongBits(d),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double factb = 3.145894820876798E-6,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:37:23.778 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:23.778 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:23.780 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long sign = bits & 0x8000000000000000L,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double factb = 3.145894820876798E-6,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:37:25.890 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:25.890 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:25.891 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long sign = bits & 0x8000000000000000L,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp2 = (za + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:37:28.400 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:28.400 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:28.401 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long sign = bits & 0x8000000000000000L,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = ((ya * yb) * 2.0) + (yb * yb),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:37:30.350 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:30.351 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:30.352 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long sign = bits & 0x8000000000000000L,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final long bits = java.lang.Double.doubleToLongBits(d),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:37:32.668 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:32.668 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:32.669 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int exponent = ((int) (bits >>> 52)) & 0x7ff,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double factb = 3.145894820876798E-6,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:37:34.717 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:34.718 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:34.718 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int exponent = ((int) (bits >>> 52)) & 0x7ff,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp2 = (za + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:37:37.105 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:37.105 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:37.106 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int exponent = ((int) (bits >>> 52)) & 0x7ff,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final long sign = bits & 0x8000000000000000L,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:37:39.179 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:39.179 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:39.180 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int exponent = ((int) (bits >>> 52)) & 0x7ff,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = ((ya * yb) * 2.0) + (yb * yb),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:37:41.167 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:41.167 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:41.168 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long mantissa = bits & 0xfffffffffffffL,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final long bits = java.lang.Double.doubleToLongBits(d),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:37:43.691 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:43.691 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:43.692 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long mantissa = bits & 0xfffffffffffffL,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp2 = (za + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:37:45.632 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:45.632 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:45.633 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long mantissa = bits & 0xfffffffffffffL,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exponent = ((int) (bits >>> 52)) & 0x7ff,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:37:47.634 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:47.634 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:47.635 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long mantissa = bits & 0xfffffffffffffL,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = ((ya * yb) * 2.0) + (yb * yb),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:37:50.018 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:50.019 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:50.020 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int scaledExponent = exponent + n,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final long bits = java.lang.Double.doubleToLongBits(d),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:37:52.080 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:52.080 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:52.081 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int scaledExponent = exponent + n,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = ((ya * yb) * 2.0) + (yb * yb),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:37:54.451 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:54.451 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:54.452 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int scaledExponent = exponent + n,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exponent = ((int) (bits >>> 52)) & 0x7ff,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:37:56.462 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:56.462 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:56.463 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int scaledExponent = exponent + n,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long mantissa = bits & 0xfffffffffffffL,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:37:58.927 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:58.927 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:58.928 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final long sign = bits & 0x8000000000000000L,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:38:00.886 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:00.886 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:00.887 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = ((ya * yb) * 2.0) + (yb * yb),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:38:03.325 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:03.325 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:03.326 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long mantissa = bits & 0xfffffffffffffL,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:38:05.276 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:05.276 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:05.277 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int scaledExponent = exponent + n,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Ensure correct sign when toRadians() returns zero [Not needed for toDegrees() as the calculation does not underflow]
, ingredientB: Checkstyle errors.

08:38:07.756 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:07.756 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:07.757 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta),commit: Ensure correct sign when toRadians() returns zero [Not needed for toDegrees() as the calculation does not underflow]
}, sim: 0.194951
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double p2 = java.lang.Double.longBitsToDouble((inbits & 0x8000000000000000L) | 
(((long) ((exp3 + 1023) & 0x7ff)) << 52)),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Ensure correct sign when toRadians() returns zero [Not needed for toDegrees() as the calculation does not underflow]
, ingredientB: Checkstyle errors.

08:38:09.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:09.739 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:09.740 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta),commit: Ensure correct sign when toRadians() returns zero [Not needed for toDegrees() as the calculation does not underflow]
}, sim: 0.194951
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double xs = x / ((p2 * p2) * p2),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Ensure correct sign when toRadians() returns zero [Not needed for toDegrees() as the calculation does not underflow]
, ingredientB: fixed errors with infinities added asin/acos

08:38:12.035 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:12.035 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:12.036 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta),commit: Ensure correct sign when toRadians() returns zero [Not needed for toDegrees() as the calculation does not underflow]
}, sim: 0.194951
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = xa * xa,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Ensure correct sign when toRadians() returns zero [Not needed for toDegrees() as the calculation does not underflow]
, ingredientB: fixed errors with infinities added asin/acos

08:38:14.100 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:14.100 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:14.101 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta),commit: Ensure correct sign when toRadians() returns zero [Not needed for toDegrees() as the calculation does not underflow]
}, sim: 0.194951
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double xa = (x + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:38:16.340 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:16.340 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:16.341 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = est * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double nb = -((na - xs) + za),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:38:18.611 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:18.612 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:18.612 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double nb = -((na - xs) + za),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = x * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:38:20.951 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:20.951 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:20.952 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double nb = -((na - xs) + za),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = ya * ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:38:23.085 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:23.085 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:23.086 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double na = xs - za,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = ya * ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:38:25.381 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:25.381 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:25.382 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp2 = (za + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = ya * ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:38:27.470 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:27.471 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:27.472 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double zb = ((ya * yb) * 2.0) + (yb * yb),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = ya * ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:38:29.567 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:29.567 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:29.568 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = ya * ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:38:31.919 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:31.919 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:31.920 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = est - ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:38:33.913 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:33.913 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:33.914 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = (est + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:38:36.448 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:36.448 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:36.449 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double est = -0.010714690733195933,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:38:38.538 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:38.538 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:38.539 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double mant = java.lang.Double.longBitsToDouble((inbits & 0xfffffffffffffL) | 0x3ff0000000000000L),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:38:41.136 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:41.136 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:41.137 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exp3 = exponent / 3,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:38:43.151 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:43.151 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:43.152 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean subnormal = false,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: Typo in constant name

08:38:45.385 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:45.385 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:45.386 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = -((za - org.apache.commons.math.util.FastMath.EIGHTHS[idx]) - ya),commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: Typo in constant name

08:38:47.573 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:47.573 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:47.574 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = org.apache.commons.math.util.FastMath.EIGHTHS[idx] + ya,commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:38:49.624 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:49.624 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:49.625 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:38:52.070 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:52.070 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:52.071 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int scaledExponent = exponent + n,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:38:54.003 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:54.003 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:54.004 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long mantissa = bits & 0xfffffffffffffL,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:38:56.068 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:56.068 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:56.069 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final long sign = bits & 0x8000000000000000L,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:38:58.406 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:58.406 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:58.407 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xb = x - xa,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:39:00.509 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:00.509 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:00.510 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double facta = 0.01745329052209854,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Simplify code by using doubleHighPart

08:39:02.899 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:02.899 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:02.900 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = org.apache.commons.math.util.FastMath.atan(ra, rb, x < 0),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: Simplify code by using doubleHighPart
}, sim: 0.114586
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplify code by using doubleHighPart
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:39:04.909 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:04.909 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:04.910 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: Simplify code by using doubleHighPart
}, sim: 0.114586
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double rb = r - ra,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplify code by using doubleHighPart
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:39:07.375 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:07.376 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:07.377 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: Simplify code by using doubleHighPart
}, sim: 0.114586
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double invy = 1.0 / y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplify code by using doubleHighPart
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:39:09.307 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:09.307 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:09.308 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: Simplify code by using doubleHighPart
}, sim: 0.114586
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = x * y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplify code by using doubleHighPart
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:39:11.599 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:11.599 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:11.601 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: Simplify code by using doubleHighPart
}, sim: 0.114586
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsA2 = epsA * epsA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplify code by using doubleHighPart
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:39:13.755 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:13.755 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:13.756 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: Simplify code by using doubleHighPart
}, sim: 0.114586
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double denom = 1.0 / (1.0 + ((xa + xb) * (org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx] + org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx]))),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplify code by using doubleHighPart
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:39:16.031 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:16.031 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:16.032 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: Simplify code by using doubleHighPart
}, sim: 0.114586
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xb = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplify code by using doubleHighPart
, ingredientB: fixed errors with infinities added asin/acos

08:39:18.239 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:18.239 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:18.240 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: Simplify code by using doubleHighPart
}, sim: 0.114586
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double r = y / x,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplify code by using doubleHighPart
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:39:20.500 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:20.501 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:20.501 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: Simplify code by using doubleHighPart
}, sim: 0.114586
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplify code by using doubleHighPart
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:39:22.588 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:22.588 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:22.588 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: Simplify code by using doubleHighPart
}, sim: 0.114586
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplify code by using doubleHighPart
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:39:24.512 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:24.512 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:24.513 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: Simplify code by using doubleHighPart
}, sim: 0.114586
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ra = org.apache.commons.math.util.FastMath.doubleHighPart(r),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Simplify code by using doubleHighPart
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:39:26.931 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:26.932 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:26.932 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: Simplify code by using doubleHighPart
}, sim: 0.114586
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double r = y / x,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:39:29.002 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:29.003 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:29.004 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double p2 = java.lang.Double.longBitsToDouble((inbits & 0x8000000000000000L) | 
(((long) ((exp3 + 1023) & 0x7ff)) << 52)),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:39:31.449 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:31.449 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:31.450 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = est * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:39:33.530 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:33.531 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:33.531 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = x * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:39:35.612 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:35.612 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:35.613 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double na = xs - za,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:39:38.014 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:38.014 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:38.015 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double nb = -((na - xs) + za),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:39:40.023 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:40.023 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:40.024 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xs = x / ((p2 * p2) * p2),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Ensure correct sign when toRadians() returns zero [Not needed for toDegrees() as the calculation does not underflow]
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:39:42.391 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:42.391 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:42.392 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta),commit: Ensure correct sign when toRadians() returns zero [Not needed for toDegrees() as the calculation does not underflow]
}, sim: 0.194951
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:39:44.436 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:44.436 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:44.437 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xa = (x + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:39:46.820 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:46.820 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:46.821 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya = xa * xa,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:39:48.916 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:48.916 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:48.917 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb = ((xa * xb) * 2.0) + (xb * xb),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:39:51.186 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:51.186 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:51.187 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = 1.0 + ya,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:39:53.338 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:53.339 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:53.340 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double zb = -((za - 1.0) - ya),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:39:55.644 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:55.644 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:55.645 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double y,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: fixed errors with infinities added asin/acos

08:39:57.753 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:57.753 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:57.754 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double dx = zb / (2.0 * y),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: fixed errors with infinities added asin/acos

08:40:00.051 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:00.051 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:00.052 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double r = x / y,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: fixed errors with infinities added asin/acos

08:40:02.161 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:02.161 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:02.162 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double y = org.apache.commons.math.util.FastMath.sqrt(za),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:40:04.483 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:04.483 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:04.484 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ra = org.apache.commons.math.util.FastMath.doubleHighPart(r),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:40:06.407 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:06.408 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:06.408 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xb = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:40:08.687 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:08.688 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:08.688 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double sumA = tmpA + tmpB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:40:10.820 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:10.821 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:10.821 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double xb = x - xa,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:40:13.121 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:13.121 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:13.122 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:40:15.222 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:15.223 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:15.224 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sumA = tmpA + tmpB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] result = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:40:17.183 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:17.183 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:17.184 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sumA = tmpA + tmpB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double x = i / 8.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:40:19.490 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:19.490 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:19.491 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sumA = tmpA + tmpB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] ys = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:40:21.559 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:21.559 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:21.560 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sumA = tmpA + tmpB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double x2 = x * x,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:40:23.675 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:23.675 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:23.676 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sumA = tmpA + tmpB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double sinEpsA = epsilon,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:40:26.126 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:26.126 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:26.127 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sumA = tmpA + tmpB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double cosa = a + b,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:40:28.129 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:28.129 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:28.130 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sumA = tmpA + tmpB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long prod2A = ac + (ad >>> 32),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant

08:40:30.626 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:30.626 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:30.627 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sumA = tmpA + tmpB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmpB = ((((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / org.apache.commons.math.util.FastMath.TWO_POWER_52) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant

08:40:32.642 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:32.642 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:32.644 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sumA = tmpA + tmpB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmpA = (prod2A >>> 12) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Typo in constant name

08:40:34.674 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:34.675 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:34.676 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double sumA = tmpA + tmpB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:40:37.080 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:37.080 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:37.082 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double sumB = -((sumA - tmpA) - tmpB),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:40:39.009 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:39.009 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:39.010 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int quadrant = 0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:40:41.152 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:41.152 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:41.153 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xb = 0.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:40:43.462 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:43.462 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:43.463 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double remB,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:40:45.403 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:45.403 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:45.404 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsB = -((epsA - xa) + org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:40:47.495 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:47.495 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:47.496 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = x * y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:40:49.768 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:49.768 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:49.769 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:40:51.719 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:51.720 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:51.720 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = (est + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:40:54.155 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:54.155 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:54.157 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exp3 = exponent / 3,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: Typo in constant name

08:40:56.140 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:56.140 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:56.141 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = -((za - org.apache.commons.math.util.FastMath.EIGHTHS[idx]) - ya),commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: Typo in constant name

08:40:58.349 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:58.349 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:58.350 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = org.apache.commons.math.util.FastMath.EIGHTHS[idx] + ya,commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant

08:41:00.472 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:00.472 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:00.473 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = org.apache.commons.math.util.FastMath.EIGHTHS[idx] + ya,commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmpA = (prod2A >>> 12) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: Typo in constant name

08:41:02.774 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:02.775 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:02.775 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmpA = (prod2A >>> 12) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = -((za - org.apache.commons.math.util.FastMath.EIGHTHS[idx]) - ya),commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:41:05.054 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:05.054 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:05.055 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmpA = (prod2A >>> 12) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean subnormal = false,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:41:07.415 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:07.415 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:07.416 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmpA = (prod2A >>> 12) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double mant = java.lang.Double.longBitsToDouble((inbits & 0xfffffffffffffL) | 0x3ff0000000000000L),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:41:09.533 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:09.533 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:09.534 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmpA = (prod2A >>> 12) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = ya * ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:41:11.852 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:11.852 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:11.853 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmpA = (prod2A >>> 12) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double na = xs - za,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:41:14.005 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:14.005 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:14.006 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmpA = (prod2A >>> 12) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double nb = -((na - xs) + za),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:41:16.318 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:16.318 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:16.319 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int sign = bits & 0x80000000,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int bits = java.lang.Float.floatToIntBits(f),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:41:18.425 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:18.426 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:18.426 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int exponent = (bits >>> 23) & 0xff,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int sign = bits & 0x80000000,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:41:20.698 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:20.698 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:20.699 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int mantissa = bits & 0x7fffff,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exponent = (bits >>> 23) & 0xff,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:41:22.901 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:22.901 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:22.901 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int mantissa = bits & 0x7fffff,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:41:24.831 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:24.832 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:24.832 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:41:26.879 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:26.879 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:26.880 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exponent = (bits >>> 23) & 0xff,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:41:29.249 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:29.249 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:29.250 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int sign = bits & 0x80000000,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:41:31.199 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:31.199 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:31.200 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int bits = java.lang.Float.floatToIntBits(f),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:41:33.409 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:33.410 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:33.410 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double y = org.apache.commons.math.util.FastMath.floor(x),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exponent = (bits >>> 23) & 0xff,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:41:35.687 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:35.687 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:35.688 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double y = org.apache.commons.math.util.FastMath.floor(x),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int bits = java.lang.Float.floatToIntBits(f),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:41:38.020 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:38.020 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:38.020 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double y = org.apache.commons.math.util.FastMath.floor(x),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:41:40.139 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:40.139 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:40.140 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double d = x - y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int sign = bits & 0x80000000,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:41:42.523 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:42.523 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:42.524 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double d = x - y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double y = org.apache.commons.math.util.FastMath.floor(x),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:41:44.588 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:44.588 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:44.589 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double d = x - y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int bits = java.lang.Float.floatToIntBits(f),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:41:46.831 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:46.831 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:46.832 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long z = ((long) (y)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int sign = bits & 0x80000000,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:41:49.044 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:49.044 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:49.045 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long z = ((long) (y)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double d = x - y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:41:51.343 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:51.343 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:51.344 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long z = ((long) (y)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int bits = java.lang.Float.floatToIntBits(f),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:41:53.485 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:53.485 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:53.486 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int bits = java.lang.Float.floatToRawIntBits(a),commit: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
}, sim: -0.041251
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int bits = java.lang.Float.floatToIntBits(f),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:41:55.772 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:55.772 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:55.773 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int bits = java.lang.Float.floatToRawIntBits(a),commit: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
}, sim: -0.041251
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int mantissa = bits & 0x7fffff,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:41:57.930 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:57.930 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:57.931 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int bits = java.lang.Float.floatToRawIntBits(a),commit: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
}, sim: -0.041251
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:42:00.237 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:00.238 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:00.238 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long bits = java.lang.Double.doubleToRawLongBits(a),commit: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
}, sim: -0.041251
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int sign = bits & 0x80000000,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:42:02.406 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:02.406 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:02.407 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long bits = java.lang.Double.doubleToRawLongBits(a),commit: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
}, sim: -0.041251
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
, ingredientB: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.

08:42:04.797 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:04.797 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:04.798 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long bits = java.lang.Double.doubleToRawLongBits(a),commit: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
}, sim: -0.041251
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int bits = java.lang.Float.floatToRawIntBits(a),commit: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
}, sim: -0.041251
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:42:06.924 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:06.924 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:06.925 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int expX = org.apache.commons.math.util.FastMath.getExponent(x),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int sign = bits & 0x80000000,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:42:08.879 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:08.879 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:08.880 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int expX = org.apache.commons.math.util.FastMath.getExponent(x),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.

08:42:11.312 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:11.312 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:11.313 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int expX = org.apache.commons.math.util.FastMath.getExponent(x),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long bits = java.lang.Double.doubleToRawLongBits(a),commit: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
}, sim: -0.041251
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:42:13.244 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:13.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:13.245 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int expY = org.apache.commons.math.util.FastMath.getExponent(y),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exponent = (bits >>> 23) & 0xff,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.

08:42:15.218 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:15.218 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:15.219 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int expY = org.apache.commons.math.util.FastMath.getExponent(y),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int bits = java.lang.Float.floatToRawIntBits(a),commit: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
}, sim: -0.041251
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: added FastMath.hypot JIRA: MATH-478

08:42:17.653 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:17.654 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:17.654 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int expY = org.apache.commons.math.util.FastMath.getExponent(y),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int expX = org.apache.commons.math.util.FastMath.getExponent(x),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:42:19.758 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:19.758 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:19.759 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int middleExp = (expX + expY) / 2,commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exponent = (bits >>> 23) & 0xff,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.

08:42:22.360 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:22.360 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:22.361 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int middleExp = (expX + expY) / 2,commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long bits = java.lang.Double.doubleToRawLongBits(a),commit: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
}, sim: -0.041251
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: added FastMath.hypot JIRA: MATH-478

08:42:24.317 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:24.317 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:24.318 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int middleExp = (expX + expY) / 2,commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int expY = org.apache.commons.math.util.FastMath.getExponent(y),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:42:26.667 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:26.668 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:26.669 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double scaledX = org.apache.commons.math.util.FastMath.scalb(x, -middleExp),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int mantissa = bits & 0x7fffff,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: added FastMath.hypot JIRA: MATH-478

08:42:28.832 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:28.832 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:28.836 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double scaledX = org.apache.commons.math.util.FastMath.scalb(x, -middleExp),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int expX = org.apache.commons.math.util.FastMath.getExponent(x),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: added FastMath.hypot JIRA: MATH-478

08:42:31.007 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:31.007 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:31.008 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double scaledX = org.apache.commons.math.util.FastMath.scalb(x, -middleExp),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int middleExp = (expX + expY) / 2,commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:42:33.370 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:33.370 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:33.370 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double scaledY = org.apache.commons.math.util.FastMath.scalb(y, -middleExp),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int mantissa = bits & 0x7fffff,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: added FastMath.hypot JIRA: MATH-478

08:42:35.494 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:35.494 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:35.495 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double scaledY = org.apache.commons.math.util.FastMath.scalb(y, -middleExp),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int expX = org.apache.commons.math.util.FastMath.getExponent(x),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: added FastMath.hypot JIRA: MATH-478

08:42:37.768 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:37.768 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:37.769 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double scaledY = org.apache.commons.math.util.FastMath.scalb(y, -middleExp),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int middleExp = (expX + expY) / 2,commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: added FastMath.hypot JIRA: MATH-478

08:42:39.906 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:39.907 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:39.908 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double scaledY = org.apache.commons.math.util.FastMath.scalb(y, -middleExp),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double scaledX = org.apache.commons.math.util.FastMath.scalb(x, -middleExp),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:42:42.216 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:42.216 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:42.217 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double scaledH = org.apache.commons.math.util.FastMath.sqrt((scaledX * scaledX) + (scaledY * scaledY)),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: added FastMath.hypot JIRA: MATH-478

08:42:44.263 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:44.263 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:44.264 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double scaledH = org.apache.commons.math.util.FastMath.sqrt((scaledX * scaledX) + (scaledY * scaledY)),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int expY = org.apache.commons.math.util.FastMath.getExponent(y),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: added FastMath.hypot JIRA: MATH-478

08:42:46.599 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:46.599 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:46.600 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double scaledH = org.apache.commons.math.util.FastMath.sqrt((scaledX * scaledX) + (scaledY * scaledY)),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double scaledX = org.apache.commons.math.util.FastMath.scalb(x, -middleExp),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: added FastMath.hypot JIRA: MATH-478

08:42:48.545 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:48.546 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:48.547 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double scaledH = org.apache.commons.math.util.FastMath.sqrt((scaledX * scaledX) + (scaledY * scaledY)),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double scaledY = org.apache.commons.math.util.FastMath.scalb(y, -middleExp),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: MATH-496 Create FastMath copySign methods

08:42:50.806 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:50.806 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:50.807 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long s = java.lang.Double.doubleToLongBits(sign),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: MATH-496 Create FastMath copySign methods

08:42:53.026 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:53.026 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:53.027 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int m = java.lang.Float.floatToIntBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long s = java.lang.Double.doubleToLongBits(sign),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: MATH-496 Create FastMath copySign methods

08:42:55.055 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:55.055 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:55.056 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int s = java.lang.Float.floatToIntBits(sign),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int m = java.lang.Float.floatToIntBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: tighten checkstyle rules: declaring multiple variables in one statement is now forbidden
, ingredientB: tighten checkstyle rules: declaring multiple variables in one statement is now forbidden

08:42:57.505 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:57.505 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:57.506 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final long d = org.apache.commons.math.util.MathUtils.gcd(i, j),commit: tighten checkstyle rules: declaring multiple variables in one statement is now forbidden
}, sim: 0.232589
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int i = (n - k) + 1,commit: tighten checkstyle rules: declaring multiple variables in one statement is now forbidden
}, sim: 0.232589
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-471 MathUtils.equals(double, double) does not work properly for floats - add equivalent (float, float) methods and basic tests
, ingredientB: MATH-471 MathUtils.equals(double, double) does not work properly for floats - add equivalent (float, float) methods and basic tests

08:42:59.571 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:59.572 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:59.573 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int yInt = java.lang.Float.floatToIntBits(y),commit: MATH-471 MathUtils.equals(double, double) does not work properly for floats - add equivalent (float, float) methods and basic tests
}, sim: 0.066517
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int xInt = java.lang.Float.floatToIntBits(x),commit: MATH-471 MathUtils.equals(double, double) does not work properly for floats - add equivalent (float, float) methods and basic tests
}, sim: 0.066517
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-471 MathUtils.equals(double, double) does not work properly for floats - add equivalent (float, float) methods and basic tests
, ingredientB: MATH-471 MathUtils.equals(double, double) does not work properly for floats - add equivalent (float, float) methods and basic tests

08:43:02.066 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:02.066 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:02.067 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final boolean isEqual = org.apache.commons.math.util.FastMath.abs(xInt - yInt) <= maxUlps,commit: MATH-471 MathUtils.equals(double, double) does not work properly for floats - add equivalent (float, float) methods and basic tests
}, sim: 0.066517
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int yInt = java.lang.Float.floatToIntBits(y),commit: MATH-471 MathUtils.equals(double, double) does not work properly for floats - add equivalent (float, float) methods and basic tests
}, sim: 0.066517
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added gcd(long, long), lcm(long, long) methods. JIRA: MATH-239.
, ingredientB: Added gcd(long, long), lcm(long, long) methods. JIRA: MATH-239.

08:43:04.083 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:04.084 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:04.085 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long v = q,commit: Added gcd(long, long), lcm(long, long) methods. JIRA: MATH-239.
}, sim: -0.204699
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long u = p,commit: Added gcd(long, long), lcm(long, long) methods. JIRA: MATH-239.
}, sim: -0.204699
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added gcd(long, long), lcm(long, long) methods. JIRA: MATH-239.
, ingredientB: Added gcd(long, long), lcm(long, long) methods. JIRA: MATH-239.

08:43:06.489 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:06.489 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:06.490 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long t = ((u & 1) == 1) ? v : -(u / 2),commit: Added gcd(long, long), lcm(long, long) methods. JIRA: MATH-239.
}, sim: -0.204699
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long v = q,commit: Added gcd(long, long), lcm(long, long) methods. JIRA: MATH-239.
}, sim: -0.204699
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Added gcd(long, long), lcm(long, long) methods. JIRA: MATH-239.

08:43:08.546 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:08.546 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:08.547 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long t = ((u & 1) == 1) ? v : -(u / 2),commit: Added gcd(long, long), lcm(long, long) methods. JIRA: MATH-239.
}, sim: -0.204699
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:43:10.946 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:10.947 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:10.947 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:43:12.956 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:12.956 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:12.957 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double y = org.apache.commons.math.util.FastMath.floor(x),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:43:14.937 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:14.937 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:14.938 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long z = ((long) (y)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:43:17.534 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:17.534 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:17.534 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int mantissa = bits & 0x7fffff,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: added FastMath.hypot JIRA: MATH-478

08:43:19.508 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:19.509 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:19.509 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double scaledY = org.apache.commons.math.util.FastMath.scalb(y, -middleExp),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: added FastMath.hypot JIRA: MATH-478

08:43:21.983 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:21.983 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:21.984 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int expX = org.apache.commons.math.util.FastMath.getExponent(x),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.

08:43:23.969 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:23.969 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:23.970 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int bits = java.lang.Float.floatToRawIntBits(a),commit: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
}, sim: -0.041251
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.

08:43:26.069 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:26.069 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:26.070 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long bits = java.lang.Double.doubleToRawLongBits(a),commit: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
}, sim: -0.041251
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: Added gcd(long, long), lcm(long, long) methods. JIRA: MATH-239.

08:43:28.404 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:28.404 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:28.405 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double scaledH = org.apache.commons.math.util.FastMath.sqrt((scaledX * scaledX) + (scaledY * scaledY)),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long t = ((u & 1) == 1) ? v : -(u / 2),commit: Added gcd(long, long), lcm(long, long) methods. JIRA: MATH-239.
}, sim: -0.204699
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: added FastMath.hypot JIRA: MATH-478

08:43:30.459 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:30.459 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:30.460 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long s = java.lang.Double.doubleToLongBits(sign),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int expX = org.apache.commons.math.util.FastMath.getExponent(x),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: added FastMath.hypot JIRA: MATH-478

08:43:32.806 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:32.806 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:32.807 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int m = java.lang.Float.floatToIntBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int expX = org.apache.commons.math.util.FastMath.getExponent(x),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: added FastMath.hypot JIRA: MATH-478

08:43:34.748 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:34.748 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:34.749 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int s = java.lang.Float.floatToIntBits(sign),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int expX = org.apache.commons.math.util.FastMath.getExponent(x),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Checkstyle errors.

08:43:37.273 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:37.274 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:37.275 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double p2 = java.lang.Double.longBitsToDouble((inbits & 0x8000000000000000L) | 
(((long) ((exp3 + 1023) & 0x7ff)) << 52)),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Checkstyle errors.

08:43:39.252 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:39.253 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:39.253 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double xs = x / ((p2 * p2) * p2),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: fixed errors with infinities added asin/acos

08:43:41.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:41.739 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:41.740 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double xa = (x + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: fixed errors with infinities added asin/acos

08:43:43.689 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:43.689 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:43.690 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = -((za - 1.0) - ya),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:43:46.123 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:46.123 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:46.124 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double r = y / x,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:43:48.211 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:48.211 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:48.212 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int idx = ((int) ((xa * 8.0) + 0.5)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:43:50.528 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:50.528 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:50.529 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exponent = ((int) ((inbits >> 52) & 0x7ff)) - 1023,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:43:52.731 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:52.731 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:52.732 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final long bits = java.lang.Double.doubleToLongBits(d),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:43:55.101 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:55.101 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:55.102 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double b = remA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:43:57.287 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:57.287 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:57.288 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double zaa = (za + temp) - temp,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:43:59.610 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:59.610 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:59.611 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double invy = 1.0 / y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:44:01.734 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:01.734 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:01.735 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double factb = 1.997844754509471E-9,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:44:03.696 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:03.696 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:03.697 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double facta = 57.2957763671875,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:44:05.747 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:05.747 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:05.748 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double factb = 3.145894820876798E-6,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added FastMath.hypot JIRA: MATH-478

08:44:08.170 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:08.170 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:08.171 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = est * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double scaledH = org.apache.commons.math.util.FastMath.sqrt((scaledX * scaledX) + (scaledY * scaledY)),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: Added gcd(long, long), lcm(long, long) methods. JIRA: MATH-239.

08:44:10.165 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:10.165 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:10.166 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = est * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long t = ((u & 1) == 1) ? v : -(u / 2),commit: Added gcd(long, long), lcm(long, long) methods. JIRA: MATH-239.
}, sim: -0.204699
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:44:12.652 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:12.652 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:12.653 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double y = org.apache.commons.math.util.FastMath.floor(x),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final long bits = java.lang.Double.doubleToLongBits(d),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:44:14.675 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:14.675 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:14.676 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double d = x - y,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final long bits = java.lang.Double.doubleToLongBits(d),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:44:17.135 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:17.135 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:17.136 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long z = ((long) (y)),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final long bits = java.lang.Double.doubleToLongBits(d),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:44:19.106 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:19.106 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:19.107 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int bits = java.lang.Float.floatToIntBits(f),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final long bits = java.lang.Double.doubleToLongBits(d),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:44:21.595 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:21.595 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:21.596 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int bits = java.lang.Float.floatToIntBits(f),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final long sign = bits & 0x8000000000000000L,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:44:23.553 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:23.553 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:23.554 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int bits = java.lang.Float.floatToIntBits(f),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exponent = ((int) (bits >>> 52)) & 0x7ff,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:44:25.771 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:25.771 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:25.772 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int bits = java.lang.Float.floatToIntBits(f),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long mantissa = bits & 0xfffffffffffffL,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:44:28.017 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:28.017 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:28.018 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int bits = java.lang.Float.floatToIntBits(f),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int scaledExponent = exponent + n,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:44:30.113 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:30.113 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:30.114 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int bits = java.lang.Float.floatToIntBits(f),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
, ingredientB: Typo in constant name

08:44:32.475 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:32.475 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:32.475 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int bits = java.lang.Float.floatToIntBits(f),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:44:34.427 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:34.427 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:34.428 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int sign = bits & 0x80000000,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:44:36.387 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:36.388 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:36.389 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exponent = (bits >>> 23) & 0xff,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:44:38.555 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:38.555 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:38.556 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: MATH-496 Create FastMath copySign methods

08:44:40.735 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:40.735 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:40.736 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long s = java.lang.Double.doubleToLongBits(sign),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.

08:44:43.047 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:43.048 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:43.049 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long bits = java.lang.Double.doubleToRawLongBits(a),commit: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
}, sim: -0.041251
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.

08:44:45.275 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:45.275 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:45.276 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int bits = java.lang.Float.floatToRawIntBits(a),commit: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
}, sim: -0.041251
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
, ingredientB: Typo in constant name

08:44:47.214 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:47.214 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:47.215 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int bits = java.lang.Float.floatToRawIntBits(a),commit: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
}, sim: -0.041251
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = org.apache.commons.math.util.FastMath.EIGHTHS[idx] + ya,commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
, ingredientB: Typo in constant name

08:44:49.557 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:49.558 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:49.558 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int bits = java.lang.Float.floatToRawIntBits(a),commit: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
}, sim: -0.041251
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = -((za - org.apache.commons.math.util.FastMath.EIGHTHS[idx]) - ya),commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:44:51.691 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:51.691 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:51.692 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: int bits = java.lang.Float.floatToRawIntBits(a),commit: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
}, sim: -0.041251
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean subnormal = false,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:44:54.038 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:54.038 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:54.039 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long bits = java.lang.Double.doubleToRawLongBits(a),commit: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
}, sim: -0.041251
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean subnormal = false,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:44:56.237 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:56.237 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:56.238 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean subnormal = false,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:44:58.196 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:58.196 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:58.197 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exp3 = exponent / 3,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:45:00.583 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:00.583 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:00.584 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double mant = java.lang.Double.longBitsToDouble((inbits & 0xfffffffffffffL) | 0x3ff0000000000000L),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:45:02.611 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:02.611 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:02.612 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double est = -0.010714690733195933,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:45:04.973 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:04.973 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:04.974 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = (est + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:45:06.997 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:06.997 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:06.998 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = est - ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:45:08.967 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:08.967 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:08.968 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = ya * ya,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:45:11.487 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:11.487 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:11.488 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = ((ya * yb) * 2.0) + (yb * yb),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:45:13.472 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:13.472 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:13.473 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double na = xs - za,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:45:15.494 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:15.494 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:15.495 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant

08:45:17.867 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:17.867 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:17.867 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmpA = (prod2A >>> 12) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:45:19.859 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:19.859 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:19.860 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double nb = -((na - xs) + za),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: MATH-496 Create FastMath copySign methods

08:45:22.351 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:22.351 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:22.352 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmpA = (prod2A >>> 12) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long s = java.lang.Double.doubleToLongBits(sign),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: MATH-496 Create FastMath copySign methods

08:45:24.301 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:24.301 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:24.302 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmpA = (prod2A >>> 12) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int m = java.lang.Float.floatToIntBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: added FastMath.hypot JIRA: MATH-478

08:45:26.822 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:26.822 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:26.823 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmpA = (prod2A >>> 12) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int expX = org.apache.commons.math.util.FastMath.getExponent(x),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: MATH-496 Create FastMath copySign methods

08:45:28.770 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:28.770 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:28.771 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmpA = (prod2A >>> 12) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int s = java.lang.Float.floatToIntBits(sign),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant

08:45:31.030 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:31.030 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:31.031 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int expX = org.apache.commons.math.util.FastMath.getExponent(x),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmpB = ((((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / org.apache.commons.math.util.FastMath.TWO_POWER_52) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:45:33.105 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:33.105 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:33.106 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int expX = org.apache.commons.math.util.FastMath.getExponent(x),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:45:35.060 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:35.060 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:35.061 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int expX = org.apache.commons.math.util.FastMath.getExponent(x),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath.hypot JIRA: MATH-478
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:45:37.260 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:37.261 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:37.262 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final int expX = org.apache.commons.math.util.FastMath.getExponent(x),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = x * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:45:39.471 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:39.471 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:39.472 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double p2 = java.lang.Double.longBitsToDouble((inbits & 0x8000000000000000L) | 
(((long) ((exp3 + 1023) & 0x7ff)) << 52)),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = 0.04168701738764507,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:45:41.821 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:41.821 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:41.822 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double p2 = java.lang.Double.longBitsToDouble((inbits & 0x8000000000000000L) | 
(((long) ((exp3 + 1023) & 0x7ff)) << 52)),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] tmp = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: fixed errors with infinities added asin/acos

08:45:44.052 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:44.052 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:44.053 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double p2 = java.lang.Double.longBitsToDouble((inbits & 0x8000000000000000L) | 
(((long) ((exp3 + 1023) & 0x7ff)) << 52)),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = y * 9.313225746154785E-10,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: Checkstyle errors.

08:45:46.272 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:46.272 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:46.273 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double p2 = java.lang.Double.longBitsToDouble((inbits & 0x8000000000000000L) | 
(((long) ((exp3 + 1023) & 0x7ff)) << 52)),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double rb = ratio - ra,commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: fixed errors with infinities added asin/acos

08:45:48.437 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:48.438 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:48.438 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double p2 = java.lang.Double.longBitsToDouble((inbits & 0x8000000000000000L) | 
(((long) ((exp3 + 1023) & 0x7ff)) << 52)),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: fixed errors with infinities added asin/acos

08:45:50.362 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:50.362 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:50.363 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double p2 = java.lang.Double.longBitsToDouble((inbits & 0x8000000000000000L) | 
(((long) ((exp3 + 1023) & 0x7ff)) << 52)),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long yi = ((long) (y)),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: added FastMath.hypot JIRA: MATH-478

08:45:52.770 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:52.770 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:52.771 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp1 = lna * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double scaledH = org.apache.commons.math.util.FastMath.sqrt((scaledX * scaledX) + (scaledY * scaledY)),commit: added FastMath.hypot JIRA: MATH-478
}, sim: -0.302771
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:45:54.921 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:54.921 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:54.922 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp1 = lna * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = est * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: Added gcd(long, long), lcm(long, long) methods. JIRA: MATH-239.

08:45:57.196 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:57.196 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:57.197 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp1 = lna * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long v = q,commit: Added gcd(long, long), lcm(long, long) methods. JIRA: MATH-239.
}, sim: -0.204699
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: Added gcd(long, long), lcm(long, long) methods. JIRA: MATH-239.

08:45:59.464 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:59.464 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:59.465 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmp1 = lna * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long t = ((u & 1) == 1) ? v : -(u / 2),commit: Added gcd(long, long), lcm(long, long) methods. JIRA: MATH-239.
}, sim: -0.204699
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Checkstyle errors.
, ingredientB: fixed errors with infinities added asin/acos

08:46:01.437 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:01.437 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:01.438 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xs = x / ((p2 * p2) * p2),commit: Checkstyle errors.
}, sim: 0.329288
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long yi = ((long) (y)),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Ensure correct sign when toRadians() returns zero [Not needed for toDegrees() as the calculation does not underflow]
, ingredientB: fixed errors with infinities added asin/acos

08:46:03.889 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:03.889 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:03.891 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double result = (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta),commit: Ensure correct sign when toRadians() returns zero [Not needed for toDegrees() as the calculation does not underflow]
}, sim: 0.194951
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long yi = ((long) (y)),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:46:05.872 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:05.873 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:05.873 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xa = (x + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long yi = ((long) (y)),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:46:08.406 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:08.406 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:08.407 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xa = (x + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:46:10.413 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:10.413 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:10.414 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xa = (x + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:46:12.741 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:12.741 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:12.742 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xa = (x + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = y * 9.313225746154785E-10,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:46:14.941 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:14.941 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:14.942 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xa = (x + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp2 = tmp1 * 9.313225746154785E-10,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: fixed errors with infinities added asin/acos

08:46:17.114 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:17.114 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:17.115 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xa = (x + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp2 = (lna + tmp1) - tmp1,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.

08:46:19.402 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:19.402 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:19.403 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xa = (x + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.

08:46:21.527 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:21.527 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:21.528 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ya = xa * xa,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.

08:46:23.824 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:23.824 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:23.825 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double yb = ((xa * xb) * 2.0) + (xb * xb),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.

08:46:26.047 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:26.047 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:26.048 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double za = 1.0 + ya,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.

08:46:28.332 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:28.332 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:28.333 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double zb = -((za - 1.0) - ya),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.

08:46:30.317 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:30.317 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:30.318 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double y,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.

08:46:32.516 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:32.516 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:32.517 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double dx = zb / (2.0 * y),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: fixed errors with infinities added asin/acos
, ingredientB: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.

08:46:34.740 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:34.740 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:34.741 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double r = x / y,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: fixed errors with infinities added asin/acos

08:46:36.988 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:36.988 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:36.989 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ra = (r + temp) - temp,commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: fixed errors with infinities added asin/acos

08:46:39.191 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:39.192 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:39.193 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double y = org.apache.commons.math.util.FastMath.sqrt(za),commit: fixed errors with infinities added asin/acos
}, sim: 0.163030
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: Simplify code by using doubleHighPart

08:46:41.281 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:41.281 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:41.282 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: Simplify code by using doubleHighPart
}, sim: 0.114586
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:46:43.710 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:43.710 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:43.711 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double xb = x - xa,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:46:45.683 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:45.683 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:45.684 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ra = org.apache.commons.math.util.FastMath.doubleHighPart(r),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:46:48.050 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:48.051 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:48.051 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double xpa = 1.0 + x,commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double r = y / x,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.

08:46:50.236 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:50.236 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:50.237 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double r = y / x,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double xpb = -((xpa - 1.0) - x),commit: Improved efficiency in RandomDataImpl, LaguerreSolver, FastMath and OutlineExtractor by moving conditional code into blocks where it is needed.
}, sim: 0.097827
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method

08:46:52.742 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:52.743 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:52.744 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double r = y / x,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long xl = java.lang.Double.doubleToLongBits(d),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: fixed checkstyle and findbugs warnings

08:46:54.752 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:54.752 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:54.753 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double r = y / x,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double numer = bits & 0x3ffffffffffL,commit: fixed checkstyle and findbugs warnings
}, sim: 0.048151
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: fixed checkstyle and findbugs warnings

08:46:57.094 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:57.094 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:57.095 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double ra = org.apache.commons.math.util.FastMath.doubleHighPart(r),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double numer = bits & 0x3ffffffffffL,commit: fixed checkstyle and findbugs warnings
}, sim: 0.048151
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: fixed checkstyle and findbugs warnings

08:46:59.357 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:59.357 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:59.358 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xa = org.apache.commons.math.util.FastMath.doubleHighPart(x),commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double numer = bits & 0x3ffffffffffL,commit: fixed checkstyle and findbugs warnings
}, sim: 0.048151
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: fixed checkstyle and findbugs warnings

08:47:01.529 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:01.529 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:01.531 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double xb = x - xa,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double numer = bits & 0x3ffffffffffL,commit: fixed checkstyle and findbugs warnings
}, sim: 0.048151
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
, ingredientB: fixed checkstyle and findbugs warnings

08:47:03.815 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:03.815 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:03.816 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double temp = ra + rb,commit: MATH-494 FastMath atan2 does not agree with StrictMath for special cases Add doubleHighPart() method to better handle splitting high absolute values Add getSign() utility method
}, sim: 0.050219
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double numer = bits & 0x3ffffffffffL,commit: fixed checkstyle and findbugs warnings
}, sim: 0.048151
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: fixed checkstyle and findbugs warnings

08:47:05.737 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:05.738 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:05.739 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double numer = bits & 0x3ffffffffffL,commit: fixed checkstyle and findbugs warnings
}, sim: 0.048151
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:07.773 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:07.773 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:07.774 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int i,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:10.123 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:10.123 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:10.124 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] tmp = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:12.156 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:12.157 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:12.157 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] recip = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:14.121 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:14.121 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:14.122 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:16.036 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:16.037 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:16.038 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean negative = false,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:18.147 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:18.147 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:18.148 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double absAsinh,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:20.352 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:20.352 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:20.353 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double a2 = a * a,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:22.278 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:22.278 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:22.279 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double absAtanh,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:24.213 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:24.213 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:24.214 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double intPartA,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:26.146 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:26.146 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:26.147 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int intVal,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:28.078 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:28.079 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:28.080 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double fracPartA = org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[intFrac],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:30.031 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:30.031 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:30.032 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double ra = (-1.0) + hiPrec[0],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:32.286 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:32.286 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:32.287 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] ys = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:34.391 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:34.391 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:34.392 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double d = -((c - a) - lnm[0]),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:47:36.367 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:36.367 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:36.368 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = (denom + temp) - temp,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:38.286 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:38.286 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:38.287 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] x = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:47:40.279 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:40.279 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:40.280 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double recip = 1.0 / ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:47:42.196 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:42.196 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:42.197 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = hiPrec[0] + hiPrec[1],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:44.104 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:44.104 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:44.105 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] y = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:47:46.105 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:46.105 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:46.105 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] a = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:48.016 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:48.016 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:48.017 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double[] result = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:49.961 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:49.961 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:49.961 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double x = i / 8.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:52.107 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:52.108 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:52.108 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double[] ys = new double[2],commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:54.378 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:54.378 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:54.379 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double x2 = x * x,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:56.382 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:56.382 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:56.383 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double sinEpsA = epsilon,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:47:58.301 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:47:58.301 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:47:58.302 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double cosa = a + b,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:48:00.211 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:00.211 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:00.212 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long prod2A = ac + (ad >>> 32),commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:48:02.118 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:02.118 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:02.119 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exp3 = exponent / 3,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

08:48:04.014 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:04.014 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:04.015 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double pib = 6.123233995736766E-17 * 2.0,commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.002609
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:48:05.964 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:05.964 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:05.965 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final long sign = bits & 0x8000000000000000L,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:48:07.921 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:07.921 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:07.922 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int mantissa = bits & 0x7fffff,commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: Typo in constant name

08:48:09.824 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:09.824 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:09.825 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = -((za - org.apache.commons.math.util.FastMath.EIGHTHS[idx]) - ya),commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: Typo in constant name

08:48:11.734 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:11.734 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:11.735 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
, ingredientB: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498

08:48:13.695 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:13.695 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:13.697 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double[] hiPrec = new double[2],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent)),commit: added FastMath.scalb(double, int) and FastMath.scalb(float, int) deprecated MathUtils.scalb(double, int) JIRA: MATH-498
}, sim: -0.016439
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:48:15.615 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:15.616 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:15.616 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = hiPrec[0] + hiPrec[1],commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:48:17.547 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:17.547 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:17.548 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yb = -((ya - hiPrec[0]) - hiPrec[1]),commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:48:19.454 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:19.455 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:19.455 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double yab = ya - yaa,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:48:21.443 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:21.443 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:21.443 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double result = ya + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:48:23.445 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:23.445 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:23.446 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = na + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:48:25.497 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:25.497 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:25.497 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:48:27.521 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:27.522 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:27.523 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double na = ya,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375

08:48:29.537 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:29.537 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:29.538 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = da + yb,commit: applied Bill's patch adding sinh, cosh and tanh functions to FastMath JIRA: MATH-375
}, sim: -0.025485
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:48:31.468 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:31.468 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:31.469 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Typo in constant name
, ingredientB: Unnecessary casts

08:48:33.372 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:33.372 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:33.373 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double epsilon = xa - org.apache.commons.math.util.FastMath.EIGHTHS[idx],commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Unnecessary casts
, ingredientB: Typo in constant name

08:48:35.290 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:35.290 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:35.291 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double za = org.apache.commons.math.util.FastMath.EIGHTHS[idx] + ya,commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Unnecessary casts
, ingredientB: Typo in constant name

08:48:37.236 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:37.236 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:37.237 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double zb = -((za - org.apache.commons.math.util.FastMath.EIGHTHS[idx]) - ya),commit: Typo in constant name
}, sim: -0.026004
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Unnecessary casts
, ingredientB: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.

08:48:39.181 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:39.181 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:39.182 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long bits = java.lang.Double.doubleToRawLongBits(a),commit: MATH-493 FastMath min and max fail with (Infinity,-Infinity) and (0,0, -0.0) Fixing (0,0, -0.0) by using code from Harmony.
}, sim: -0.041251
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Unnecessary casts
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:48:41.147 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:41.147 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:41.148 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double est = -0.010714690733195933,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Unnecessary casts
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:48:43.197 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:43.198 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:43.198 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exp3 = exponent / 3,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Unnecessary casts
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:48:45.696 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:45.696 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:45.697 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: Unnecessary casts
}, sim: -0.124494
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: boolean subnormal = false,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added fast cubic root computation JIRA: MATH-375
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:48:47.770 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:47.770 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:47.771 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: boolean subnormal = false,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:48:50.272 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:50.273 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:50.273 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int exp3 = exponent / 3,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:48:52.281 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:52.281 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:52.282 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double mant = java.lang.Double.longBitsToDouble((inbits & 0xfffffffffffffL) | 0x3ff0000000000000L),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:48:54.839 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:54.839 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:54.840 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double ya = (est + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:48:56.867 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:56.868 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:56.868 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp2 = (za + temp) - temp,commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant

08:48:59.268 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:59.268 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:59.269 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmpB = ((((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / org.apache.commons.math.util.FastMath.TWO_POWER_52) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: MATH-496 Create FastMath copySign methods

08:49:01.290 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:01.290 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:01.291 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long s = java.lang.Double.doubleToLongBits(sign),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: added fast cubic root computation JIRA: MATH-375

08:49:03.457 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:03.457 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:03.458 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double nb = -((na - xs) + za),commit: added fast cubic root computation JIRA: MATH-375
}, sim: -0.150390
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-483 FastMath does not handle all special cases correctly
, ingredientB: MATH-496 Create FastMath copySign methods

08:49:05.748 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:05.748 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:05.749 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:49:07.964 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:07.964 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:07.965 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, hiPrec),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: MATH-483 FastMath does not handle all special cases correctly

08:49:10.251 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:10.252 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:10.252 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double lores = org.apache.commons.math.util.FastMath.log(x, lns),commit: MATH-483 FastMath does not handle all special cases correctly
}, sim: -0.154588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:49:12.342 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:12.342 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:12.343 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-496 Create FastMath copySign methods
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant

08:49:14.735 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:14.735 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:14.736 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double denom = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L),commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: MATH-496 Create FastMath copySign methods

08:49:16.728 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:16.728 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:16.729 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denom = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L),commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: long s = java.lang.Double.doubleToLongBits(sign),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: MATH-496 Create FastMath copySign methods

08:49:19.109 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:19.109 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:19.110 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denom = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L),commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int m = java.lang.Float.floatToIntBits(magnitude),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant

08:49:21.158 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:21.159 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:21.160 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denom = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L),commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmpA = (prod2A >>> 12) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: MATH-496 Create FastMath copySign methods

08:49:23.552 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:23.552 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:23.553 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double denom = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L),commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: int s = java.lang.Float.floatToIntBits(sign),commit: MATH-496 Create FastMath copySign methods
}, sim: -0.211206
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:49:25.555 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:25.556 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:25.556 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmpA = (prod2A >>> 12) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:49:27.983 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:27.983 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:27.984 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: double tmpB = ((((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / org.apache.commons.math.util.FastMath.TWO_POWER_52) / org.apache.commons.math.util.FastMath.TWO_POWER_52,commit: MATH-476 FastMath code contains 'magic' numbers Extracted 2^52 value as a constant
}, sim: -0.219559
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:49:30.002 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:30.002 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:30.003 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:49:32.022 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:32.023 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:32.023 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:49:34.548 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:34.548 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:34.549 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double a = d * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:49:36.528 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:36.528 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:36.529 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double z = c * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:49:38.760 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:38.760 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:38.761 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp = xa * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:49:41.088 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:41.088 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:41.089 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp = epsilon * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:49:43.322 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:43.322 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:43.323 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: final double tmp = hiPrec[0] * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:49:45.572 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:45.572 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:45.573 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = y * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
, ingredientB: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant

08:49:47.765 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:47.765 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:47.766 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingA: {code: final double temp = sinEpsA * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int index = hash & mask, commit: moved main java directory for compliance with maven standard directory layout
}, ingB: {code: double tmp1 = lna * org.apache.commons.math.util.FastMath.HEX_40000000,commit: MATH-476 FastMath code contains 'magic' numbers Extracted "splitter" value as a constant
}, sim: -0.296928
[ERROR] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:84) - Error at generation 2
java.lang.IllegalArgumentException: Comparison method violates its general contract!
java.lang.IllegalArgumentException: Comparison method violates its general contract!
	at java.util.TimSort.mergeLo(TimSort.java:777)
	at java.util.TimSort.mergeAt(TimSort.java:514)
	at java.util.TimSort.mergeCollapse(TimSort.java:441)
	at java.util.TimSort.sort(TimSort.java:245)
	at java.util.Arrays.sort(Arrays.java:1512)
	at java.util.ArrayList.sort(ArrayList.java:1454)
	at java.util.Collections.sort(Collections.java:175)
	at fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy.getFixIngredient(PurposeBasedSearchStrategy.java:72)
	at fr.inria.astor.core.ingredientbased.IngredientBasedEvolutionaryRepairApproachImpl.createOperatorInstanceForPoint(IngredientBasedEvolutionaryRepairApproachImpl.java:95)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.modifyProgramVariant(EvolutionarySearchEngine.java:264)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.createNewProgramVariant(EvolutionarySearchEngine.java:198)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.processGenerations(EvolutionarySearchEngine.java:146)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:68)
	at fr.inria.main.evolution.AstorMain.run(AstorMain.java:203)
	at fr.inria.main.evolution.AstorMain.execute(AstorMain.java:247)
	at fr.inria.main.evolution.AstorMain.main(AstorMain.java:218)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - Time Repair Loop (s): 2934.028
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:172) - generationsexecuted: 2
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:247) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:257) - End Repair Search: NOT Found solution
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:208) - Time Total(s): 3915.37


Node: 80588145eaf4



Date: Mon Nov 25 08:49:49 EST 2019

cd /script/jGenProg_Defects4J_Math_49;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-49 \
	-failing org.apache.commons.math.linear.SparseRealVectorTest \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:purpose \
	-dependencies /script/jGenProg_Defects4J_Math_49/target/classes/:/script/jGenProg_Defects4J_Math_49/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

