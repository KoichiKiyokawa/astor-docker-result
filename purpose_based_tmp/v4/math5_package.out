Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO] 00:36:44,051 fr.inria.astor.core.setup.ProjectConfiguration:282 - Version of the JVM used: 1.7.0_181
[INFO] 00:36:44,055 main:381 - Java version of the JDK used to run tests: 1.7.0_181
[INFO] 00:36:44,055 main:382 - The compliance of the JVM is:  7
[INFO] 00:36:44,057 main:660 - command line arguments: [-mode  jgenprog  -location  .  -id  Math-5  -failing  org.apache.commons.math3.complex.ComplexTest  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:purpose  -dependencies  /script/jGenProg_Defects4J_Math_5/target/classes/:/script/jGenProg_Defects4J_Math_5/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO] 00:36:44,060 fr.inria.main.evolution.AstorMain:224 - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:975) - Source folders: [/script/jGenProg_Defects4J_Math_5/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:994) - Source Test folders: [/script/jGenProg_Defects4J_Math_5/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:108) - mode is Purpose
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.resolveTestsToRun(AstorCoreEngine.java:1311) - Test retrieved from classes: 786
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Math_5/./output_astor/AstorMain-Math-5//bin//default from 786 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Math_5/./output_astor/AstorMain-Math-5//bin//default, /script/jGenProg_Defects4J_Math_5/target/classes/, /script/jGenProg_Defects4J_Math_5/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testTwoSets
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testIllConditioned
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[21]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[22]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[23]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[24]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[25]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[26]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[47]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[48]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[49]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[50]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[51]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath828Cycle
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testCross
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBuildBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testTetrahedron
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIsometry
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInterval
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testMultiple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testSinglePoint
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSpecialValues
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.events.EventStateTest#closeEvents
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.exception.util.LocalizedFormatsTest#testMessageNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testMath221
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testWave
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:4962, fails: 36, GZoltar suspicious 34575, with positive susp 2418
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 4962
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 1000 with susp > 0.1, we consider: 1000
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:898) - Setting up the max to 8483250 milliseconds (8483 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:240) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Math_5/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:68) - building model: /script/jGenProg_Defects4J_Math_5/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:82) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Math_5/target/classes/, /script/jGenProg_Defects4J_Math_5/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:779) - Number of CtTypes created: 714
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 1000
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=105, susp=0.25]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=108, susp=0.25]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=111, susp=0.25]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=112, susp=0.25]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=68, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=69, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=71, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=72, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=73, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=74, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=75, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=76, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=77, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=78, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=79, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=81, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=53, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=54, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=55, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=56, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=57, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=58, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=59, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=60, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=addPoint(DD)V, lineNumber=39, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=addPoint(DD)V, lineNumber=40, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=43, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=44, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=45, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=46, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=47, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getObjectiveFunction()Lorg/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunction;, lineNumber=51, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getObjectiveFunctionGradient()Lorg/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunctionGradient;, lineNumber=66, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=access$000(Lorg/apache/commons/math3/optim/nonlinear/scalar/gradient/CircleScalar;)Ljava/util/ArrayList;, lineNumber=31, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getPlus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=119, susp=0.1856953381770519]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getMinus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=126, susp=0.1856953381770519]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=62, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=63, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=65, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=66, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=68, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=71, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=72, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=90, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=95, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=99, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=100, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=134, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=plusFound()Z, lineNumber=140, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=minusFound()Z, lineNumber=147, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=116, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=117, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=118, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=120, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=121, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=113, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=114, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=125, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=126, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=130, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=access$000(Lorg/apache/commons/math3/optim/nonlinear/scalar/LineSearch;)Lorg/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer;, lineNumber=35, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 1000,  323
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 323
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 323, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 1.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Math_5/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 8483250
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math3.complex.ComplexTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= purpose
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Math_5/target/classes/:/script/jGenProg_Defects4J_Math_5/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:continuewhenmodelfail= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
01:24:24.158 [main] INFO  org.nd4j.linalg.factory.Nd4jBackend - Loaded [CpuBackend] backend
01:24:25.576 [main] INFO  org.nd4j.nativeblas.NativeOpsHolder - Number of threads used for NativeOps: 6
01:24:26.335 [main] INFO  org.nd4j.nativeblas.Nd4jBlas - Number of threads used for BLAS: 6
01:24:26.340 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Backend used: [CPU]; OS: [Linux]
01:24:26.340 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Cores: [48]; Memory: [3.5GB];
01:24:26.340 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Blas vendor: [MKL]
01:24:26.897 [main] INFO  o.d.m.e.loader.WordVectorSerializer - Projected memory use for model: [3.96 MB]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:24:29.633 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:29.633 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:29.642 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = vertices.length,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:24:32.261 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:32.262 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:32.263 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (n == 0) {

	return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:24:34.675 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:34.675 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:34.676 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[] vArray = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[n],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (n == 0) {

	return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:24:36.762 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:36.763 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:36.764 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: vArray[i] = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(vertices[i]),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[] vArray = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[n],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:24:39.029 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:39.030 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:39.031 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; ++i) {
	vArray[i] = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(vertices[i]);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: vArray[i] = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(vertices[i]),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:24:41.047 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:41.048 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:41.049 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> edges = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; ++i) {
	vArray[i] = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(vertices[i]);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:24:43.159 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:43.159 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:43.160 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex start = vArray[i],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> edges = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:24:45.287 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:45.288 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:45.289 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex end = vArray[(i + 1) % n],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex start = vArray[i],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:24:47.219 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:47.220 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:47.221 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex end = vArray[(i + 1) % n],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:24:49.359 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:49.359 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:49.361 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:24:51.421 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:51.421 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:51.422 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (line == null) {
	line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation());
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:24:53.384 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:53.384 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:53.385 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (line == null) {
	line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation());
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:24:55.309 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:55.309 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:55.310 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: vertex.bindWith(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:24:57.255 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:57.255 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:57.256 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (((vertex != start) && (vertex != end)) && 
(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
	vertex.bindWith(line);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: vertex.bindWith(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:24:59.231 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:59.231 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:59.232 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
	if (((vertex != start) && (vertex != end)) && 
	(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
		vertex.bindWith(line);
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (((vertex != start) && (vertex != end)) && 
(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
	vertex.bindWith(line);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:25:01.223 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:01.224 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:01.225 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; ++i) {


	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex start = vArray[i];
	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex end = vArray[(i + 1) % n];




	org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end);
	if (line == null) {
		line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation());
	}


	edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line));


	for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
		if (((vertex != start) && (vertex != end)) && 
		(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
			vertex.bindWith(line);
		}
	}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
	if (((vertex != start) && (vertex != end)) && 
	(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
		vertex.bindWith(line);
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:25:03.231 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:03.231 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:03.232 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; ++i) {


	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex start = vArray[i];
	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex end = vArray[(i + 1) % n];




	org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end);
	if (line == null) {
		line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation());
	}


	edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line));


	for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
		if (((vertex != start) && (vertex != end)) && 
		(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
			vertex.bindWith(line);
		}
	}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:25:05.311 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:05.312 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:05.313 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, tree, edges),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:25:07.239 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:07.240 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:07.241 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, tree, edges),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:25:09.149 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:09.149 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:09.150 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:25:11.076 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:11.076 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:11.078 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:25:12.990 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:12.990 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:12.991 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (line == null) {
	line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation());
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:25:14.922 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:14.922 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:14.923 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; ++i) {


	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex start = vArray[i];
	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex end = vArray[(i + 1) % n];




	org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end);
	if (line == null) {
		line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation());
	}


	edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line));


	for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
		if (((vertex != start) && (vertex != end)) && 
		(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
			vertex.bindWith(line);
		}
	}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:25:16.933 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:16.933 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:16.934 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:25:18.933 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:18.933 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:18.934 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, tree, edges),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:25:20.895 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:20.896 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:20.897 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = edges.get(index++),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:25:22.844 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:22.845 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:22.846 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = edges.get(index++),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:25:24.819 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:24.819 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:24.820 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = edges.get(index++),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:25:26.752 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:26.752 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:26.753 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = edges.get(index++),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:25:28.694 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:28.694 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:28.695 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted.setNode(node),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:25:30.617 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:30.617 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:30.618 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted.setNode(node),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, tree, edges),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:25:32.590 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:32.590 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:32.592 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted.setNode(node),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:25:34.482 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:34.482 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:34.483 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted.setNode(node),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: inserted = edges.get(index++),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:25:36.900 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:36.901 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:36.902 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: vertex.bindWith(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:25:39.347 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:39.348 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:39.349 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:25:41.391 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:41.391 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:41.393 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:25:43.636 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:43.637 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:43.638 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: inserted.setNode(node),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:25:45.759 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:45.759 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:45.760 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (node.insertCut(inserted.getLine())) {
	inserted.setNode(node);
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: vertex.bindWith(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:25:47.962 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:47.963 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:47.964 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (node.insertCut(inserted.getLine())) {
	inserted.setNode(node);
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:25:49.868 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:49.868 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:49.869 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (node.insertCut(inserted.getLine())) {
	inserted.setNode(node);
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:25:51.896 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:51.896 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:51.897 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (node.insertCut(inserted.getLine())) {
	inserted.setNode(node);
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:25:53.904 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:53.905 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:53.906 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (node.insertCut(inserted.getLine())) {
	inserted.setNode(node);
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:25:56.024 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:56.024 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:56.025 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted.getNode() == null) {
	if (node.insertCut(inserted.getLine())) {
		inserted.setNode(node);
	} else {
		inserted = null;
	}
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (((vertex != start) && (vertex != end)) && 
(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
	vertex.bindWith(line);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:25:57.931 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:57.931 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:57.932 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted.getNode() == null) {
	if (node.insertCut(inserted.getLine())) {
		inserted.setNode(node);
	} else {
		inserted = null;
	}
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: inserted = edges.get(index++),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:25:59.832 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:59.832 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:59.833 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted.getNode() == null) {
	if (node.insertCut(inserted.getLine())) {
		inserted.setNode(node);
	} else {
		inserted = null;
	}
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (node.insertCut(inserted.getLine())) {
	inserted.setNode(node);
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:26:01.778 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:01.778 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:01.779 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted.getNode() == null) {
	if (node.insertCut(inserted.getLine())) {
		inserted.setNode(node);
	} else {
		inserted = null;
	}
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:26:03.843 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:03.843 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:03.844 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted.getNode() == null) {
	if (node.insertCut(inserted.getLine())) {
		inserted.setNode(node);
	} else {
		inserted = null;
	}
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:26:05.911 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:05.911 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:05.912 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while ((inserted == null) && (index < edges.size())) {
	inserted = edges.get(index++);
	if (inserted.getNode() == null) {
		if (node.insertCut(inserted.getLine())) {
			inserted.setNode(node);
		} else {
			inserted = null;
		}
	} else {
		inserted = null;
	}
} ,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (((vertex != start) && (vertex != end)) && 
(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
	vertex.bindWith(line);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:26:07.862 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:07.862 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:07.863 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while ((inserted == null) && (index < edges.size())) {
	inserted = edges.get(index++);
	if (inserted.getNode() == null) {
		if (node.insertCut(inserted.getLine())) {
			inserted.setNode(node);
		} else {
			inserted = null;
		}
	} else {
		inserted = null;
	}
} ,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: inserted.setNode(node),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:26:09.776 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:09.777 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:09.778 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while ((inserted == null) && (index < edges.size())) {
	inserted = edges.get(index++);
	if (inserted.getNode() == null) {
		if (node.insertCut(inserted.getLine())) {
			inserted.setNode(node);
		} else {
			inserted = null;
		}
	} else {
		inserted = null;
	}
} ,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (inserted.getNode() == null) {
	if (node.insertCut(inserted.getLine())) {
		inserted.setNode(node);
	} else {
		inserted = null;
	}
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:26:11.729 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:11.729 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:11.730 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while ((inserted == null) && (index < edges.size())) {
	inserted = edges.get(index++);
	if (inserted.getNode() == null) {
		if (node.insertCut(inserted.getLine())) {
			inserted.setNode(node);
		} else {
			inserted = null;
		}
	} else {
		inserted = null;
	}
} ,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:26:13.802 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:13.802 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:13.803 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while ((inserted == null) && (index < edges.size())) {
	inserted = edges.get(index++);
	if (inserted.getNode() == null) {
		if (node.insertCut(inserted.getLine())) {
			inserted.setNode(node);
		} else {
			inserted = null;
		}
	} else {
		inserted = null;
	}
} ,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:26:15.807 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:15.808 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:15.809 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
	if (((vertex != start) && (vertex != end)) && 
	(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
		vertex.bindWith(line);
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:26:17.823 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:17.824 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:17.825 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:26:19.815 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:19.816 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:19.817 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while ((inserted == null) && (index < edges.size())) {
	inserted = edges.get(index++);
	if (inserted.getNode() == null) {
		if (node.insertCut(inserted.getLine())) {
			inserted.setNode(node);
		} else {
			inserted = null;
		}
	} else {
		inserted = null;
	}
} ,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:26:21.758 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:21.758 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:21.759 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:26:23.670 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:23.670 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:23.671 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
	if (((vertex != start) && (vertex != end)) && 
	(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
		vertex.bindWith(line);
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:26:25.553 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:25.553 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:25.554 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:26:27.469 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:27.469 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:27.470 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:26:29.339 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:29.340 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:29.340 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:26:31.278 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:31.278 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:31.279 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; ++i) {


	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex start = vArray[i];
	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex end = vArray[(i + 1) % n];




	org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end);
	if (line == null) {
		line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation());
	}


	edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line));


	for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
		if (((vertex != start) && (vertex != end)) && 
		(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
			vertex.bindWith(line);
		}
	}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:26:33.300 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:33.300 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:33.301 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (node.insertCut(inserted.getLine())) {
	inserted.setNode(node);
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:26:35.340 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:35.340 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:35.341 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:26:37.237 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:37.237 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:37.238 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:26:39.248 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:39.248 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:39.249 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:26:41.128 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:41.128 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:41.129 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> plusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:26:43.038 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:43.038 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:43.039 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> plusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:26:44.953 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:44.953 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:44.954 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> plusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:26:46.853 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:46.853 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:46.854 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> minusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> plusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:26:48.731 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:48.731 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:48.732 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> minusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:26:50.627 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:50.627 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:50.628 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> minusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:26:52.516 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:52.516 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:52.517 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:26:54.464 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:54.464 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:54.465 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> minusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:26:56.592 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:56.594 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:56.595 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:26:58.495 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:58.495 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:58.496 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:27:00.462 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:00.463 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:00.464 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:27:02.657 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:02.657 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:02.658 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:27:05.037 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:05.038 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:05.039 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:27:07.004 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:07.004 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:07.005 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:27:09.294 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:09.294 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:09.296 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:27:11.301 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:11.301 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:11.302 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:27:13.561 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:13.561 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:13.562 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:27:15.445 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:15.445 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:15.447 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:27:17.462 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:17.463 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:17.464 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:27:19.459 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:19.459 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:19.460 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:27:21.559 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:21.559 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:21.560 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:27:23.441 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:23.441 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:23.442 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:27:25.341 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:25.342 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:25.343 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:27:27.303 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:27.303 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:27.304 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:27:29.368 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:29.369 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:29.370 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:27:31.290 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:31.290 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:31.291 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:27:33.389 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:33.389 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:33.390 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:27:35.301 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:35.302 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:35.302 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:27:37.203 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:37.203 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:37.204 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:27:39.095 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:39.095 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:39.096 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:27:41.034 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:41.034 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:41.035 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:27:43.002 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:43.003 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:43.004 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:27:45.008 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:45.008 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:45.009 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:27:47.128 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:47.128 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:47.129 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:27:49.063 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:49.063 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:49.064 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:27:51.026 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:51.027 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:51.028 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:27:52.919 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:52.919 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:52.920 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:27:54.938 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:54.938 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:54.939 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:27:57.318 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:57.318 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:57.319 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:27:59.643 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:59.643 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:59.644 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:28:01.609 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:01.610 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:01.611 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:28:03.696 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:03.696 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:03.697 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:28:05.842 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:05.843 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:05.844 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:28:07.727 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:07.727 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:07.728 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:28:09.776 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:09.776 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:09.777 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:28:11.820 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:11.820 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:11.821 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: switch (startSide) {
	case PLUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getOutgoing());
			plusList.add(splitPoint.getIncoming());
		} else {
			plusList.add(edge);
		}
		break;
	case MINUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getIncoming());
			plusList.add(splitPoint.getOutgoing());
		} else {
			minusList.add(edge);
		}
		break;
	default :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
			plusList.add(edge);
		} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
			minusList.add(edge);
		}
		break;},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:28:13.870 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:13.871 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:13.872 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: switch (startSide) {
	case PLUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getOutgoing());
			plusList.add(splitPoint.getIncoming());
		} else {
			plusList.add(edge);
		}
		break;
	case MINUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getIncoming());
			plusList.add(splitPoint.getOutgoing());
		} else {
			minusList.add(edge);
		}
		break;
	default :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
			plusList.add(edge);
		} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
			minusList.add(edge);
		}
		break;},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:28:15.784 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:15.785 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:15.786 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: switch (startSide) {
	case PLUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getOutgoing());
			plusList.add(splitPoint.getIncoming());
		} else {
			plusList.add(edge);
		}
		break;
	case MINUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getIncoming());
			plusList.add(splitPoint.getOutgoing());
		} else {
			minusList.add(edge);
		}
		break;
	default :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
			plusList.add(edge);
		} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
			minusList.add(edge);
		}
		break;},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:28:17.749 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:17.749 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:17.750 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: switch (startSide) {
	case PLUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getOutgoing());
			plusList.add(splitPoint.getIncoming());
		} else {
			plusList.add(edge);
		}
		break;
	case MINUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getIncoming());
			plusList.add(splitPoint.getOutgoing());
		} else {
			minusList.add(edge);
		}
		break;
	default :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
			plusList.add(edge);
		} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
			minusList.add(edge);
		}
		break;},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:28:19.798 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:19.798 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:19.799 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:28:21.793 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:21.793 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:21.794 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:28:23.792 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:23.792 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:23.793 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: switch (startSide) {
	case PLUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getOutgoing());
			plusList.add(splitPoint.getIncoming());
		} else {
			plusList.add(edge);
		}
		break;
	case MINUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getIncoming());
			plusList.add(splitPoint.getOutgoing());
		} else {
			minusList.add(edge);
		}
		break;
	default :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
			plusList.add(edge);
		} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
			minusList.add(edge);
		}
		break;},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:28:25.783 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:25.783 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:25.784 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:28:27.703 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:27.703 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:27.704 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge edge : edges) {
	if (edge != inserted) {
		final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
		final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
		org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		switch (startSide) {
			case PLUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getOutgoing());
					plusList.add(splitPoint.getIncoming());
				} else {
					plusList.add(edge);
				}
				break;
			case MINUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getIncoming());
					plusList.add(splitPoint.getOutgoing());
				} else {
					minusList.add(edge);
				}
				break;
			default :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
					plusList.add(edge);
				} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
					minusList.add(edge);
				}
				break;}

	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:28:29.594 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:29.595 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:29.596 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge edge : edges) {
	if (edge != inserted) {
		final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
		final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
		org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		switch (startSide) {
			case PLUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getOutgoing());
					plusList.add(splitPoint.getIncoming());
				} else {
					plusList.add(edge);
				}
				break;
			case MINUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getIncoming());
					plusList.add(splitPoint.getOutgoing());
				} else {
					minusList.add(edge);
				}
				break;
			default :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
					plusList.add(edge);
				} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
					minusList.add(edge);
				}
				break;}

	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:28:31.492 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:31.492 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:31.493 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge edge : edges) {
	if (edge != inserted) {
		final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
		final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
		org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		switch (startSide) {
			case PLUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getOutgoing());
					plusList.add(splitPoint.getIncoming());
				} else {
					plusList.add(edge);
				}
				break;
			case MINUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getIncoming());
					plusList.add(splitPoint.getOutgoing());
				} else {
					minusList.add(edge);
				}
				break;
			default :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
					plusList.add(edge);
				} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
					minusList.add(edge);
				}
				break;}

	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:28:33.377 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:33.377 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:33.378 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge edge : edges) {
	if (edge != inserted) {
		final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
		final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
		org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		switch (startSide) {
			case PLUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getOutgoing());
					plusList.add(splitPoint.getIncoming());
				} else {
					plusList.add(edge);
				}
				break;
			case MINUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getIncoming());
					plusList.add(splitPoint.getOutgoing());
				} else {
					minusList.add(edge);
				}
				break;
			default :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
					plusList.add(edge);
				} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
					minusList.add(edge);
				}
				break;}

	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:28:35.312 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:35.312 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:35.313 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:28:37.200 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:37.200 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:37.201 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:28:39.133 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:39.134 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:39.135 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge edge : edges) {
	if (edge != inserted) {
		final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
		final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
		org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		switch (startSide) {
			case PLUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getOutgoing());
					plusList.add(splitPoint.getIncoming());
				} else {
					plusList.add(edge);
				}
				break;
			case MINUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getIncoming());
					plusList.add(splitPoint.getOutgoing());
				} else {
					minusList.add(edge);
				}
				break;
			default :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
					plusList.add(edge);
				} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
					minusList.add(edge);
				}
				break;}

	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:28:41.127 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:41.127 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:41.128 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:28:43.085 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:43.086 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:43.087 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:28:45.057 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:45.058 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:45.059 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: switch (startSide) {
	case PLUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getOutgoing());
			plusList.add(splitPoint.getIncoming());
		} else {
			plusList.add(edge);
		}
		break;
	case MINUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getIncoming());
			plusList.add(splitPoint.getOutgoing());
		} else {
			minusList.add(edge);
		}
		break;
	default :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
			plusList.add(edge);
		} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
			minusList.add(edge);
		}
		break;},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:28:47.034 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:47.034 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:47.035 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:28:49.066 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:49.066 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:49.067 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:28:50.958 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:50.958 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:50.959 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!plusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList);
} else {
	node.getPlus().setAttribute(java.lang.Boolean.FALSE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:28:52.839 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:52.839 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:52.840 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!plusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList);
} else {
	node.getPlus().setAttribute(java.lang.Boolean.FALSE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:28:54.721 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:54.721 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:54.722 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!plusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList);
} else {
	node.getPlus().setAttribute(java.lang.Boolean.FALSE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:28:56.640 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:56.640 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:56.641 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!plusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList);
} else {
	node.getPlus().setAttribute(java.lang.Boolean.FALSE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:28:58.518 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:58.518 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:58.519 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:29:00.490 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:00.490 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:00.491 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge edge : edges) {
	if (edge != inserted) {
		final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
		final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
		org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		switch (startSide) {
			case PLUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getOutgoing());
					plusList.add(splitPoint.getIncoming());
				} else {
					plusList.add(edge);
				}
				break;
			case MINUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getIncoming());
					plusList.add(splitPoint.getOutgoing());
				} else {
					minusList.add(edge);
				}
				break;
			default :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
					plusList.add(edge);
				} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
					minusList.add(edge);
				}
				break;}

	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:29:02.397 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:02.397 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:02.398 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:29:04.312 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:04.312 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:04.313 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!plusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList);
} else {
	node.getPlus().setAttribute(java.lang.Boolean.FALSE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:29:06.302 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:06.302 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:06.303 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:29:08.188 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:08.189 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:08.189 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge edge : edges) {
	if (edge != inserted) {
		final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
		final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
		org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		switch (startSide) {
			case PLUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getOutgoing());
					plusList.add(splitPoint.getIncoming());
				} else {
					plusList.add(edge);
				}
				break;
			case MINUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getIncoming());
					plusList.add(splitPoint.getOutgoing());
				} else {
					minusList.add(edge);
				}
				break;
			default :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
					plusList.add(edge);
				} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
					minusList.add(edge);
				}
				break;}

	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:29:10.173 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:10.173 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:10.174 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:29:12.069 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:12.070 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:12.070 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:29:14.122 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:14.122 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:14.123 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!minusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList);
} else {
	node.getMinus().setAttribute(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:29:16.037 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:16.038 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:16.039 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!minusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList);
} else {
	node.getMinus().setAttribute(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:29:18.024 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:18.024 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:18.025 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!minusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList);
} else {
	node.getMinus().setAttribute(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:29:20.436 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:20.437 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:20.438 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!minusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList);
} else {
	node.getMinus().setAttribute(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:29:22.408 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:22.408 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:22.409 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.location = location,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:29:24.788 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:24.788 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:24.789 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.location = location,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!plusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList);
} else {
	node.getPlus().setAttribute(java.lang.Boolean.FALSE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:29:26.776 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:26.777 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:26.778 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.location = location,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:29:29.130 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:29.130 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:29.131 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.location = location,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!minusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList);
} else {
	node.getMinus().setAttribute(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:29:31.037 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:31.037 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:31.038 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:29:32.967 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:32.967 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:32.968 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:29:35.053 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:35.054 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:35.054 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:29:37.171 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:37.171 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:37.172 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.location = location,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:29:39.079 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:39.079 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:39.080 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:29:40.950 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:40.950 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:40.951 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:29:42.879 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:42.879 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:42.880 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:29:44.860 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:44.861 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:44.861 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.location = location,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:29:46.848 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:46.849 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:46.849 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.incoming = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:29:48.928 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:48.928 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:48.929 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:29:50.851 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:50.851 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:50.852 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!minusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList);
} else {
	node.getMinus().setAttribute(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:29:52.724 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:52.724 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:52.725 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:29:54.610 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:54.610 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:54.611 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.incoming = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:29:56.561 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:56.561 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:56.562 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.outgoing = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:29:58.543 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:58.543 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:58.544 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (n == 0) {

	return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:30:00.556 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:00.556 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:00.557 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[] vArray = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[n],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:30:02.594 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:02.595 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:02.596 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; ++i) {
	vArray[i] = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(vertices[i]);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:30:04.595 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:04.595 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:04.596 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:30:06.474 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:06.475 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:06.476 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:30:08.385 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:08.386 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:08.386 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (inserted.getNode() == null) {
	if (node.insertCut(inserted.getLine())) {
		inserted.setNode(node);
	} else {
		inserted = null;
	}
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:30:10.277 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:10.277 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:10.278 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:30:12.213 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:12.214 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:12.215 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:30:14.124 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:14.124 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:14.125 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while ((inserted == null) && (index < edges.size())) {
	inserted = edges.get(index++);
	if (inserted.getNode() == null) {
		if (node.insertCut(inserted.getLine())) {
			inserted.setNode(node);
		} else {
			inserted = null;
		}
	} else {
		inserted = null;
	}
} ,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:30:16.113 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:16.113 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:16.114 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:30:17.996 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:17.996 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:17.997 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:30:20.026 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:20.027 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:20.027 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:30:21.970 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:21.970 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:21.971 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:30:24.196 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:24.197 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:24.198 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> plusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:30:26.690 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:26.690 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:26.692 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> minusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:30:29.154 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:29.154 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:29.155 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:30:31.517 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:31.517 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:31.518 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:30:33.856 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:33.857 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:33.858 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:30:35.941 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:35.941 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:35.942 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:30:38.191 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:38.191 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:38.192 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:30:40.159 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:40.159 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:40.160 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:30:42.302 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:42.303 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:42.304 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:30:44.756 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:44.757 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:44.758 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:30:47.201 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:47.202 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:47.203 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:30:49.371 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:49.372 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:49.373 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:30:51.609 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:51.609 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:51.610 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.outgoing = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:30:53.671 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:53.671 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:53.672 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:30:55.611 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:55.611 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:55.612 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:30:57.863 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:57.863 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:57.864 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line1,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:30:59.822 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:59.822 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:59.823 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line1,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:31:01.776 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:01.776 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:01.777 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line1,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:31:03.683 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:03.683 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:03.684 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (line1 == line2) {
	return line1;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return line1,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:31:05.675 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:05.675 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:05.676 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (line1 == line2) {
	return line1;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:31:07.846 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:07.847 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:07.848 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
	if (line1 == line2) {
		return line1;
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (line1 == line2) {
	return line1;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:31:09.871 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:09.871 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:09.872 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
	if (line1 == line2) {
		return line1;
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:31:11.752 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:11.753 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:11.753 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line1 : lines) {
	for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
		if (line1 == line2) {
			return line1;
		}
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (line1 == line2) {
	return line1;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:31:13.686 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:13.687 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:13.688 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line1 : lines) {
	for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
		if (line1 == line2) {
			return line1;
		}
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:31:16.086 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:16.086 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:16.087 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line1 : lines) {
	for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
		if (line1 == line2) {
			return line1;
		}
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
	if (line1 == line2) {
		return line1;
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:31:18.433 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:18.433 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:18.434 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
	if (line1 == line2) {
		return line1;
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:31:20.465 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:20.466 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:20.467 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:31:22.690 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:22.691 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:22.692 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line1 : lines) {
	for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
		if (line1 == line2) {
			return line1;
		}
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:31:24.703 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:24.703 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:24.704 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bindWith(incoming.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
	if (line1 == line2) {
		return line1;
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:31:26.931 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:26.932 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:26.933 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bindWith(incoming.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.incoming = incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:31:28.816 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:28.816 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:28.817 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bindWith(incoming.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:31:30.852 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:30.852 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:30.853 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line1 : lines) {
	for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
		if (line1 == line2) {
			return line1;
		}
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:31:32.932 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:32.932 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:32.933 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(incoming.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:31:35.297 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:35.298 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:35.299 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:31:37.712 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:37.712 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:37.713 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line1 : lines) {
	for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
		if (line1 == line2) {
			return line1;
		}
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:31:39.864 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:39.864 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:39.865 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:31:42.080 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:42.080 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:42.081 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:31:44.128 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:44.128 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:44.129 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.incoming = incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:31:46.060 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:46.060 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:46.061 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:31:48.196 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:48.196 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:48.197 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:31:50.231 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:50.231 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:50.232 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.incoming = incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:31:52.237 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:52.237 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:52.238 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:31:54.150 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:54.150 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:54.151 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:31:56.189 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:56.189 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:56.190 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:31:58.285 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:58.285 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:58.286 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(incoming.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:00.324 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:00.324 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:00.326 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:32:02.222 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:02.222 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:02.223 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:04.127 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:04.127 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:04.128 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:06.009 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:06.010 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:06.011 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(incoming.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:07.967 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:07.967 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:07.968 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:32:09.886 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:09.887 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:09.887 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:11.805 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:11.806 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:11.806 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:13.794 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:13.794 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:13.795 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:15.760 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:15.760 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:15.761 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:32:17.747 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:17.747 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:17.748 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:19.637 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:19.638 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:19.639 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:21.505 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:21.505 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:21.506 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:23.381 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:23.381 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:23.382 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:25.258 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:25.258 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:25.259 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:32:27.183 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:27.183 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:27.184 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:29.162 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:29.162 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:29.163 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: start.setOutgoing(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:31.039 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:31.039 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:31.040 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: start.setOutgoing(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:33.028 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:33.028 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:33.030 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: start.setOutgoing(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:32:34.915 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:34.915 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:34.916 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: start.setOutgoing(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:36.910 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:36.910 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:36.911 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: end.setIncoming(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:38.848 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:38.848 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:38.849 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: end.setIncoming(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:40.834 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:40.834 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:40.835 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: end.setIncoming(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: start.setOutgoing(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:32:42.727 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:42.727 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:42.728 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: end.setIncoming(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:44.638 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:44.638 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:44.639 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:46.567 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:46.567 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:46.568 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:48.463 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:48.464 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:48.465 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: end.setIncoming(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:32:50.390 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:50.390 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:50.391 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:52.314 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:52.314 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:52.315 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:54.307 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:54.307 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:54.308 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:32:56.191 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:56.191 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:56.192 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:32:58.147 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:58.147 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:58.148 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:00.044 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:00.044 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:00.045 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:02.023 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:02.023 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:02.024 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: start.setOutgoing(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:03.893 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:03.893 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:03.894 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:33:05.808 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:05.809 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:05.810 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:07.788 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:07.788 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:07.789 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:09.651 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:09.651 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:09.652 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: end.setIncoming(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:11.524 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:11.524 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:11.525 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:33:13.421 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:13.422 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:13.423 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:15.338 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:15.338 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:15.339 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:17.255 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:17.255 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:17.256 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:19.528 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:19.528 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:19.529 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:33:21.955 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:21.955 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:21.956 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:23.999 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:24.000 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:24.001 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitVertex = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(line.intersection(splitLine)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:26.139 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:26.139 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:26.140 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitVertex = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(line.intersection(splitLine)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:28.222 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:28.222 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:28.223 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitVertex = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(line.intersection(splitLine)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:33:30.198 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:30.198 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:30.199 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitVertex = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(line.intersection(splitLine)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:32.202 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:32.202 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:32.203 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitVertex = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(line.intersection(splitLine)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:34.481 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:34.481 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:34.482 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: splitVertex.bindWith(splitLine),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:36.396 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:36.397 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:36.398 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: splitVertex.bindWith(splitLine),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:38.304 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:38.304 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:38.305 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: splitVertex.bindWith(splitLine),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:33:40.253 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:40.253 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:40.254 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: splitVertex.bindWith(splitLine),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:42.204 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:42.204 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:42.205 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: splitVertex.bindWith(splitLine),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitVertex = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(line.intersection(splitLine)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:44.261 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:44.261 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:44.262 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:46.383 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:46.383 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:46.384 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:48.308 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:48.308 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:48.309 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitVertex = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(line.intersection(splitLine)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:33:50.190 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:50.191 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:50.192 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:52.103 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:52.103 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:52.104 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: splitVertex.bindWith(splitLine),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:54.060 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:54.060 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:54.061 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:56.029 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:56.029 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:56.030 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:33:57.975 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:57.975 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:57.976 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: splitVertex.bindWith(splitLine),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:33:59.915 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:59.915 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:59.917 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:34:01.919 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:01.919 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:01.920 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:34:03.910 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:03.910 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:03.911 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:34:05.828 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:05.828 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:05.829 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:34:07.705 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:07.706 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:07.707 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:34:09.589 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:09.589 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:09.590 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:34:11.521 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:11.521 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:11.522 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:34:13.477 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:13.477 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:13.478 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:34:15.418 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:15.419 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:15.420 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:34:17.400 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:17.400 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:17.401 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:34:19.324 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:19.324 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:19.325 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:34:21.322 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:21.322 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:21.323 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed naming inconsistencies between Interval and IntervalsSet classes.
, ingredientB: Fixed naming inconsistencies between Interval and IntervalsSet classes.

01:34:23.225 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:23.225 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:23.226 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D end = (java.lang.Double.isInfinite(i.getSup())) ? 
null : ((org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (line.toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(i.getSup())))),commit: Fixed naming inconsistencies between Interval and IntervalsSet classes.
}, sim: 0.022053
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D start = (java.lang.Double.isInfinite(i.getInf())) ? 
null : ((org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (line.toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(i.getInf())))),commit: Fixed naming inconsistencies between Interval and IntervalsSet classes.
}, sim: 0.022053
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

01:34:25.245 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:25.245 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:25.246 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double deltaY = end.getY() - start.getY(),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double deltaX = end.getX() - start.getX(),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

01:34:27.126 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:27.126 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:27.127 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double r = (((p.getX() - start.getX()) * deltaX) + ((p.getY() - start.getY()) * deltaY)) / 
((deltaX * deltaX) + (deltaY * deltaY)),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double deltaY = end.getY() - start.getY(),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

01:34:29.051 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:29.052 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:29.053 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double dist1 = getStart().distance(p),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double r = (((p.getX() - start.getX()) * deltaX) + ((p.getY() - start.getY()) * deltaY)) / 
((deltaX * deltaX) + (deltaY * deltaY)),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

01:34:30.938 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:30.938 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:30.939 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double dist2 = getEnd().distance(p),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double dist1 = getStart().distance(p),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

01:34:32.836 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:32.836 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:32.837 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.FastMath.min(dist1, dist2),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double dist2 = getEnd().distance(p),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

01:34:34.782 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:34.782 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:34.784 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double px = start.getX() + (r * deltaX),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.FastMath.min(dist1, dist2),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

01:34:36.662 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:36.662 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:36.663 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double py = start.getY() + (r * deltaY),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double px = start.getX() + (r * deltaX),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

01:34:38.715 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:38.715 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:38.716 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D interPt = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(px, py),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double py = start.getY() + (r * deltaY),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

01:34:41.145 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:41.145 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:41.146 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return interPt.distance(p),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D interPt = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(px, py),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

01:34:43.377 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:43.377 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:43.378 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((r < 0) || (r > 1)) {
	final double dist1 = getStart().distance(p);
	final double dist2 = getEnd().distance(p);

	return org.apache.commons.math3.util.FastMath.min(dist1, dist2);
} else 
{

	final double px = start.getX() + (r * deltaX);
	final double py = start.getY() + (r * deltaY);

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D interPt = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(px, py);
	return interPt.distance(p);
},commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return interPt.distance(p),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed naming inconsistencies between Interval and IntervalsSet classes.
, ingredientB: Fixed naming inconsistencies between Interval and IntervalsSet classes.

01:34:45.567 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:45.567 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:45.569 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D end = line.toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(interval.getSup())),commit: Fixed naming inconsistencies between Interval and IntervalsSet classes.
}, sim: 0.022053
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D start = line.toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(interval.getInf())),commit: Fixed naming inconsistencies between Interval and IntervalsSet classes.
}, sim: 0.022053
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:34:47.995 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:47.995 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:47.997 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (n == 0) {

	return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:34:50.287 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:50.288 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:50.289 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[] vArray = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[n],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:34:52.448 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:52.449 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:52.450 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; ++i) {
	vArray[i] = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(vertices[i]);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:34:54.606 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:54.606 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:54.607 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:34:56.700 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:56.701 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:56.702 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:34:58.610 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:58.610 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:58.611 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:35:00.780 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:00.780 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:00.781 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!minusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList);
} else {
	node.getMinus().setAttribute(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:35:02.787 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:02.787 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:02.788 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:35:04.791 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:04.791 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:04.792 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:35:06.678 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:06.678 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:06.679 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:35:08.605 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:08.606 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:08.607 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:35:10.646 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:10.646 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:10.647 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:35:12.753 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:12.753 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:12.754 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:35:14.826 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:14.826 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:14.827 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line1,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:35:16.733 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:16.733 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:16.734 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (line1 == line2) {
	return line1;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:35:18.631 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:18.631 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:18.632 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
	if (line1 == line2) {
		return line1;
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:35:20.507 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:20.507 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:20.508 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line1 : lines) {
	for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
		if (line1 == line2) {
			return line1;
		}
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:35:22.427 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:22.427 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:22.428 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:35:24.366 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:24.366 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:24.367 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bindWith(incoming.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:35:26.296 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:26.296 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:26.297 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:35:28.232 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:28.232 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:28.233 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:35:30.193 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:30.193 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:30.194 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:35:32.152 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:32.152 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:32.153 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:35:34.163 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:34.163 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:34.164 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:35:36.052 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:36.052 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:36.053 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: end.setIncoming(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:35:37.924 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:37.924 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:37.925 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:35:39.840 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:39.840 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:39.841 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:35:41.700 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:41.700 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:41.701 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:35:43.575 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:43.575 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:43.576 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (n == 0) {

	return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = vertices.length,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:35:45.502 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:45.502 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:45.503 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (n == 0) {

	return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:35:47.397 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:47.397 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:47.398 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:35:49.343 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:49.343 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:49.344 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:35:51.294 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:51.294 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:51.295 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:35:53.220 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:53.220 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:53.221 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:35:55.281 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:55.281 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:55.282 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:35:57.170 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:57.170 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:57.171 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

01:35:59.192 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:59.192 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:59.193 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:36:01.088 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:01.088 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:01.089 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:36:03.011 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:03.011 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:03.012 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return splitVertex,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:36:04.918 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:04.918 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:04.919 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return splitVertex,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:36:06.794 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:06.794 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:06.795 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return splitVertex,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:36:08.699 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:08.699 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:08.700 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return splitVertex,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:36:10.577 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:10.577 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:10.578 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return splitVertex,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:36:12.442 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:12.442 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:12.443 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return splitVertex,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

01:36:14.306 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:14.306 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:14.307 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return splitVertex,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Fixed a wrong assumption on BSP tree attributes.

01:36:16.186 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:16.186 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:16.187 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false),commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a wrong assumption on BSP tree attributes.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:36:18.115 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:18.116 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:18.117 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false),commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a wrong assumption on BSP tree attributes.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:36:20.146 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:20.146 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:20.147 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false),commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a wrong assumption on BSP tree attributes.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:36:22.112 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:22.112 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:22.113 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false),commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a wrong assumption on BSP tree attributes.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:36:24.536 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:24.537 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:24.538 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false),commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a wrong assumption on BSP tree attributes.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:36:26.940 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:26.940 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:26.941 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false),commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a wrong assumption on BSP tree attributes.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:36:29.124 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:29.124 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:29.125 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false),commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a wrong assumption on BSP tree attributes.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:36:31.069 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:31.069 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:31.070 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false),commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a wrong assumption on BSP tree attributes.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:36:33.265 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:33.266 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:33.267 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false),commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a wrong assumption on BSP tree attributes.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

01:36:35.328 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:35.328 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:35.329 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false),commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added derivatives evaluation for field Hermite interpolator.
, ingredientB: Added Hermite interpolator for ExtendFieldElement instances.

01:36:44.608 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:44.609 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:44.610 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return derivatives,commit: Added derivatives evaluation for field Hermite interpolator.
}, sim: -0.200671
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return value,commit: Added Hermite interpolator for ExtendFieldElement instances.
}, sim: 0.027529
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added derivatives evaluation for field Hermite interpolator.

01:36:47.018 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:47.019 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:47.020 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return polynomials,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return derivatives,commit: Added derivatives evaluation for field Hermite interpolator.
}, sim: -0.200671
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

01:36:49.446 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:49.446 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:49.447 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return polynomials,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added derivatives evaluation for field Hermite interpolator.

01:36:51.448 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:51.449 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:51.450 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return polynomials,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return derivatives,commit: Added derivatives evaluation for field Hermite interpolator.
}, sim: -0.200671
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator for ExtendFieldElement instances.

01:36:53.724 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:53.724 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:53.725 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return polynomials,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return value,commit: Added Hermite interpolator for ExtendFieldElement instances.
}, sim: 0.027529
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added derivatives evaluation for field Hermite interpolator.
, ingredientB: Added Hermite interpolator.

01:36:55.811 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:55.811 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:55.812 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return derivatives,commit: Added derivatives evaluation for field Hermite interpolator.
}, sim: -0.200671
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:42:48.244 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:48.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:48.245 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int b = q,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int a = p,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:42:50.702 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:50.702 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:50.703 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.FastMath.abs(a + b),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((a == java.lang.Integer.MIN_VALUE) || 
(b == java.lang.Integer.MIN_VALUE)) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:42:53.259 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:53.259 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:53.260 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((a == 0) || 
(b == 0)) {
	if ((a == java.lang.Integer.MIN_VALUE) || 
	(b == java.lang.Integer.MIN_VALUE)) {
		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
		p, q);
	}
	return org.apache.commons.math3.util.FastMath.abs(a + b);
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.FastMath.abs(a + b),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:42:55.768 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:55.768 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:55.769 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: long al = a,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((a == 0) || 
(b == 0)) {
	if ((a == java.lang.Integer.MIN_VALUE) || 
	(b == java.lang.Integer.MIN_VALUE)) {
		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
		p, q);
	}
	return org.apache.commons.math3.util.FastMath.abs(a + b);
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:42:58.127 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:58.127 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:58.128 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: long bl = b,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: long al = a,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:00.504 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:00.504 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:00.505 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: boolean useLong = false,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: long bl = b,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:02.797 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:02.797 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:02.798 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: useLong = true,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: boolean useLong = false,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:05.263 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:05.263 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:05.264 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: a = -a,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: useLong = true,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:07.810 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:07.810 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:07.811 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (java.lang.Integer.MIN_VALUE == a) {
	useLong = true;
} else {
	a = -a;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: a = -a,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:09.967 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:09.967 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:09.968 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: al = -al,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (java.lang.Integer.MIN_VALUE == a) {
	useLong = true;
} else {
	a = -a;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:12.385 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:12.385 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:12.386 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (a < 0) {
	if (java.lang.Integer.MIN_VALUE == a) {
		useLong = true;
	} else {
		a = -a;
	}
	al = -al;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: al = -al,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:14.435 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:14.435 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:14.436 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: b = -b,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (a < 0) {
	if (java.lang.Integer.MIN_VALUE == a) {
		useLong = true;
	} else {
		a = -a;
	}
	al = -al;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:16.527 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:16.527 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:16.528 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (java.lang.Integer.MIN_VALUE == b) {
	useLong = true;
} else {
	b = -b;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: b = -b,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:18.888 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:18.889 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:18.890 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bl = -bl,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (java.lang.Integer.MIN_VALUE == b) {
	useLong = true;
} else {
	b = -b;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:20.906 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:20.907 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:20.908 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (b < 0) {
	if (java.lang.Integer.MIN_VALUE == b) {
		useLong = true;
	} else {
		b = -b;
	}
	bl = -bl;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bl = -bl,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:22.881 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:22.881 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:22.882 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (al == bl) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (b < 0) {
	if (java.lang.Integer.MIN_VALUE == b) {
		useLong = true;
	} else {
		b = -b;
	}
	bl = -bl;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:24.932 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:24.932 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:24.933 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: long blbu = bl,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (al == bl) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:27.028 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:27.029 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:27.029 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bl = al,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: long blbu = bl,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:29.206 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:29.206 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:29.207 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: al = blbu % al,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bl = al,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:31.194 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:31.195 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:31.196 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (bl > java.lang.Integer.MAX_VALUE) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: al = blbu % al,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:33.449 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:33.449 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:33.450 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((int) (bl)),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (bl > java.lang.Integer.MAX_VALUE) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:35.555 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:35.555 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:35.557 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (al == 0) {
	if (bl > java.lang.Integer.MAX_VALUE) {
		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
		p, q);
	}
	return ((int) (bl));
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((int) (bl)),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:37.544 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:37.545 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:37.546 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: blbu = bl,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (al == 0) {
	if (bl > java.lang.Integer.MAX_VALUE) {
		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
		p, q);
	}
	return ((int) (bl));
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:39.614 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:39.614 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:39.615 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: b = ((int) (al)),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: blbu = bl,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:41.662 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:41.662 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:41.663 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: a = ((int) (blbu % al)),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: b = ((int) (al)),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:43.647 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:43.647 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:43.648 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (useLong) {
	if (al == bl) {
		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
		p, q);
	}
	long blbu = bl;
	bl = al;
	al = blbu % al;
	if (al == 0) {
		if (bl > java.lang.Integer.MAX_VALUE) {
			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
			p, q);
		}
		return ((int) (bl));
	}
	blbu = bl;


	b = ((int) (al));
	a = ((int) (blbu % al));
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: a = ((int) (blbu % al)),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:45.619 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:45.619 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:45.620 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.ArithmeticUtils.gcdPositive(a, b),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (useLong) {
	if (al == bl) {
		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
		p, q);
	}
	long blbu = bl;
	bl = al;
	al = blbu % al;
	if (al == 0) {
		if (bl > java.lang.Integer.MAX_VALUE) {
			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
			p, q);
		}
		return ((int) (bl));
	}
	blbu = bl;


	b = ((int) (al));
	a = ((int) (blbu % al));
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:47.595 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:47.595 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:47.596 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return b,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.ArithmeticUtils.gcdPositive(a, b),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:49.567 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:49.567 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:49.568 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return a,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return b,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:51.571 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:51.571 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:51.572 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (b == 0) {
	return a;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return a,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:53.617 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:53.617 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:53.618 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (a == 0) {
	return b;
} else 
if (b == 0) {
	return a;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (b == 0) {
	return a;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:56.067 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:56.068 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:56.069 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int aTwos = java.lang.Integer.numberOfTrailingZeros(a),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (a == 0) {
	return b;
} else 
if (b == 0) {
	return a;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:43:58.549 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:58.550 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:58.551 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: a >>= aTwos,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int aTwos = java.lang.Integer.numberOfTrailingZeros(a),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:44:01.080 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:01.081 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:01.081 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int bTwos = java.lang.Integer.numberOfTrailingZeros(b),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: a >>= aTwos,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:44:03.245 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:03.245 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:03.247 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: b >>= bTwos,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int bTwos = java.lang.Integer.numberOfTrailingZeros(b),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:44:05.709 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:05.709 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:05.710 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int shift = java.lang.Math.min(aTwos, bTwos),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: b >>= bTwos,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:44:08.200 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:08.200 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:08.201 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int delta = a - b,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int shift = java.lang.Math.min(aTwos, bTwos),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:44:10.725 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:10.726 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:10.727 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: b = java.lang.Math.min(a, b),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int delta = a - b,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:44:13.116 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:13.117 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:13.117 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: a = java.lang.Math.abs(delta),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: b = java.lang.Math.min(a, b),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:44:15.524 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:15.525 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:15.526 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: a >>= java.lang.Integer.numberOfTrailingZeros(a),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: a = java.lang.Math.abs(delta),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:44:17.670 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:17.670 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:17.671 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (a != b) {
	final int delta = a - b;
	b = java.lang.Math.min(a, b);
	a = java.lang.Math.abs(delta);


	a >>= java.lang.Integer.numberOfTrailingZeros(a);
} ,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: a >>= java.lang.Integer.numberOfTrailingZeros(a),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

01:44:19.784 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:19.784 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:19.785 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return a << shift,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (a != b) {
	final int delta = a - b;
	b = java.lang.Math.min(a, b);
	a = java.lang.Math.abs(delta);


	a >>= java.lang.Integer.numberOfTrailingZeros(a);
} ,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:44:21.946 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:21.947 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:21.948 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (k < 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.NotPositiveException(k),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:44:24.029 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:24.030 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:24.030 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(k, n, true),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (k < 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:44:26.249 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:26.249 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:26.250 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (k > n) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(k, n, true);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(k, n, true),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:44:28.348 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:28.348 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:28.349 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: long[][] stirlingS2 = org.apache.commons.math3.util.ArithmeticUtils.STIRLING_S2.get(),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (k > n) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(k, n, true);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:44:30.326 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:30.327 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:30.328 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int maxIndex = 26,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: long[][] stirlingS2 = org.apache.commons.math3.util.ArithmeticUtils.STIRLING_S2.get(),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:44:32.306 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:32.306 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:32.307 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: stirlingS2 = new long[maxIndex][],commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int maxIndex = 26,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:44:34.377 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:34.378 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:34.379 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: stirlingS2[0] = new long[]{ 1L },commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: stirlingS2 = new long[maxIndex][],commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:44:36.621 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:36.621 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:36.622 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: stirlingS2[i] = new long[i + 1],commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: stirlingS2[0] = new long[]{ 1L },commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:44:38.909 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:38.909 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:38.910 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: stirlingS2[i][0] = 0,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: stirlingS2[i] = new long[i + 1],commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:44:41.376 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:41.376 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:41.377 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: stirlingS2[i][1] = 1,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: stirlingS2[i][0] = 0,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:44:43.800 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:43.800 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:43.801 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: stirlingS2[i][i] = 1,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: stirlingS2[i][1] = 1,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:44:46.355 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:46.355 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:46.356 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: stirlingS2[i][j] = (j * stirlingS2[i - 1][j]) + stirlingS2[i - 1][j - 1],commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: stirlingS2[i][i] = 1,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:44:48.878 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:48.879 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:48.880 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = 2; j < i; ++j) {
	stirlingS2[i][j] = (j * stirlingS2[i - 1][j]) + stirlingS2[i - 1][j - 1];
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: stirlingS2[i][j] = (j * stirlingS2[i - 1][j]) + stirlingS2[i - 1][j - 1],commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:44:51.222 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:51.222 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:51.223 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 1; i < stirlingS2.length; ++i) {
	stirlingS2[i] = new long[i + 1];
	stirlingS2[i][0] = 0;
	stirlingS2[i][1] = 1;
	stirlingS2[i][i] = 1;
	for (int j = 2; j < i; ++j) {
		stirlingS2[i][j] = (j * stirlingS2[i - 1][j]) + stirlingS2[i - 1][j - 1];
	}
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = 2; j < i; ++j) {
	stirlingS2[i][j] = (j * stirlingS2[i - 1][j]) + stirlingS2[i - 1][j - 1];
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:44:53.357 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:53.357 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:53.358 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.util.ArithmeticUtils.STIRLING_S2.compareAndSet(null, stirlingS2),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 1; i < stirlingS2.length; ++i) {
	stirlingS2[i] = new long[i + 1];
	stirlingS2[i][0] = 0;
	stirlingS2[i][1] = 1;
	stirlingS2[i][i] = 1;
	for (int j = 2; j < i; ++j) {
		stirlingS2[i][j] = (j * stirlingS2[i - 1][j]) + stirlingS2[i - 1][j - 1];
	}
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:44:55.663 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:55.663 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:55.664 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (stirlingS2 == null) {





	final int maxIndex = 26;
	stirlingS2 = new long[maxIndex][];
	stirlingS2[0] = new long[]{ 1L };
	for (int i = 1; i < stirlingS2.length; ++i) {
		stirlingS2[i] = new long[i + 1];
		stirlingS2[i][0] = 0;
		stirlingS2[i][1] = 1;
		stirlingS2[i][i] = 1;
		for (int j = 2; j < i; ++j) {
			stirlingS2[i][j] = (j * stirlingS2[i - 1][j]) + stirlingS2[i - 1][j - 1];
		}
	}


	org.apache.commons.math3.util.ArithmeticUtils.STIRLING_S2.compareAndSet(null, stirlingS2);

},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.util.ArithmeticUtils.STIRLING_S2.compareAndSet(null, stirlingS2),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:44:57.620 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:57.620 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:57.621 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return stirlingS2[n][k],commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (stirlingS2 == null) {





	final int maxIndex = 26;
	stirlingS2 = new long[maxIndex][];
	stirlingS2[0] = new long[]{ 1L };
	for (int i = 1; i < stirlingS2.length; ++i) {
		stirlingS2[i] = new long[i + 1];
		stirlingS2[i][0] = 0;
		stirlingS2[i][1] = 1;
		stirlingS2[i][i] = 1;
		for (int j = 2; j < i; ++j) {
			stirlingS2[i][j] = (j * stirlingS2[i - 1][j]) + stirlingS2[i - 1][j - 1];
		}
	}


	org.apache.commons.math3.util.ArithmeticUtils.STIRLING_S2.compareAndSet(null, stirlingS2);

},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:44:59.751 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:44:59.751 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:44:59.752 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return (1L << (n - 1)) - 1L,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return stirlingS2[n][k],commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:45:01.826 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:01.826 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:01.827 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return (1L << (n - 1)) - 1L,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:45:03.950 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:03.950 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:03.951 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: long sum = 0,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:45:05.911 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:05.911 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:05.912 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: long sign = ((k & 0x1) == 0) ? 1 : -1,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: long sum = 0,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:45:07.893 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:07.894 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:07.895 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: sign = -sign,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: long sign = ((k & 0x1) == 0) ? 1 : -1,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:45:09.978 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:09.978 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:09.979 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: sign = -sign,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:45:12.160 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:12.160 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:12.161 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
n, 0, stirlingS2.length - 1),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:45:14.244 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:14.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:14.245 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (sum < 0) {

	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
	n, 0, stirlingS2.length - 1);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
n, 0, stirlingS2.length - 1),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:45:16.248 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:16.248 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:16.249 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = 1; j <= k; ++j) {
	sign = -sign;
	sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
	if (sum < 0) {

		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
		n, 0, stirlingS2.length - 1);
	}
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (sum < 0) {

	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
	n, 0, stirlingS2.length - 1);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:45:18.223 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:18.224 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:18.225 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = 1; j <= k; ++j) {
	sign = -sign;
	sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
	if (sum < 0) {

		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
		n, 0, stirlingS2.length - 1);
	}
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:45:20.194 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:20.194 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:20.195 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (k == (n - 1)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
} else {

	long sum = 0;
	long sign = ((k & 0x1) == 0) ? 1 : -1;
	for (int j = 1; j <= k; ++j) {
		sign = -sign;
		sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
		if (sum < 0) {

			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
			n, 0, stirlingS2.length - 1);
		}
	}
	return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:45:22.196 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:22.196 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:22.197 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (k == 2) {
	return (1L << (n - 1)) - 1L;
} else if (k == (n - 1)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
} else {

	long sum = 0;
	long sign = ((k & 0x1) == 0) ? 1 : -1;
	for (int j = 1; j <= k; ++j) {
		sign = -sign;
		sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
		if (sum < 0) {

			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
			n, 0, stirlingS2.length - 1);
		}
	}
	return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (k == (n - 1)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
} else {

	long sum = 0;
	long sign = ((k & 0x1) == 0) ? 1 : -1;
	for (int j = 1; j <= k; ++j) {
		sign = -sign;
		sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
		if (sum < 0) {

			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
			n, 0, stirlingS2.length - 1);
		}
	}
	return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:45:24.185 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:24.185 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:24.186 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((k == 1) || (k == n)) {
	return 1;
} else if (k == 2) {
	return (1L << (n - 1)) - 1L;
} else if (k == (n - 1)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
} else {

	long sum = 0;
	long sign = ((k & 0x1) == 0) ? 1 : -1;
	for (int j = 1; j <= k; ++j) {
		sign = -sign;
		sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
		if (sum < 0) {

			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
			n, 0, stirlingS2.length - 1);
		}
	}
	return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (k == 2) {
	return (1L << (n - 1)) - 1L;
} else if (k == (n - 1)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
} else {

	long sum = 0;
	long sign = ((k & 0x1) == 0) ? 1 : -1;
	for (int j = 1; j <= k; ++j) {
		sign = -sign;
		sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
		if (sum < 0) {

			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
			n, 0, stirlingS2.length - 1);
		}
	}
	return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:45:26.179 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:26.179 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:26.180 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (k == 0) {
	return 0;
} else if ((k == 1) || (k == n)) {
	return 1;
} else if (k == 2) {
	return (1L << (n - 1)) - 1L;
} else if (k == (n - 1)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
} else {

	long sum = 0;
	long sign = ((k & 0x1) == 0) ? 1 : -1;
	for (int j = 1; j <= k; ++j) {
		sign = -sign;
		sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
		if (sum < 0) {

			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
			n, 0, stirlingS2.length - 1);
		}
	}
	return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((k == 1) || (k == n)) {
	return 1;
} else if (k == 2) {
	return (1L << (n - 1)) - 1L;
} else if (k == (n - 1)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
} else {

	long sum = 0;
	long sign = ((k & 0x1) == 0) ? 1 : -1;
	for (int j = 1; j <= k; ++j) {
		sign = -sign;
		sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
		if (sum < 0) {

			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
			n, 0, stirlingS2.length - 1);
		}
	}
	return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

01:45:28.235 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:28.235 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:28.236 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (n < stirlingS2.length) {

	return stirlingS2[n][k];
} else 

if (k == 0) {
	return 0;
} else if ((k == 1) || (k == n)) {
	return 1;
} else if (k == 2) {
	return (1L << (n - 1)) - 1L;
} else if (k == (n - 1)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
} else {

	long sum = 0;
	long sign = ((k & 0x1) == 0) ? 1 : -1;
	for (int j = 1; j <= k; ++j) {
		sign = -sign;
		sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
		if (sum < 0) {

			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
			n, 0, stirlingS2.length - 1);
		}
	}
	return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (k == 0) {
	return 0;
} else if ((k == 1) || (k == n)) {
	return 1;
} else if (k == 2) {
	return (1L << (n - 1)) - 1L;
} else if (k == (n - 1)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
} else {

	long sum = 0;
	long sign = ((k & 0x1) == 0) ? 1 : -1;
	for (int j = 1; j <= k; ++j) {
		sign = -sign;
		sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
		if (sum < 0) {

			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
			n, 0, stirlingS2.length - 1);
		}
	}
	return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: BigReal.divide(BigReal) now throws MathArithmeticException (see MATH-755).
, ingredientB: BigReal.divide(BigReal) now throws MathArithmeticException (see MATH-755).

01:45:30.326 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:30.326 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:30.327 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NOT_ALLOWED),commit: BigReal.divide(BigReal) now throws MathArithmeticException (see MATH-755).
}, sim: -0.006481
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.BigReal(d.divide(a.d, scale, roundingMode)),commit: BigReal.divide(BigReal) now throws MathArithmeticException (see MATH-755).
}, sim: -0.006481
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: BigReal.divide(BigReal) now throws MathArithmeticException (see MATH-755).
, ingredientB: BigReal.divide(BigReal) now throws MathArithmeticException (see MATH-755).

01:45:32.376 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:32.376 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:32.377 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.BigReal(java.math.BigDecimal.ONE.divide(d, scale, roundingMode)),commit: BigReal.divide(BigReal) now throws MathArithmeticException (see MATH-755).
}, sim: -0.006481
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NOT_ALLOWED),commit: BigReal.divide(BigReal) now throws MathArithmeticException (see MATH-755).
}, sim: -0.006481
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

01:45:34.338 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:34.339 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:34.340 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return evaluate(x, epsilon, java.lang.Integer.MAX_VALUE),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return evaluate(x, org.apache.commons.math3.util.ContinuedFraction.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:45:36.416 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:36.416 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:36.417 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double hPrev = getA(0, x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double small = 1.0E-50,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:45:38.384 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:38.384 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:38.386 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hPrev = small,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double hPrev = getA(0, x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:45:40.768 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:40.768 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:40.769 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(hPrev, 0.0, small)) {
	hPrev = small;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hPrev = small,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:45:43.174 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:43.174 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:43.175 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int n = 1,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(hPrev, 0.0, small)) {
	hPrev = small;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:45:45.295 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:45.295 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:45.296 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double dPrev = 0.0,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int n = 1,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:45:47.659 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:47.659 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:47.660 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double cPrev = hPrev,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double dPrev = 0.0,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:45:49.731 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:49.731 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:49.732 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double hN = hPrev,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double cPrev = hPrev,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:45:51.740 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:51.740 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:51.742 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double a = getA(n, x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double hN = hPrev,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:45:54.077 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:54.077 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:54.078 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double b = getB(n, x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double a = getA(n, x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:45:56.173 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:56.173 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:56.174 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double dN = a + (b * dPrev),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double b = getB(n, x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:45:58.165 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:45:58.165 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:45:58.166 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: dN = small,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double dN = a + (b * dPrev),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:46:00.186 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:00.186 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:00.187 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(dN, 0.0, small)) {
	dN = small;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: dN = small,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:46:02.242 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:02.242 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:02.243 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double cN = a + (b / cPrev),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(dN, 0.0, small)) {
	dN = small;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:46:04.387 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:04.387 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:04.388 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cN = small,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double cN = a + (b / cPrev),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:46:06.462 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:06.463 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:06.464 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(cN, 0.0, small)) {
	cN = small;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cN = small,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:46:08.398 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:08.398 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:08.399 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: dN = 1 / dN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(cN, 0.0, small)) {
	cN = small;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:46:10.345 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:10.345 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:10.346 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double deltaN = cN * dN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: dN = 1 / dN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:46:12.366 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:12.366 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:12.367 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hN = hPrev * deltaN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double deltaN = cN * dN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:46:14.450 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:14.450 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:14.451 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hN = hPrev * deltaN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:46:16.586 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:16.586 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:16.587 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (java.lang.Double.isInfinite(hN)) {
	throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
	x);
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:46:18.601 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:18.601 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:18.602 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.FastMath.abs(deltaN - 1.0) < epsilon) {
	break;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (java.lang.Double.isNaN(hN)) {
	throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, 
	x);
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:46:20.716 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:20.716 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:20.717 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: dPrev = dN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(deltaN - 1.0) < epsilon) {
	break;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:46:22.771 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:22.771 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:22.772 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cPrev = cN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: dPrev = dN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:46:24.742 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:24.742 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:24.743 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hPrev = hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cPrev = cN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:46:26.718 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:26.719 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:26.719 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: n++,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hPrev = hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:46:28.697 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:28.697 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:28.698 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (n < maxIterations) {
	final double a = getA(n, x);
	final double b = getB(n, x);

	double dN = a + (b * dPrev);
	if (org.apache.commons.math3.util.Precision.equals(dN, 0.0, small)) {
		dN = small;
	}
	double cN = a + (b / cPrev);
	if (org.apache.commons.math3.util.Precision.equals(cN, 0.0, small)) {
		cN = small;
	}

	dN = 1 / dN;
	final double deltaN = cN * dN;
	hN = hPrev * deltaN;

	if (java.lang.Double.isInfinite(hN)) {
		throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
		x);
	}
	if (java.lang.Double.isNaN(hN)) {
		throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, 
		x);
	}

	if (org.apache.commons.math3.util.FastMath.abs(deltaN - 1.0) < epsilon) {
		break;
	}

	dPrev = dN;
	cPrev = cN;
	hPrev = hN;
	n++;
} ,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: n++,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:46:30.659 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:30.659 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:30.661 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ZERO = new Decimal64(0.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:46:32.738 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:32.738 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:32.739 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ZERO = new Decimal64(0.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:46:34.718 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:34.718 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:34.719 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: NEGATIVE_INFINITY = new Decimal64(java.lang.Double.NEGATIVE_INFINITY),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:46:36.769 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:36.769 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:36.770 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: POSITIVE_INFINITY = new Decimal64(java.lang.Double.POSITIVE_INFINITY),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: NEGATIVE_INFINITY = new Decimal64(java.lang.Double.NEGATIVE_INFINITY),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:46:38.773 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:38.773 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:38.774 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: NAN = new Decimal64(java.lang.Double.NaN),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: POSITIVE_INFINITY = new Decimal64(java.lang.Double.POSITIVE_INFINITY),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:46:40.845 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:40.845 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:40.846 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.value = x,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: NAN = new Decimal64(java.lang.Double.NaN),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:46:43.165 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:43.166 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:43.167 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64Field.getInstance(),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.value = x,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:46:45.561 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:45.561 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:45.562 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(this.value + a.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.Decimal64Field.getInstance(),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:46:47.907 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:47.908 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:47.909 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(this.value - a.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(this.value + a.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:46:50.131 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:50.131 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:50.132 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(-this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(this.value - a.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:46:52.222 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:52.222 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:52.223 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(this.value * a.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(-this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:46:54.401 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:54.402 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:54.403 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(n * this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(this.value * a.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:46:56.448 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:56.448 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:56.449 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(this.value / a.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(n * this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:46:58.657 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:46:58.658 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:46:58.658 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(1.0 / this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(this.value / a.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:47:00.778 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:00.778 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:00.779 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((byte) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(1.0 / this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:47:02.758 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:02.758 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:02.759 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((short) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((byte) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:47:04.727 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:04.727 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:04.728 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((int) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((short) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:47:06.789 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:06.789 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:06.790 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((long) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((int) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:47:08.922 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:08.922 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:08.923 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((float) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((long) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:47:11.107 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:11.107 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:11.108 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return value,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((float) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:47:13.080 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:13.080 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:13.081 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return java.lang.Double.compare(this.value, o.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return value,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:47:15.061 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:15.061 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:15.062 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.util.Decimal64 that = ((org.apache.commons.math3.util.Decimal64) (obj)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return java.lang.Double.compare(this.value, o.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:47:17.008 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:17.008 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:17.009 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return java.lang.Double.doubleToLongBits(this.value) == java.lang.Double.doubleToLongBits(
that.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.util.Decimal64 that = ((org.apache.commons.math3.util.Decimal64) (obj)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:47:19.017 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:19.017 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:19.018 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (obj instanceof org.apache.commons.math3.util.Decimal64) {
	final org.apache.commons.math3.util.Decimal64 that = ((org.apache.commons.math3.util.Decimal64) (obj));
	return java.lang.Double.doubleToLongBits(this.value) == java.lang.Double.doubleToLongBits(
	that.value);
},commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return java.lang.Double.doubleToLongBits(this.value) == java.lang.Double.doubleToLongBits(
that.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:47:21.081 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:21.081 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:21.082 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: long v = java.lang.Double.doubleToLongBits(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (obj instanceof org.apache.commons.math3.util.Decimal64) {
	final org.apache.commons.math3.util.Decimal64 that = ((org.apache.commons.math3.util.Decimal64) (obj));
	return java.lang.Double.doubleToLongBits(this.value) == java.lang.Double.doubleToLongBits(
	that.value);
},commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:47:23.136 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:23.137 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:23.137 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((int) (v ^ (v >>> 32))),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: long v = java.lang.Double.doubleToLongBits(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:47:25.220 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:25.220 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:25.221 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return java.lang.Double.toString(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((int) (v ^ (v >>> 32))),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:47:27.300 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:27.300 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:27.301 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return java.lang.Double.isInfinite(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return java.lang.Double.toString(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:47:29.280 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:29.280 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:29.281 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return java.lang.Double.isNaN(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return java.lang.Double.isInfinite(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:47:31.475 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:31.476 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:31.477 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(value + a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return java.lang.Double.isNaN(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:47:33.961 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:33.962 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:33.963 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(value - a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(value + a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:47:36.140 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:36.141 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:36.142 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(value * a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(value - a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:47:38.455 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:38.455 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:38.456 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(value / a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(value * a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:47:40.561 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:40.561 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:40.562 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(value / a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:47:42.901 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:42.902 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:42.903 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:47:44.974 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:44.974 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:44.975 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:47:46.965 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:46.965 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:46.966 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.ceil(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:47:49.134 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:49.134 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:49.135 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.floor(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.ceil(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:47:51.401 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:51.401 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:51.402 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.rint(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.floor(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:47:53.374 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:53.374 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:53.375 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.FastMath.round(value),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.rint(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:47:55.329 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:55.329 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:55.330 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.signum(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.FastMath.round(value),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:47:57.335 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:57.336 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:57.336 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.signum(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:47:59.320 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:59.320 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:59.321 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:48:01.389 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:01.390 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:01.391 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.rint(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:48:03.462 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:03.462 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:03.463 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.signum(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:48:05.516 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:05.517 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:05.518 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:48:07.472 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:07.473 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:07.474 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.scalb(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.FastMath.round(value),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:48:09.418 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:09.418 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:09.419 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.scalb(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:48:11.450 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:11.450 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:11.451 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.scalb(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:48:13.480 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:13.480 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:13.481 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.hypot(value, y.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.FastMath.round(value),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:48:15.526 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:15.526 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:15.527 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.hypot(value, y.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.scalb(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:48:17.577 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:17.577 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:17.578 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.hypot(value, y.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:48:19.549 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:19.549 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:19.550 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sqrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.signum(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:48:21.596 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:21.597 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:21.598 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sqrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.hypot(value, y.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:48:23.599 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:23.599 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:23.600 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sqrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:48:25.553 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:25.553 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:25.554 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cbrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.signum(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:48:27.538 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:27.538 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:27.539 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cbrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.hypot(value, y.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:48:29.493 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:29.493 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:29.494 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cbrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:48:31.452 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:31.452 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:31.453 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cbrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sqrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:48:33.435 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:33.435 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:33.436 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:48:35.485 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:35.485 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:35.486 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sqrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:48:37.422 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:37.422 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:37.423 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:48:39.436 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:39.436 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:39.437 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:48:41.414 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:41.414 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:41.415 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cbrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:48:43.432 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:43.432 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:43.433 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:48:45.465 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:45.465 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:45.466 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (value < 0) {
	return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n));
} else {
	return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n));
},commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.scalb(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:48:47.429 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:47.429 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:47.430 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (value < 0) {
	return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n));
} else {
	return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n));
},commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:48:49.484 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:49.484 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:49.485 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (value < 0) {
	return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n));
} else {
	return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n));
},commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:48:51.440 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:51.440 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:51.441 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, p)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.scalb(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:48:53.522 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:53.522 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:53.523 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, p)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:48:55.512 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:55.512 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:55.513 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, p)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sqrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:48:57.485 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:57.485 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:57.486 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, p)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cbrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:48:59.439 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:59.439 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:59.439 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.hypot(value, y.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:49:01.399 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:01.399 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:01.400 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:03.388 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:03.388 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:03.389 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cbrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:05.391 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:05.391 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:05.392 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, p)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:07.356 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:07.356 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:07.357 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, e.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.hypot(value, y.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:49:09.294 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:09.295 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:09.296 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, e.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:11.240 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:11.240 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:11.241 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, e.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, p)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:13.188 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:13.188 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:13.189 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, e.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:15.150 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:15.150 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:15.151 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.exp(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sqrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:49:17.175 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:17.175 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:17.176 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.exp(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:19.111 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:19.111 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:19.111 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.exp(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:21.089 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:21.090 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:21.090 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.exp(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, e.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:23.097 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:23.097 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:23.098 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.expm1(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sqrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:25.060 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:25.061 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:25.062 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.expm1(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.exp(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:49:27.009 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:27.009 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:27.010 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.expm1(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:49:28.995 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:28.995 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:28.996 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.expm1(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:49:31.089 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:31.089 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:31.090 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.expm1(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:33.046 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:33.046 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:33.047 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log1p(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:34.991 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:34.991 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:34.992 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log10(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log1p(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:37.092 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:37.092 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:37.093 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cos(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log10(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:39.187 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:39.187 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:39.187 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sin(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cos(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:41.176 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:41.177 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:41.178 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.tan(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sin(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:43.131 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:43.132 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:43.133 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.acos(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.tan(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:45.149 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:45.149 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:45.150 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.asin(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.acos(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:47.121 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:47.121 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:47.122 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.atan(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.asin(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:49.131 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:49.131 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:49.132 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.atan2(value, x.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.atan(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:51.131 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:51.131 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:51.132 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cosh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.atan2(value, x.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:53.617 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:53.617 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:53.618 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sinh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cosh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:55.992 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:55.993 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:55.993 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.tanh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sinh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:49:58.322 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:49:58.323 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:49:58.324 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.acosh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.tanh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:00.500 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:00.500 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:00.501 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.asinh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.acosh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:02.631 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:02.631 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:02.632 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.atanh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.asinh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:04.786 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:04.786 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:04.788 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(a.length, b.length),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.atanh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:06.809 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:06.809 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:06.810 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (a.length != b.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(a.length, b.length);
},commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(a.length, b.length),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:09.072 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:09.072 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:09.073 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] aDouble = new double[a.length],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (a.length != b.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(a.length, b.length);
},commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:11.161 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:11.161 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:11.163 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] bDouble = new double[b.length],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] aDouble = new double[a.length],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:13.143 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:13.143 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:13.144 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: aDouble[i] = a[i].value,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] bDouble = new double[b.length],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:15.634 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:15.634 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:15.635 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bDouble[i] = b[i].value,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: aDouble[i] = a[i].value,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:18.138 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:18.138 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:18.139 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < a.length; ++i) {
	aDouble[i] = a[i].value;
	bDouble[i] = b[i].value;
},commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bDouble[i] = b[i].value,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:20.385 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:20.385 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:20.386 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(aDouble, bDouble)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < a.length; ++i) {
	aDouble[i] = a[i].value;
	bDouble[i] = b[i].value;
},commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:22.664 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:22.664 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:22.665 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < a.length; ++i) {
	bDouble[i] = b[i].value;
},commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(aDouble, bDouble)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:24.815 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:24.815 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:24.816 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a, bDouble)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < a.length; ++i) {
	bDouble[i] = b[i].value;
},commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:27.055 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:27.055 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:27.056 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a, bDouble)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:29.075 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:29.075 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:29.076 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1, b1.value, 
a2, b2.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:31.183 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:31.183 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:31.184 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1, b1.value, 
a2, b2.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:33.745 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:33.745 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:33.746 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1, b1.value, 
a2, b2.value, 
a3, b3.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:36.238 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:36.238 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:36.240 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value, 
a4.value, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1, b1.value, 
a2, b2.value, 
a3, b3.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:38.560 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:38.560 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:38.561 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1, b1.value, 
a2, b2.value, 
a3, b3.value, 
a4, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value, 
a4.value, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:40.757 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:40.758 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:40.759 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1, b1.value, 
a2, b2.value, 
a3, b3.value, 
a4, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:43.056 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:43.057 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:43.058 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:45.201 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:45.201 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:45.202 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.ceil(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:47.352 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:47.352 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:47.353 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.rint(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:49.360 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:49.360 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:49.361 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.scalb(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:51.630 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:51.630 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:51.631 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.expm1(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:50:53.693 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:53.694 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:53.694 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:50:55.688 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:55.689 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:55.690 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:50:57.647 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:57.647 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:57.648 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:50:59.670 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:50:59.671 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:50:59.672 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (value < 0) {
	return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n));
} else {
	return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n));
},commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1, b1.value, 
a2, b2.value, 
a3, b3.value, 
a4, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:51:01.850 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:01.851 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:01.851 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log1p(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:51:04.084 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:04.084 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:04.085 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log10(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:51:06.086 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:06.086 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:06.087 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cos(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:51:08.070 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:08.071 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:08.072 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sin(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:51:10.026 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:10.026 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:10.027 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.tan(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:51:12.040 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:12.040 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:12.041 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.acos(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:51:14.070 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:14.070 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:14.071 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.asin(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:51:16.048 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:16.048 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:16.049 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.atan(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:51:18.087 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:18.087 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:18.088 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.atan2(value, x.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:51:20.183 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:20.183 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:20.184 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cosh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:51:22.258 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:22.258 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:22.259 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.tanh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:51:24.219 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:24.219 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:24.220 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(a.length, b.length),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:51:26.261 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:26.261 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:26.262 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < a.length; ++i) {
	bDouble[i] = b[i].value;
},commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:51:28.215 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:28.215 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:28.216 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:51:30.166 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:30.166 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:30.167 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value, 
a4.value, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:51:32.263 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:32.264 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:32.264 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1, b1.value, 
a2, b2.value, 
a3, b3.value, 
a4, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:51:34.251 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:34.251 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:34.252 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ZERO = new Decimal64(0.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:51:36.288 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:36.288 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:36.289 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:51:38.269 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:38.269 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:38.270 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: POSITIVE_INFINITY = new Decimal64(java.lang.Double.POSITIVE_INFINITY),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:51:40.335 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:40.335 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:40.336 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(this.value + a.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:51:42.515 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:42.516 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:42.517 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((short) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:51:44.489 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:44.489 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:44.490 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(value * a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:51:46.675 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:46.675 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:46.676 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

01:51:49.167 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:49.167 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:49.168 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(value / a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:51:51.499 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:51.499 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:51.500 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (value < 0) {
	return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n));
} else {
	return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n));
},commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:51:53.607 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:53.607 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:53.608 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:51:55.925 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:55.925 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:55.926 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:51:57.887 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:51:57.887 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:51:57.888 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:52:00.067 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:00.067 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:00.068 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value, 
a4.value, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:52:02.117 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:02.117 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:02.118 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1, b1.value, 
a2, b2.value, 
a3, b3.value, 
a4, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:52:04.219 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:04.219 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:04.220 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.ceil(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:52:06.183 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:06.184 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:06.184 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.floor(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:52:08.197 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:08.198 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:08.198 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.rint(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:52:10.363 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:10.363 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:10.364 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.FastMath.round(value),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:52:12.513 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:12.513 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:12.514 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.signum(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:52:15.047 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:15.047 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:15.048 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:52:17.548 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:17.548 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:17.549 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.scalb(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:52:19.576 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:19.576 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:19.577 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.hypot(value, y.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:52:21.864 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:21.865 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:21.866 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sqrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:52:23.990 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:23.990 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:23.992 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cbrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:52:26.005 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:26.006 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:26.006 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:52:28.068 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:28.068 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:28.069 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:52:30.343 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:30.343 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:30.344 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.atan(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:52:32.388 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:32.388 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:32.389 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < a.length; ++i) {
	bDouble[i] = b[i].value;
},commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:52:34.510 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:34.510 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:34.511 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:52:37.058 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:37.058 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:37.059 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value, 
a4.value, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

01:52:39.658 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:39.659 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:39.660 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1, b1.value, 
a2, b2.value, 
a3, b3.value, 
a4, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:52:42.251 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:42.252 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:42.253 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64.ZERO,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:52:44.760 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:44.760 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:44.761 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64.ONE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.Decimal64.ZERO,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:52:46.973 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:46.974 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:46.975 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64.class,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.Decimal64.ONE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

01:52:49.304 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:49.305 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:49.306 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return (0.5 * t) * t,commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double t = org.apache.commons.math3.util.FastMath.exp(0.5 * x),commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

01:52:51.422 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:51.422 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:51.423 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return 0.5 * org.apache.commons.math3.util.FastMath.exp(x),commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return (0.5 * t) * t,commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

01:52:53.654 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:53.654 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:53.655 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (x >= org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE) {

	final double t = org.apache.commons.math3.util.FastMath.exp(0.5 * x);
	return (0.5 * t) * t;
} else {
	return 0.5 * org.apache.commons.math3.util.FastMath.exp(x);
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return 0.5 * org.apache.commons.math3.util.FastMath.exp(x),commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

01:52:55.824 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:55.824 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:55.825 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x),commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (x >= org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE) {

	final double t = org.apache.commons.math3.util.FastMath.exp(0.5 * x);
	return (0.5 * t) * t;
} else {
	return 0.5 * org.apache.commons.math3.util.FastMath.exp(x);
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

01:52:57.844 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:57.844 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:57.845 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x),commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x),commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

01:52:59.905 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:52:59.905 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:52:59.906 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

	final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
	return (0.5 * t) * t;
} else {
	return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x);
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x),commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

01:53:02.092 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:02.092 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:02.093 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (x < (-20)) {
	if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

		final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
		return (0.5 * t) * t;
	} else {
		return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x);
	}
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

	final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
	return (0.5 * t) * t;
} else {
	return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x);
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

01:53:04.296 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:04.296 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:04.297 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (x > 20) {
	if (x >= org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE) {

		final double t = org.apache.commons.math3.util.FastMath.exp(0.5 * x);
		return (0.5 * t) * t;
	} else {
		return 0.5 * org.apache.commons.math3.util.FastMath.exp(x);
	}
} else if (x < (-20)) {
	if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

		final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
		return (0.5 * t) * t;
	} else {
		return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x);
	}
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (x < (-20)) {
	if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

		final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
		return (0.5 * t) * t;
	} else {
		return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x);
	}
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

01:53:06.278 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:06.278 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:06.279 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] hiPrec = new double[2],commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (x > 20) {
	if (x >= org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE) {

		final double t = org.apache.commons.math3.util.FastMath.exp(0.5 * x);
		return (0.5 * t) * t;
	} else {
		return 0.5 * org.apache.commons.math3.util.FastMath.exp(x);
	}
} else if (x < (-20)) {
	if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

		final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
		return (0.5 * t) * t;
	} else {
		return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x);
	}
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

01:53:08.265 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:08.265 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:08.266 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return (-0.5) * org.apache.commons.math3.util.FastMath.exp(-x),commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((-0.5) * t) * t,commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

01:53:10.275 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:10.275 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:10.276 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

	final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
	return ((-0.5) * t) * t;
} else {
	return (-0.5) * org.apache.commons.math3.util.FastMath.exp(-x);
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return (-0.5) * org.apache.commons.math3.util.FastMath.exp(-x),commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

01:53:12.310 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:12.310 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:12.311 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (x < (-20)) {
	if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

		final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
		return ((-0.5) * t) * t;
	} else {
		return (-0.5) * org.apache.commons.math3.util.FastMath.exp(-x);
	}
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

	final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
	return ((-0.5) * t) * t;
} else {
	return (-0.5) * org.apache.commons.math3.util.FastMath.exp(-x);
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

01:53:14.865 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:14.865 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:14.866 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (x > 20) {
	if (x >= org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE) {

		final double t = org.apache.commons.math3.util.FastMath.exp(0.5 * x);
		return (0.5 * t) * t;
	} else {
		return 0.5 * org.apache.commons.math3.util.FastMath.exp(x);
	}
} else if (x < (-20)) {
	if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

		final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
		return ((-0.5) * t) * t;
	} else {
		return (-0.5) * org.apache.commons.math3.util.FastMath.exp(-x);
	}
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (x < (-20)) {
	if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

		final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
		return ((-0.5) * t) * t;
	} else {
		return (-0.5) * org.apache.commons.math3.util.FastMath.exp(-x);
	}
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: partially reverted commit 1370951 as it trashed earlier correction in FastMath
, ingredientB: partially reverted commit 1370951 as it trashed earlier correction in FastMath

01:53:17.240 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:17.240 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:17.241 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double ya = lnCoef_last[0],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length - 1],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: partially reverted commit 1370951 as it trashed earlier correction in FastMath
, ingredientB: partially reverted commit 1370951 as it trashed earlier correction in FastMath

01:53:19.658 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:19.659 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:19.660 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double yb = lnCoef_last[1],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double ya = lnCoef_last[0],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: partially reverted commit 1370951 as it trashed earlier correction in FastMath
, ingredientB: partially reverted commit 1370951 as it trashed earlier correction in FastMath

01:53:21.998 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:21.999 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:22.000 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: aa = ya + lnCoef_i[0],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[i],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: partially reverted commit 1370951 as it trashed earlier correction in FastMath
, ingredientB: partially reverted commit 1370951 as it trashed earlier correction in FastMath

01:53:24.550 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:24.550 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:24.551 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ab = yb + lnCoef_i[1],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: aa = ya + lnCoef_i[0],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: partially reverted commit 1370951 as it trashed earlier correction in FastMath
, ingredientB: partially reverted commit 1370951 as it trashed earlier correction in FastMath

01:53:27.071 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:27.071 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:27.072 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] lnm = org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[((int) ((bits & 0xffc0000000000L) >> 42))],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: partially reverted commit 1370951 as it trashed earlier correction in FastMath
, ingredientB: partially reverted commit 1370951 as it trashed earlier correction in FastMath

01:53:29.288 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:29.288 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:29.289 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double denom = org.apache.commons.math3.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L),commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double numer = bits & 0x3ffffffffffL,commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: partially reverted commit 1370951 as it trashed earlier correction in FastMath
, ingredientB: partially reverted commit 1370951 as it trashed earlier correction in FastMath

01:53:31.656 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:31.656 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:31.657 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[i],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length - 1],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Code cleanup.
, ingredientB: Code cleanup.

01:53:33.741 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:33.741 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:33.742 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double xpa = 1 + x,commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (x == java.lang.Double.POSITIVE_INFINITY) {
	return java.lang.Double.POSITIVE_INFINITY;
},commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Code cleanup.
, ingredientB: Code cleanup.

01:53:35.920 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:35.920 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:35.921 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double xpb = -((xpa - 1) - x),commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double xpa = 1 + x,commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Code cleanup.
, ingredientB: Code cleanup.

01:53:38.125 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:38.125 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:38.126 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double fx1 = xpb / xpa,commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (java.lang.Double.isInfinite(lores)) {
	return lores;
},commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Code cleanup.
, ingredientB: Code cleanup.

01:53:40.155 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:40.155 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:40.156 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsilon = (0.5 * fx1) + 1,commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double fx1 = xpb / xpa,commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Code cleanup.
, ingredientB: Code cleanup.

01:53:42.226 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:42.226 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:42.227 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((epsilon * fx1) + hiPrec[1]) + hiPrec[0],commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double epsilon = (0.5 * fx1) + 1,commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Code cleanup.
, ingredientB: Code cleanup.

01:53:44.333 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:44.333 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:44.334 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double y = (((x * org.apache.commons.math3.util.FastMath.F_1_3) - org.apache.commons.math3.util.FastMath.F_1_2) * x) + 1,commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((epsilon * fx1) + hiPrec[1]) + hiPrec[0],commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Code cleanup.
, ingredientB: Code cleanup.

01:53:46.519 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:46.519 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:46.520 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return y * x,commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double y = (((x * org.apache.commons.math3.util.FastMath.F_1_3) - org.apache.commons.math3.util.FastMath.F_1_2) * x) + 1,commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Code cleanup.
, ingredientB: Code cleanup.

01:53:48.573 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:48.573 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:48.574 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((x > 1.0E-6) || 
(x < (-1.0E-6))) {
	final double xpa = 1 + x;
	final double xpb = -((xpa - 1) - x);

	final double[] hiPrec = new double[2];
	final double lores = org.apache.commons.math3.util.FastMath.log(xpa, hiPrec);
	if (java.lang.Double.isInfinite(lores)) {
		return lores;
	}



	final double fx1 = xpb / xpa;
	final double epsilon = (0.5 * fx1) + 1;
	return ((epsilon * fx1) + hiPrec[1]) + hiPrec[0];
} else {

	final double y = (((x * org.apache.commons.math3.util.FastMath.F_1_3) - org.apache.commons.math3.util.FastMath.F_1_2) * x) + 1;
	return y * x;
},commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return y * x,commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added a function to raise a double to an int power
, ingredientB: added a function to raise a double to an int power

01:53:50.526 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:50.527 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:50.528 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: d = 1.0 / d,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added a function to raise a double to an int power
, ingredientB: added a function to raise a double to an int power

01:53:52.490 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:52.490 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:52.491 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (e < 0) {
	e = -e;
	d = 1.0 / d;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: d = 1.0 / d,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added a function to raise a double to an int power
, ingredientB: added a function to raise a double to an int power

01:53:54.514 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:54.514 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:54.515 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (e == 0) {
	return 1.0;
} else if (e < 0) {
	e = -e;
	d = 1.0 / d;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (e < 0) {
	e = -e;
	d = 1.0 / d;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

01:53:56.560 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:56.560 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:56.561 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int splitFactor = 0x8000001,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (e == 0) {
	return 1.0;
} else if (e < 0) {
	e = -e;
	d = 1.0 / d;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:53:58.554 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:53:58.555 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:53:58.555 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ZERO = new Decimal64(0.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double b = getB(n, x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Removed too aggressive checks for impossible errors.

01:54:00.652 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:00.653 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:00.653 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ZERO = new Decimal64(0.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return evaluate(x, epsilon, java.lang.Integer.MAX_VALUE),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Removed too aggressive checks for impossible errors.

01:54:02.721 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:02.721 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:02.722 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ZERO = new Decimal64(0.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return evaluate(x, org.apache.commons.math3.util.ContinuedFraction.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:54:04.698 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:04.699 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:04.699 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (value < 0) {
	return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n));
} else {
	return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n));
},commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:54:06.649 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:06.650 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:06.650 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

01:54:08.603 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:08.604 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:08.604 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Added a new ExtendedFieldElement interface.

01:54:10.583 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:10.583 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:10.584 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value, 
a4.value, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Added a new ExtendedFieldElement interface.

01:54:12.591 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:12.591 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:12.592 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < a.length; ++i) {
	aDouble[i] = a[i].value;
	bDouble[i] = b[i].value;
},commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Added a new ExtendedFieldElement interface.

01:54:14.606 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:14.606 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:14.607 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.acos(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:54:17.049 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:17.050 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:17.050 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (obj instanceof org.apache.commons.math3.util.Decimal64) {
	final org.apache.commons.math3.util.Decimal64 that = ((org.apache.commons.math3.util.Decimal64) (obj));
	return java.lang.Double.doubleToLongBits(this.value) == java.lang.Double.doubleToLongBits(
	that.value);
},commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Added a new ExtendedFieldElement interface.

01:54:19.548 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:19.549 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:19.549 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Added a new ExtendedFieldElement interface.

01:54:21.994 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:21.994 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:21.995 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(value * a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:54:23.972 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:23.972 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:23.973 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return java.lang.Double.isInfinite(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Added a new ExtendedFieldElement interface.

01:54:26.069 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:26.069 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:26.070 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(value + a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:54:28.432 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:28.432 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:28.433 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return java.lang.Double.isNaN(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:54:30.410 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:30.410 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:30.412 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(n * this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (n < maxIterations) {
	final double a = getA(n, x);
	final double b = getB(n, x);

	double dN = a + (b * dPrev);
	if (org.apache.commons.math3.util.Precision.equals(dN, 0.0, small)) {
		dN = small;
	}
	double cN = a + (b / cPrev);
	if (org.apache.commons.math3.util.Precision.equals(cN, 0.0, small)) {
		cN = small;
	}

	dN = 1 / dN;
	final double deltaN = cN * dN;
	hN = hPrev * deltaN;

	if (java.lang.Double.isInfinite(hN)) {
		throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
		x);
	}
	if (java.lang.Double.isNaN(hN)) {
		throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, 
		x);
	}

	if (org.apache.commons.math3.util.FastMath.abs(deltaN - 1.0) < epsilon) {
		break;
	}

	dPrev = dN;
	cPrev = cN;
	hPrev = hN;
	n++;
} ,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:54:32.516 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:32.516 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:32.517 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(n * this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: n++,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:54:34.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:34.739 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:34.740 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(n * this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hPrev = hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:54:36.837 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:36.838 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:36.839 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(n * this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cPrev = cN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:54:39.143 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:39.144 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:39.146 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(n * this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: dPrev = dN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:54:41.584 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:41.584 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:41.585 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(n * this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(deltaN - 1.0) < epsilon) {
	break;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:54:43.801 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:43.801 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:43.802 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(n * this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (java.lang.Double.isNaN(hN)) {
	throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, 
	x);
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:54:46.061 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:46.061 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:46.062 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (java.lang.Double.isInfinite(hN)) {
	throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
	x);
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:54:48.204 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:48.204 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:48.205 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:54:50.177 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:50.177 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:50.179 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hN = hPrev * deltaN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:54:52.416 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:52.416 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:52.417 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double deltaN = cN * dN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:54:54.569 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:54.569 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:54.570 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: dN = 1 / dN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:54:56.607 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:56.607 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:56.608 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(cN, 0.0, small)) {
	cN = small;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:54:58.567 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:54:58.567 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:54:58.568 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cN = small,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:55:00.591 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:00.591 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:00.592 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double cN = a + (b / cPrev),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:55:02.747 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:02.747 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:02.748 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(dN, 0.0, small)) {
	dN = small;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:55:04.914 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:04.914 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:04.915 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: dN = small,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:55:07.000 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:07.000 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:07.001 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double dN = a + (b * dPrev),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:55:08.931 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:08.931 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:08.932 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double b = getB(n, x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:55:10.870 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:10.870 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:10.871 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double hN = hPrev,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:55:12.840 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:12.840 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:12.841 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(hPrev, 0.0, small)) {
	hPrev = small;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:55:14.863 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:14.863 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:14.864 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double small = 1.0E-50,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Removed too aggressive checks for impossible errors.

01:55:16.935 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:16.935 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:16.936 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return evaluate(x, epsilon, java.lang.Integer.MAX_VALUE),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Removed too aggressive checks for impossible errors.

01:55:18.976 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:18.976 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:18.977 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return evaluate(x, org.apache.commons.math3.util.ContinuedFraction.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:55:20.973 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:20.973 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:20.974 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double cd = splitFactor * d,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int splitFactor = 0x8000001,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:55:23.015 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:23.015 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:23.016 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double d1High = cd - (cd - d),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double cd = splitFactor * d,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:55:25.078 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:25.078 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:25.079 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double d1Low = d - d1High,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double d1High = cd - (cd - d),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:55:27.080 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:27.080 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:27.081 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double resultHigh = 1,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double d1Low = d - d1High,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:55:29.019 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:29.019 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:29.020 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double resultLow = 0,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double resultHigh = 1,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:55:30.997 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:30.997 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:30.998 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double d2p = d,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double resultLow = 0,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:55:32.986 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:32.986 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:32.987 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double d2pHigh = d1High,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double d2p = d,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:55:34.946 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:34.946 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:34.947 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double d2pLow = d1Low,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double d2pHigh = d1High,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:55:37.039 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:37.039 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:37.040 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double tmpHigh = resultHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double d2pLow = d1Low,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:55:39.230 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:39.230 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:39.231 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double cRH = splitFactor * resultHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double tmpHigh = resultHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:55:41.262 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:41.263 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:41.263 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rHH = cRH - (cRH - resultHigh),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double cRH = splitFactor * resultHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:55:43.303 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:43.303 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:43.304 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rHL = resultHigh - rHH,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rHH = cRH - (cRH - resultHigh),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:55:45.356 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:45.357 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:45.358 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow)),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rHL = resultHigh - rHH,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:55:47.302 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:47.302 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:47.303 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: resultHigh = tmpHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow)),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:55:49.326 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:49.326 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:49.327 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: resultLow = (resultLow * d2p) + tmpLow,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: resultHigh = tmpHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added a function to raise a double to an int power
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:55:51.271 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:51.271 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:51.272 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((e & 0x1) != 0) {


	final double tmpHigh = resultHigh * d2p;
	final double cRH = splitFactor * resultHigh;
	final double rHH = cRH - (cRH - resultHigh);
	final double rHL = resultHigh - rHH;
	final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
	resultHigh = tmpHigh;
	resultLow = (resultLow * d2p) + tmpLow;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: resultLow = (resultLow * d2p) + tmpLow,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

01:55:53.233 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:53.234 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:53.234 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double tmpHigh = d2pHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((e & 0x1) != 0) {


	final double tmpHigh = resultHigh * d2p;
	final double cRH = splitFactor * resultHigh;
	final double rHH = cRH - (cRH - resultHigh);
	final double rHL = resultHigh - rHH;
	final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
	resultHigh = tmpHigh;
	resultLow = (resultLow * d2p) + tmpLow;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:55:55.184 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:55.184 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:55.185 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double tmpHigh = d2pHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double d2pLow = d1Low,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:55:57.136 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:57.136 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:57.137 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double tmpHigh = d2pHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow)),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:55:59.069 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:55:59.069 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:55:59.070 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double tmpHigh = d2pHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: resultLow = (resultLow * d2p) + tmpLow,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

01:56:01.398 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:01.398 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:01.399 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double tmpHigh = d2pHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((e & 0x1) != 0) {


	final double tmpHigh = resultHigh * d2p;
	final double cRH = splitFactor * resultHigh;
	final double rHH = cRH - (cRH - resultHigh);
	final double rHL = resultHigh - rHH;
	final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
	resultHigh = tmpHigh;
	resultLow = (resultLow * d2p) + tmpLow;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:56:03.903 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:03.904 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:03.905 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double cD2pH = splitFactor * d2pHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double tmpHigh = resultHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:56:06.096 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:06.096 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:06.098 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double cD2pH = splitFactor * d2pHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: resultHigh = tmpHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:56:08.464 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:08.465 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:08.466 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double cD2pH = splitFactor * d2pHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double tmpHigh = d2pHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

01:56:10.552 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:10.552 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:10.553 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double cD2pH = splitFactor * d2pHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((e & 0x1) != 0) {


	final double tmpHigh = resultHigh * d2p;
	final double cRH = splitFactor * resultHigh;
	final double rHH = cRH - (cRH - resultHigh);
	final double rHL = resultHigh - rHH;
	final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
	resultHigh = tmpHigh;
	resultLow = (resultLow * d2p) + tmpLow;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:56:12.995 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:12.995 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:12.996 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double d2pHH = cD2pH - (cD2pH - d2pHigh),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double tmpHigh = resultHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:56:15.021 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:15.021 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:15.022 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double d2pHH = cD2pH - (cD2pH - d2pHigh),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: resultHigh = tmpHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:56:17.040 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:17.040 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:17.041 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double d2pHH = cD2pH - (cD2pH - d2pHigh),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double cD2pH = splitFactor * d2pHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

01:56:19.258 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:19.258 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:19.259 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double d2pHH = cD2pH - (cD2pH - d2pHigh),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((e & 0x1) != 0) {


	final double tmpHigh = resultHigh * d2p;
	final double cRH = splitFactor * resultHigh;
	final double rHH = cRH - (cRH - resultHigh);
	final double rHL = resultHigh - rHH;
	final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
	resultHigh = tmpHigh;
	resultLow = (resultLow * d2p) + tmpLow;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:56:21.418 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:21.418 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:21.419 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int splitFactor = 0x8000001,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:56:23.367 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:23.368 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:23.369 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int splitFactor = 0x8000001,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.Decimal64.ZERO,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:56:25.339 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:25.340 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:25.341 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int splitFactor = 0x8000001,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.Decimal64.class,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

01:56:27.365 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:27.365 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:27.366 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int splitFactor = 0x8000001,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (e < 0) {
	e = -e;
	d = 1.0 / d;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

01:56:29.406 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:29.406 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:29.407 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int splitFactor = 0x8000001,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: d = 1.0 / d,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

01:56:31.471 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:31.471 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:31.472 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int splitFactor = 0x8000001,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added a function to raise a double to an int power
, ingredientB: added a function to raise a double to an int power

01:56:33.539 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:33.539 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:33.540 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (e == 0) {
	return 1.0;
} else if (e < 0) {
	e = -e;
	d = 1.0 / d;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((e & 0x1) != 0) {


	final double tmpHigh = resultHigh * d2p;
	final double cRH = splitFactor * resultHigh;
	final double rHH = cRH - (cRH - resultHigh);
	final double rHL = resultHigh - rHH;
	final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
	resultHigh = tmpHigh;
	resultLow = (resultLow * d2p) + tmpLow;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added a function to raise a double to an int power
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:56:35.558 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:35.558 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:35.560 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (e == 0) {
	return 1.0;
} else if (e < 0) {
	e = -e;
	d = 1.0 / d;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double d2pHH = cD2pH - (cD2pH - d2pHigh),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

01:56:37.507 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:37.507 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:37.508 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double cd = splitFactor * d,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

01:56:39.484 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:39.484 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:39.485 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double d1High = cd - (cd - d),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

01:56:41.430 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:41.430 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:41.431 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double d1Low = d - d1High,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

01:56:43.381 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:43.381 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:43.382 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double resultHigh = 1,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

01:56:45.403 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:45.403 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:45.405 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double resultLow = 0,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

01:56:47.428 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:47.428 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:47.429 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double d2p = d,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

01:56:49.514 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:49.514 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:49.515 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double d2pHigh = d1High,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

01:56:51.589 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:51.589 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:51.590 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double d2pLow = d1Low,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

01:56:53.675 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:53.675 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:53.676 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double tmpHigh = resultHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

01:56:55.657 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:55.657 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:55.658 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double cRH = splitFactor * resultHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

01:56:57.594 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:57.594 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:57.595 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rHH = cRH - (cRH - resultHigh),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added a function to raise a double to an int power
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:56:59.596 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:56:59.596 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:56:59.597 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rHL = resultHigh - rHH,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added a function to raise a double to an int power
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:57:01.659 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:57:01.660 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:57:01.660 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow)),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added a function to raise a double to an int power
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:57:03.764 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:57:03.764 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:57:03.765 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: resultLow = (resultLow * d2p) + tmpLow,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added a function to raise a double to an int power
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:57:06.335 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:57:06.335 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:57:06.336 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double cD2pH = splitFactor * d2pHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: added a function to raise a double to an int power
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

01:57:08.817 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:57:08.818 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:57:08.819 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double d2pHH = cD2pH - (cD2pH - d2pHigh),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:57:11.124 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:57:11.124 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:57:11.125 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(this.value + a.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Added a new ExtendedFieldElement interface.

01:57:13.291 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:57:13.291 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:57:13.292 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sqrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:57:15.363 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:57:15.364 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:57:15.365 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.util.Decimal64 that = ((org.apache.commons.math3.util.Decimal64) (obj)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Added a new ExtendedFieldElement interface.

01:57:17.541 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:57:17.541 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:57:17.542 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(value * a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:57:19.518 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:57:19.518 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:57:19.519 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return java.lang.Double.isInfinite(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Added a new ExtendedFieldElement interface.

01:57:21.751 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:57:21.751 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:57:21.752 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(value + a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:57:23.879 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:57:23.880 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:57:23.881 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

01:57:25.963 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:57:25.963 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:57:25.964 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return java.lang.Double.isNaN(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: added a function to raise a double to an int power

01:57:27.926 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:57:27.926 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:57:27.927 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (value < 0) {
	return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n));
} else {
	return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n));
},commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((e & 0x1) != 0) {


	final double tmpHigh = resultHigh * d2p;
	final double cRH = splitFactor * resultHigh;
	final double rHH = cRH - (cRH - resultHigh);
	final double rHL = resultHigh - rHH;
	final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
	resultHigh = tmpHigh;
	resultLow = (resultLow * d2p) + tmpLow;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:57:30.022 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:57:30.022 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:57:30.023 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64.ZERO,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:57:32.167 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:57:32.167 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:57:32.169 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64.ONE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

01:57:34.304 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:57:34.304 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:57:34.305 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64.class,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[ERROR] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:84) - Error at generation 1
java.lang.IllegalArgumentException: Comparison method violates its general contract!
java.lang.IllegalArgumentException: Comparison method violates its general contract!
	at java.util.TimSort.mergeLo(TimSort.java:777)
	at java.util.TimSort.mergeAt(TimSort.java:514)
	at java.util.TimSort.mergeCollapse(TimSort.java:441)
	at java.util.TimSort.sort(TimSort.java:245)
	at java.util.Arrays.sort(Arrays.java:1512)
	at java.util.ArrayList.sort(ArrayList.java:1454)
	at java.util.Collections.sort(Collections.java:175)
	at fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy.getFixIngredient(PurposeBasedSearchStrategy.java:72)
	at fr.inria.astor.core.ingredientbased.IngredientBasedEvolutionaryRepairApproachImpl.createOperatorInstanceForPoint(IngredientBasedEvolutionaryRepairApproachImpl.java:95)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.modifyProgramVariant(EvolutionarySearchEngine.java:264)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.createNewProgramVariant(EvolutionarySearchEngine.java:198)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.processGenerations(EvolutionarySearchEngine.java:146)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:68)
	at fr.inria.main.evolution.AstorMain.run(AstorMain.java:203)
	at fr.inria.main.evolution.AstorMain.execute(AstorMain.java:247)
	at fr.inria.main.evolution.AstorMain.main(AstorMain.java:218)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - Time Repair Loop (s): 2054.788
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:172) - generationsexecuted: 1
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:247) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:257) - End Repair Search: NOT Found solution
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:208) - Time Total(s): 4850.336


Node: a790fc500b33



Date: Mon Nov 25 01:57:35 EST 2019

cd /script/jGenProg_Defects4J_Math_5;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-5 \
	-failing org.apache.commons.math3.complex.ComplexTest \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:purpose \
	-dependencies /script/jGenProg_Defects4J_Math_5/target/classes/:/script/jGenProg_Defects4J_Math_5/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

